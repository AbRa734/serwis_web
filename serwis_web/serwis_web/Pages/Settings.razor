@page "/settings"
@inject ApiService ApiService
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using ApiService
@using ApiService.Models
@using ApiService.Repositories
@using Size = MudBlazor.Size
@inject IJSRuntime JSRuntime

<style>
	.settings-container {
		display: flex;
		flex-direction: column;
		gap: 23px;
		padding: 0;
		margin: 0;
		padding-left: 5px;
		padding-right: 20px;
	}

	.settings-container h2 {
		font-size: 30px;
		font-weight: 600;
		margin: 0;
		padding: 0;
	}

	.settings-back {
		display: flex;
		flex-direction: column;
		gap: 25px;
		width: 100%;
		padding: 30px;
		background-color: #FFFFFF;
		border-radius: 10px;
		box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
		margin: 0;
	}

	.settings-tab {
		display: flex;
		width: 100%;
		gap: 100px;
		padding: 0;
		margin: 0;
	}

	.settings-col {
		flex: 1;
		display: flex;
		flex-direction: column;
		gap: 10px;
	}

	.settings-col h2 {
		font-size: 30px;
		text-align: center;
	}

	.settings-col h4 {
		font-size: 16px;
		font-weight: 500;
		padding: 0;
		margin: 0;
		color: #606060;
	}

	.settings-row {
		display: flex;
		align-items: center;
		gap: 40px;
		width: 100%;
	}

	.single-col {
		display: flex;
		flex-direction: column;
		gap: 10px;
		width: 100%;
	}

	input {
		background-color: #F5F6FA;
		border: solid 1px #D5D5D5;
		width: 100%;
		padding: 15px;
		border-radius: 5px;
		color: #A6A6A6;
		font-size: 14px;
		margin-bottom: 10px;
	}

	input {
		height: 50px;
	}

	.setting-btn {
		background-color: #4880FF;
		border: none;
		border-radius: 10px;
		padding: 15px;
		color: #FFFFFF;
		font-size: 16px;
		font-weight: 500;
		transition: all 0.3s ease-in-out;
		cursor: pointer;
		width: 100%;
		margin-top: 25px;
	}

	.setting-btn:hover {
		background-color: #336ff5;
	}

	.reset-password {
		background-color: #ccf0eb;
		border: none;
		border-radius: 10px;
		padding: 15px;
		color: #00b69b;
		font-size: 16px;
		font-weight: 500;
		transition: all 0.3s ease-in-out;
		cursor: pointer;
		width: 100%;
		margin-top: 25px;
	}

	.reset-password:hover {
		background-color: #85d4c8;
	}

	.success-message {
		background-color: #d4edda;
		color: #155724;
		border: 1px solid #c3e6cb;
		padding: 10px;
		margin-bottom: 15px;
		border-radius: 4px;
	}

	.error-message {
		background-color: #f8d7da;
		color: #721c24;
		border: 1px solid #f5c6cb;
		padding: 10px;
		margin-bottom: 15px;
		border-radius: 4px;
	}

	.validation-message {
		color: #F44336;
		font-size: 12px;
		margin-top: -5px;
		margin-bottom: 10px;
	}

	.invalid-field {
		border: 1px solid #F44336 !important;
	}

	@@media (max-width: 1366px) {
	.settings-tab {
		gap: 80px;
	}
	}

	@@media (max-width: 1280px) {
	.settings-container {
		gap: 30px;
		padding-right: 15px;
	}

	.settings-row {
		gap: 40px;
	}

	.settings-tab {
		flex-direction: column;
		gap: 50px;
	}

	input {
		margin-bottom: 15px;
	}

	.single-col {
		gap: 8px;
	}
	}

	@@media (max-width: 768px) {
	.settings-container {
		padding-right: 5px;
		padding-top: 10px;
	}
	.settings-col h2 {
		margin-bottom: 15px;
		text-align: start;
	}
	}

	@@media (max-width: 640px) {
	.settings-row {
		flex-direction: column;
		gap: 8px;
	}
	.settings-col h2 {
		font-size: 28px;
	}
	}
</style>

<PageTitle>Ustawienia</PageTitle>

<div class="settings-container">
	<h2>Ustawienia</h2>

	@if (!string.IsNullOrEmpty(_message))
	{
		<div class="@_messageClass">@_message</div>
	}

	<div class="settings-back">
		<div class="settings-tab">
			<EditForm Model="@_userDataModel" OnSubmit="HandleFormSubmit" class="settings-col">
				<DataAnnotationsValidator/>
				
				<h4>Imię <span style="color: #F44336">*</span></h4>
				<InputText @bind-Value="_userDataModel.Imie" placeholder="Imię użytkownika" class="@(ValidationErrors.ContainsKey("Imie") ? "invalid-field" : "")" />
				@if (ValidationErrors.ContainsKey("Imie"))
				{
					<div class="validation-message">@ValidationErrors["Imie"]</div>
				}

				<h4>Nazwisko <span style="color: #F44336">*</span></h4>
				<InputText @bind-Value="_userDataModel.Nazwisko" placeholder="Nazwisko użytkownika" class="@(ValidationErrors.ContainsKey("Nazwisko") ? "invalid-field" : "")" />
				@if (ValidationErrors.ContainsKey("Nazwisko"))
				{
					<div class="validation-message">@ValidationErrors["Nazwisko"]</div>
				}

				<div class="settings-row">
					<div class="single-col">
						<h4>Numer Telefonu</h4>
						<InputText @bind-Value="_userDataModel.NumerTelefonu" placeholder="Numer telefonu" class="@(ValidationErrors.ContainsKey("NumerTelefonu") ? "invalid-field" : "")" />
						@if (ValidationErrors.ContainsKey("NumerTelefonu"))
						{
							<div class="validation-message">@ValidationErrors["NumerTelefonu"]</div>
						}
					</div>
					<div class="single-col">
						<h4>Adres Email <span style="color: #F44336">*</span></h4>
						<InputText @bind-Value="_userDataModel.Email" placeholder="Adres email" readonly class="@(ValidationErrors.ContainsKey("Email") ? "invalid-field" : "")" />
						@if (ValidationErrors.ContainsKey("Email"))
						{
							<div class="validation-message">@ValidationErrors["Email"]</div>
						}
					</div>
				</div>

				<h4>Państwo</h4>
				<InputText @bind-Value="_userDataModel.Kraj" placeholder="Państwo" />

				<div class="settings-row">
					<div class="single-col">
						<h4>Ulica</h4>
						<InputText @bind-Value="_userDataModel.Ulica" placeholder="Ulica" />
					</div>
					<div class="single-col">
						<h4>Numer Domu</h4>
						<InputNumber @bind-Value="_userDataModel.NumerDomu" placeholder="Numer domu" />
					</div>
				</div>

				<div class="settings-row">
					<div class="single-col">
						<h4>Miasto</h4>
						<InputText @bind-Value="_userDataModel.Miasto" placeholder="Miasto" />
					</div>
					<div class="single-col">
						<h4>Kod pocztowy</h4>
						<InputText @bind-Value="_userDataModel.KodPocztowy" placeholder="Kod pocztowy" class="@(ValidationErrors.ContainsKey("KodPocztowy") ? "invalid-field" : "")" />
						@if (ValidationErrors.ContainsKey("KodPocztowy"))
						{
							<div class="validation-message">@ValidationErrors["KodPocztowy"]</div>
						}
					</div>
				</div>

				@if (HasValidationErrors)
				{
					<div class="error-message">
						Proszę poprawić błędy w formularzu przed zapisaniem zmian.
					</div>
				}

				<button type="submit" class="setting-btn" disabled="@_isSaving">
					@if (_isSaving)
					{
						<span>Zapisywanie...</span>
					}
					else 
					{
						<span>Zapisz zmiany</span>
					}
				</button>
				
				@if (_isSocialLogin)
				{
					<div class="error-message">
						Zalogowano za pośrednictwem platformy społecznościowej. Aby zmienić hasło, skorzystaj z ustawień konta w serwisie zewnętrznym.
					</div>
				}
				else
				{
					<button type="button" class="reset-password" @onclick="ChangePassword" disabled="@(_isEmailSending)">
						@if (_isEmailSending)
						{
							<MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
							<span class="ms-2">Resetowanie hasła...</span>
						}
						else
						{
							<span>Zrestartuj hasło</span>
						}
					</button>
				}
				
			</EditForm>

		</div>
	</div>
</div>

@code {
	private UserDataModel _userDataModel = new();
	private PasswordChangeModel _passwordModel = new();
	private string? _message;
	private string _messageClass = "success-message";
	private Uzytkownik? _currentUser;
	private AdresEmail? _currentEmail;
	private NumerTelefonu? _currentPhone;
	private Adres? _currentAddress;

	private bool _isSocialLogin = false;
	private bool _isEmailSending = false;
	private bool _isSaving = false;
	
	private Dictionary<string, string> ValidationErrors = new Dictionary<string, string>();
	
	public bool HasValidationErrors => ValidationErrors.Count > 0;

	protected override async Task OnInitializedAsync()
	{
		await LoadUser();
		if (_currentUser == null)
		{
			ShowError("Nie znaleziono danych użytkownika");
			return;
		}

		await LoadUserData();
    
		try {
			var userEmail = await JSRuntime.InvokeAsync<string>("eval", 
				"document.cookie.split(';').find(c => c.trim().startsWith('userEmail='))?.split('=')[1] || ''");
			_isSocialLogin = !string.IsNullOrEmpty(userEmail);
		}
		catch {
			_isSocialLogin = false;
		}
	}
	
	private async Task LoadUserData()
	{
		
		if (_currentUser.AdresEmailId > 0)
		{
			var emailResult = await ApiService.AdresyEmailRepo.AdresEmailGet(_currentUser.AdresEmailId);
			_currentEmail = emailResult.Data;
		}

		if (_currentUser.NumerTelefonuId.HasValue && _currentUser.NumerTelefonuId.Value > 0)
		{
			var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuGet(_currentUser.NumerTelefonuId.Value);
			_currentPhone = phoneResult.Data;
		}

		if (_currentUser.Adres != null)
		{
			_currentAddress = _currentUser.Adres;
		}

		_userDataModel.Imie = _currentUser.Imie;
		_userDataModel.Nazwisko = _currentUser.Nazwisko;
		_userDataModel.Email = _currentEmail?.Email;
		_userDataModel.NumerTelefonu = _currentPhone?.Numer;

		if (_currentAddress != null)
		{
			_userDataModel.Ulica = _currentAddress.Ulica;
			_userDataModel.NumerDomu = _currentAddress.NumerDomu;
			_userDataModel.NumerMieszkania = _currentAddress.NumerMieszkania;
			_userDataModel.KodPocztowy = _currentAddress.KodPocztowy;
			_userDataModel.Miasto = _currentAddress.Miasto;
			_userDataModel.Kraj = _currentAddress.Kraj;
		}
		
		ValidationErrors.Clear();
	}
	
	private async Task LoadUser()
	{
		try
		{
			_currentUser = await ApiService.GetUzytkownik();
			StateHasChanged();
		}
		catch (Exception ex)
		{
			ShowError($"Błąd podczas pobierania danych użytkownika.");
		}
	}

	private async Task HandleFormSubmit()
	{
		ValidationErrors.Clear();
		ValidateForm();
		StateHasChanged();
		if (!HasValidationErrors)
		{
			await SaveUserData();
		}
	}

	private void ValidateForm()
	{
		if (string.IsNullOrWhiteSpace(_userDataModel.Imie))
		{
			ValidationErrors["Imie"] = "Imię jest wymagane";
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.Nazwisko))
		{
			ValidationErrors["Nazwisko"] = "Nazwisko jest wymagane";
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.Email))
		{
			ValidationErrors["Email"] = "Adres email jest wymagany";
		}
		else if (!IsValidEmail(_userDataModel.Email))
		{
			ValidationErrors["Email"] = "Nieprawidłowy format adresu email";
		}
		
		if (!string.IsNullOrWhiteSpace(_userDataModel.NumerTelefonu) && !IsValidPhoneNumber(_userDataModel.NumerTelefonu))
		{
			ValidationErrors["NumerTelefonu"] = "Nieprawidłowy format numeru telefonu, powinien zawierać 9 cyfr";
		}
		
		if (!string.IsNullOrWhiteSpace(_userDataModel.KodPocztowy) && !IsValidPostalCode(_userDataModel.KodPocztowy))
		{
			ValidationErrors["KodPocztowy"] = "Nieprawidłowy format kodu pocztowego (XX-XXX)";
		}
	}
	
	private bool IsValidEmail(string email)
	{
		try
		{
			var addr = new System.Net.Mail.MailAddress(email);
			return addr.Address == email;
		}
		catch
		{
			return false;
		}
	}

	private bool IsValidPhoneNumber(string phone)
	{
		return System.Text.RegularExpressions.Regex.IsMatch(phone, @"^\d{9}$");
	}

	private bool IsValidPostalCode(string postalCode)
	{
		return System.Text.RegularExpressions.Regex.IsMatch(postalCode, @"^\d{2}-\d{3}$");
	}

	private async Task SaveUserData()
	{
		try
		{
			_isSaving = true;
			
			if (_currentUser == null)
			{
				ShowError("Nie można zapisać zmian – użytkownik nie został załadowany.");
				return;
			}

			int adresEmailId = _currentUser.AdresEmailId;

			int numerTelefonuId = _currentUser.NumerTelefonuId ?? 0;
			if (!string.IsNullOrWhiteSpace(_userDataModel.NumerTelefonu))
			{
				var phoneDto = new NumerTelefonuDto { Numer = _userDataModel.NumerTelefonu };

				var phoneResult = numerTelefonuId > 0
					? await ApiService.NumeryTelefonuRepo.NumerTelefonuPut(numerTelefonuId, phoneDto)
					: await ApiService.NumeryTelefonuRepo.NumerTelefonuPost(phoneDto);

				if (phoneResult.Error != null)
				{
					ShowError("Błąd podczas zapisywania numeru telefonu.");
					return;
				}

				numerTelefonuId = phoneResult.Data?.NumerTelefonuId ?? 0;
			}

			int adresId = _currentAddress?.AdresId ?? 0;
			if (!string.IsNullOrWhiteSpace(_userDataModel.Ulica) && !string.IsNullOrWhiteSpace(_userDataModel.Miasto))
			{
				var adresDto = new AdresDto
				{
					Ulica = _userDataModel.Ulica,
					NumerDomu = _userDataModel.NumerDomu,
					NumerMieszkania = _userDataModel.NumerMieszkania,
					KodPocztowy = _userDataModel.KodPocztowy,
					Miasto = _userDataModel.Miasto,
					Kraj = _userDataModel.Kraj
				};

				var adresResult = adresId > 0
					? await ApiService.AdresyRepo.AdresPut(adresId, adresDto)
					: await ApiService.AdresyRepo.AdresPost(adresDto);

				if (adresResult.Error != null)
				{
					ShowError("Błąd podczas zapisywania adresu.");
					return;
				}

				adresId = adresResult.Data?.AdresId ?? 0;
			}

			var updatedUser = new UzytkownikDto
			{
				Imie = _userDataModel.Imie,
				Nazwisko = _userDataModel.Nazwisko,
				AdresEmailId = adresEmailId,
				NumerTelefonuId = numerTelefonuId,
				AdresId = adresId,
			};

			var updateResult = await ApiService.UzytkownicyRepo.UzytkownikPut(_currentUser.UzytkownikId, updatedUser);
			if (updateResult.Error != null)
			{
				ShowError("Błąd podczas zapisywania danych użytkownika.");
				return;
			}

			ShowSuccess("Dane zostały zapisane poprawnie.");
			await LoadUserData(); 
		}
		catch (Exception ex)
		{
			ShowError("Wystąpił błąd, spróbuj ponownie później.");
		}
		finally
		{
			_isSaving = false;
		}
	}


	private async Task ChangePassword()
	{
		_isEmailSending = true;
		var email = await ApiService.GetUzytkownik();
		var result = await ApiService.AdministracjaRepo.RestartHaslaPost(email.AdresEmail.Email);

		if (result.Error == null && result.Data)
		{
			ShowSuccess("Link do zresetowania hasła został wysłany na podany adres email.");
		}
		else
		{
			ShowError("Nie udało się wysłać przypomnienia. Spróbuj ponownie.");
		}

		_passwordModel = new PasswordChangeModel();
		_isEmailSending = false;
	}

	private void ShowSuccess(string message)
	{
		_message = message;
		_messageClass = "success-message";
	}

	private void ShowError(string error)
	{
		_message = error;
		_messageClass = "error-message";
	}

	public class UserDataModel
	{
		public string? Imie { get; set; }
		public string? Nazwisko { get; set; }
		public string? Email { get; set; }
		public string? NumerTelefonu { get; set; }
		public string? Ulica { get; set; }
		public int NumerDomu { get; set; }
		public int? NumerMieszkania { get; set; }
		public string? KodPocztowy { get; set; }
		public string? Miasto { get; set; }
		public string? Kraj { get; set; }
	}

	public class PasswordChangeModel
	{

	}
}