@page "/report"
@rendermode InteractiveServer
@using ApiService.Models
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using QuestPDF.Fluent
@using QuestPDF.Helpers
@using Colors = QuestPDF.Helpers.Colors
@using Console = System.Console
@using serwis_web.Components
@inject ApiService.ApiService ApiService
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime

<PageTitle>Raport zlecenia</PageTitle>

<style>
    .custom-pdf-button {
        height: 40px;
        font-size: 0.875rem;
        padding: 0 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .new-button {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 10px;
        background-color: #4880FF;
        border: none;
        border-radius: 10px;
        padding: 0 50px;
        color: #FFFFFF;
        font-size: 16px;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
        text-transform: none;
    }

    .new-button:hover {
        background-color: #336ff5;
    }

    .pdf-content {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .pdf-icon {
        font-size: 26px;
    }

    /* Style dla karuzeli */
    .order-carousel {
        width: 100%;
        margin: 0 auto;
        padding: 0;
    }

    .order-carousel ::deep .mud-carousel {
        height: auto !important;
        min-height: 220px; /* Zwiększona wysokość */
    }

    .order-carousel ::deep .mud-carousel-item {
        padding: 8px;
    }

    .order-card-container {
        height: 200px; /* Zwiększona wysokość karty */
        padding: 0 8px;
    }

    .selected-order {
        border-width: 2px !important;
    }

    .order-container {
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
    }

    .order-back {
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
    }

    .order-tab {
        width: 100%;
        max-width: 100%;
        overflow-x: hidden;
        padding: 16px;
    }

    .narrower-paper {
        display: flex;
        flex-direction: column;
        width: 100%;
        gap: 12px;
        padding: 0;
        margin: 0;
    }

    /* Styl dla przycisków karuzeli */
    ::deep .mud-carousel-navigation-button {
        color: #4880FF;
    }

    /* Ukrycie wskaźników (bullets) */
    ::deep .mud-carousel-indicators {
        display: none !important;
    }
    
    @@media(max-width: 640px) {
        .new-button {
            padding: 0 15px;
        }
    }
</style>

<div class="order-container">
    <h2>Raport zlecenia</h2>
    <div class="order-back">
        <div class="order-tab">
            <MudText Typo="Typo.h6" Class="mb-3">Wybierz zamówienie</MudText>

            @if (_isLoading)
            {
                <MudSkeleton Height="60px" Animation="Animation.Wave" />
            }
            else if (_filteredZamowienia.Count == 0 || !_filteredZamowienia.Any(x => x.ZamowienieId != 0))
            {
                <MudAlert Severity="Severity.Info">Brak dostępnych zamówień</MudAlert>
            }
            else
            {
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField T="string"
                                      Label="Szukaj zamówienia"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      AdornmentColor="Color.Primary"
                                      ValueChanged="@((s) => FilterOrders(s))"
                                      Clearable="true"
                                      Class="mb-3" />
                    </MudItem>
                </MudGrid>

                <div class="order-carousel">
                    <MudCarousel @ref="_carousel"
                                 TData="object"
                                 AutoCycle="false"
                                 ShowArrows="true"
                                 ShowBullets="false"
                                 EnableSwipeGesture="true"
                                 Style="height: 210px"
                                 CustomNavigationActions="true"
                                 SelectedIndex="@_carouselSelectedIndex"
                                 SelectedIndexChanged="@((i) => _carouselSelectedIndex = i)">
                        @foreach (var itemGroup in _carouselItems)
                        {
                            <MudCarouselItem>
                                <div style="display: flex; justify-content: space-around; width: 100%;">
                                    @foreach (var zamowienie in itemGroup)
                                    {
                                        <div class="order-card-container">
                                            <MudCard Elevation="2"
                                                     Class="@(_selectedOrderId == zamowienie.ZamowienieId ? "mud-border-primary selected-order" : "")"
                                                     Style="cursor: pointer; height: 100%; overflow: hidden;"
                                                     @onclick="@(() => OnOrderSelectionChanged(zamowienie.ZamowienieId))">
                                                <MudCardHeader Style="padding: 10px 16px;">
                                                    <CardHeaderContent>
                                                        <MudText Typo="Typo.subtitle1" Style="font-size: 15px; margin-bottom: 2px;">
                                                            #@zamowienie.ZamowienieId.ToString("D5")
                                                        </MudText>
                                                        <MudText Typo="Typo.caption" Style="font-size: 13px;">
                                                            @GetSerwisName(zamowienie.Serwis.SerwisId)
                                                        </MudText>
                                                    </CardHeaderContent>
                                                    <CardHeaderActions>
                                                        <MudChip T="string"
                                                                 Color="@GetStatusColor(zamowienie.Status?.Nazwa ?? "")"
                                                                 Size="Size.Small"
                                                                 Style="height: 24px; font-size: 11px;">
                                                            @zamowienie.Status?.Nazwa
                                                        </MudChip>
                                                    </CardHeaderActions>
                                                </MudCardHeader>
                                                <MudCardContent Style="padding: 8px 16px;">
                                                    <MudText Typo="Typo.caption" Style="font-size: 13px; margin-bottom: 6px;">
                                                        Data: @zamowienie.DataDodania.ToString("dd.MM.yyyy")
                                                    </MudText>
                                                    <MudText Typo="Typo.caption" Style="font-size: 13px; margin-bottom: 6px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                                        Klient: @(zamowienie.Klient?.Uzytkownik != null
                                                                        ? $"{zamowienie.Klient.Uzytkownik.Imie} {zamowienie.Klient.Uzytkownik.Nazwisko}"
                                                                        : "-")
                                                    </MudText>
                                                    @if (!string.IsNullOrEmpty(zamowienie.Opis))
                                                    {
                                                        <MudText Typo="Typo.caption" Style="font-size: 13px; overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">
                                                            Opis: @(zamowienie.Opis.Length > 50 ? zamowienie.Opis.Substring(0, 50) + "..." : zamowienie.Opis)
                                                        </MudText>
                                                    }
                                                </MudCardContent>
                                            </MudCard>
                                        </div>
                                    }
                                </div>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                </div>
            }
        </div></div>

    <div class="order-back">
        <div class="order-tab">
            @if (_isLoading)
            {
                <div class="d-flex justify-center align-center" style="height: 300px;">
                    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
                </div>
            }
            else if (_selectedOrder == null)
            {
                <MudAlert Severity="Severity.Info">Wybierz zamówienie z listy powyżej</MudAlert>
            }
            else
            {
                <div class="order-row">
                    <div class="single-col">
                        <h4>Numer Zlecenia</h4>
                        <input type="number" value="@_selectedOrder.ZamowienieId" readonly/>
                    </div>
                    <div class="single-col">
                        <h4>Rodzaj zlecenia</h4>
                        <input type="text" value="@GetSerwisName(_selectedOrder.Serwis.SerwisId)" readonly />
                    </div>
                </div>

                <h4>Data utworzenia zlecenia</h4>
                <input type="text" value="@_selectedOrder.DataDodania.ToString("dd.MM.yyyy")" readonly/>
                
                <h4>Status zlecenia</h4>
                <input type="text" value="@_selectedOrder.Status?.Nazwa" readonly/>

                <h4>Priorytet</h4>
                <input type="text" value="@_selectedOrder.Priorytet?.Nazwa" readonly/>
                
                <h4>Metoda Płatności</h4>
                <input type="text" value="@_selectedOrder.MetodaPlatnosci?.Nazwa" readonly/>

                <h4>Kwota do zapłaty</h4>
                <input type="text" value="@_selectedOrder.Koszt100 zł" readonly/>
                
                @if (_selectedOrder.Serwisant != null && _selectedOrder.Serwisant?.Uzytkownik != null)
                {
                    <h4>Serwisant</h4>
                    <input type="text" value="@GetTechnicianFullName()" readonly/>
                    
                    <div class="order-row">
                        <div class="single-col">
                            <h4>Adres Email Serwisanta</h4>
                            <input type="email" value="@GetServicemenEmail(_selectedOrder.Serwisant.Uzytkownik.AdresEmailId)" readonly/>
                            
                        </div>
                        <div class="single-col">
                            <h4>Numer Telefonu Serwisanta</h4>
                            <input type="number" value="@GetServicemenPhoneNumber(_selectedOrder?.Serwisant.Uzytkownik.NumerTelefonuId)" readonly/>
                        </div>
                    </div>
                }   
                
                <h4>Opis</h4>
                <textarea readonly>@_selectedOrder.Opis</textarea>
                
                <div class="order-row">
                    <div class="single-col">
                        <h4>Planowana Data Realizacji</h4>
                        <input type="text" value="@FormatDate(_selectedOrder.PlanowanaDataRealizacjiOd)" readonly/>
                    </div>
                    <div class="single-col">
                        <h4>Planowana Data Zakończenia</h4>
                        <input type="text" value="@FormatDate(_selectedOrder.PlanowanaDataRealizacjiDo)" readonly/>
                    </div>
                </div>

                <div class="order-row">
                    <div class="single-col">
                        <h4>Data Rozpoczęcia Realizacji</h4>
                        <input type="text" value="@FormatDate(_selectedOrder.ZrealizowanaDataRealizacjiOd)" readonly
                               style="font-weight: bold"/>
                    </div>
                    <div class="single-col">
                        <h4>Data Zakończenia Realizacji</h4>
                        <input type="text" value="@FormatDate(_selectedOrder.ZrealizowanaDataRealizacjiDo)" readonly
                               style="font-weight: bold"/>
                    </div>
                </div>

                <h4>Czas realizacji</h4>
                <input type="text" value="@GetImplementationTime()" readonly/>

                <h4>Klient</h4>
                <input type="text" value="@GetClientFullName()" readonly/>

                <div class="order-row">
                    <div class="single-col">
                        <h4>Numer Telefonu Klienta</h4>
                        <input type="text" value="@_selectedOrder.NumerTelefonu?.Numer" readonly/>
                    </div>
                    <div class="single-col">
                        <h4>Adres Email Klienta</h4>
                        <input type="email" value="@_selectedOrder.AdresEmail?.Email" readonly/>
                    </div>
                </div>

                @if (_selectedOrder.Adres != null)
                {
                    <h4>Państwo</h4>
                    <input type="text" value="@_selectedOrder.Adres.Kraj" readonly/>
                    
                    <div class="order-row">
                        <div class="single-col">
                            <h4>Ulica</h4>
                            <input type="text" value="@_selectedOrder.Adres.Ulica" readonly/>
                        </div>
                        <div class="single-col">
                            <h4>Numer Domu</h4>
                            <input type="text" value="@_selectedOrder.Adres.NumerDomu" readonly/>
                        </div>
                    </div>

                    <div class="order-row">
                        <div class="single-col">
                            <h4>Miasto</h4>
                            <input type="text" value="@_selectedOrder.Adres.Miasto" readonly/>
                        </div>
                        <div class="single-col">
                            <h4>Kod pocztowy</h4>
                            <input type="text" value="@_selectedOrder.Adres.KodPocztowy" readonly/>
                        </div>
                    </div>
                }

                @if (_selectedOrder.Komentarze != null && _selectedOrder.Komentarze.Any())
                {
                    <h4>Uwagi do zlecenia</h4>
                    @foreach (var komentarz in _selectedOrder.Komentarze)
                    {
                        <input type="text" value="@komentarz.Tresc" readonly/>
                    }
                }

                <MudButton Class="new-button"
                           OnClick="DownloadPdf"
                           Disabled="@_generatingPdf"
                           Size="Size.Small">
                    @if (_generatingPdf)
                    {
                        <div class="pdf-content">
                            <MudProgressCircular Class="me-2" Size="Size.Small" Indeterminate="true" />
                            <span>Generowanie...</span>
                        </div>
                    }
                    else
                    {
                        <div class="pdf-content">
                            <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Class="pdf-icon me-2" />
                            <span>Pobierz PDF</span>
                        </div>
                    }
                </MudButton>

            }
        </div>
    </div>
</div>

<div class="help-button-container">
    <AccessibilityWidget/>
</div>


@code {
    private List<Zamowienie> _zamowienia = new();
    private List<Zamowienie> _filteredZamowienia = new();
    private Zamowienie? _selectedOrder;
    private int? _selectedOrderId;
    private List<DicTypSerwisu> _serwisy = new();
    private bool _isLoading = false;
    private bool _generatingPdf = false;
    private Uzytkownik _currentUser;
    public List<NumerTelefonu> _NumerTelefonu = new();
    public List<AdresEmail> _adresyEmail = new();
    public NumerTelefonu? _currentPhoneSerwisant;
    public AdresEmail? _currentEmailSerwisantt;

    private string _searchText = string.Empty;
    private MudCarousel<object> _carousel;
    private List<Zamowienie[]> _carouselItems = new();
    private int _carouselSelectedIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUserAsync();
        await LoadZamowienia();
        UpdateCarouselItems();
    }

    private void UpdateCarouselItems()
    {
        var filteredList = string.IsNullOrWhiteSpace(_searchText)
            ? _filteredZamowienia
            : _filteredZamowienia.Where(z =>
                z.ZamowienieId.ToString().Contains(_searchText) ||
                (z.Serwis?.Nazwa?.ToLower().Contains(_searchText.ToLower()) ?? false) ||
                (z.Status?.Nazwa?.ToLower().Contains(_searchText.ToLower()) ?? false) ||
                (z.Klient?.Uzytkownik?.Imie?.ToLower().Contains(_searchText.ToLower()) ?? false) ||
                (z.Klient?.Uzytkownik?.Nazwisko?.ToLower().Contains(_searchText.ToLower()) ?? false) ||
                (z.Opis?.ToLower().Contains(_searchText.ToLower()) ?? false)
            ).ToList();

        _carouselItems.Clear();

        for (int i = 0; i < filteredList.Count; i += 3)
        {
            var group = filteredList.Skip(i).Take(3).ToArray();
            _carouselItems.Add(group);
        }
    }
    
    private string GetSerwisName(int serwisId)
    {
        var serwis = _serwisy.FirstOrDefault(s => s.TypSerwisuId == serwisId);
        return serwis?.Nazwa ?? "Nie znaleziono";
    }

    private string GetServicemenEmail(int emailId)
    {
        var email = _adresyEmail.FirstOrDefault(e => e.AdresEmailId == emailId);
        return email?.Email ?? "Nie znaleziono";
    }
    
    private string GetServicemenPhoneNumber(int? phoneId)
    {
        var phone = _NumerTelefonu.FirstOrDefault(n => n.NumerTelefonuId == phoneId);
        return phone?.Numer ?? "Nie znaleziono";
    }


    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Zakończony" => Color.Success,
            "W realizacji" => Color.Info,
            "Anulowany" => Color.Error,
            "Oczekujący" => Color.Warning,
            "Nowy" => Color.Primary,
            _ => Color.Default
        };
    }
    
    private string GetUserRole()
    {
        if (_currentUser?.RolaUzytkownika == null)
            return "Brak roli";

        return _currentUser.RolaUzytkownika.Nazwa;
    }

    private void FilterOrders(string searchText)
    {
        _searchText = searchText?.ToLower() ?? string.Empty;
        UpdateCarouselItems();
        StateHasChanged();
    }

    private async Task LoadCurrentUserAsync()
    {
        try
        {
            _currentUser = await ApiService.GetUzytkownik();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas pobierania danych użytkownika.", Severity.Error);
        }
    }

    private async Task LoadZamowienia()
    {
        _isLoading = true;
        try
        {
            var result = await ApiService.ZamowieniaRepo.ZamowieniaGet();
            if (result.Data != null)
            {
                _zamowienia = result.Data;

                if (GetUserRole() == "Klient")
                {
                    _filteredZamowienia = _zamowienia
                        .Where(z => z.Klient.UzytkownikId == _currentUser?.UzytkownikId)
                        .ToList();
                }
                else if (GetUserRole() == "Serwisant")
                {
                    _filteredZamowienia = _zamowienia
                        .Where(z => z.Serwisant?.UzytkownikId == _currentUser?.UzytkownikId || z.Klient.UzytkownikId == _currentUser?.UzytkownikId)
                        .ToList();
                }
                else
                {
                    _filteredZamowienia = _zamowienia;
                }
                
                var serviceResult = await ApiService.TypySerwisuRepo.TypySerwisuGet();
                if (serviceResult.Data != null)
                {
                    _serwisy = serviceResult.Data;
                }
                
                var emailResult = await ApiService.AdresyEmailRepo.AdresyEmailGet();
                if (emailResult.Data != null)
                {
                    _adresyEmail = emailResult.Data;
                }
                
                var phoneResult = await ApiService.NumeryTelefonuRepo.NumeryTelefonuGet();
                if (phoneResult.Data != null)
                {
                    _NumerTelefonu = phoneResult.Data;
                }
            }
            else
            {
                Snackbar.Add("Nie udało się załadować zamówień", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnOrderSelectionChanged(int? orderId)
    {
        _selectedOrderId = orderId;
        await LoadSelectedOrder();
    }

    private async Task LoadSelectedOrder()
    {
        if (_selectedOrderId <= 0)
        {
            _selectedOrder = null;
            StateHasChanged();
            return;
        }

        _isLoading = true;
        StateHasChanged();

        try
        {
            var result = await ApiService.ZamowieniaRepo.ZamowienieGet(_selectedOrderId ?? 0);
            if (result.Data != null)
            {
                _selectedOrder = result.Data;
            }
            else
            {
                Snackbar.Add($"Nie udało się załadować zamówienia #{_selectedOrderId}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Zakończony" => "status-finished",
            "W realizacji" => "status-realization",
            "Anulowany" => "status-canceled",
            "Oczekujący" => "status-waiting",
            "Nowy" => "status-new",
            _ => ""
        };
    }

    private static string FormatDate(DateTime? date)
    {
        return date?.ToString("dd.MM.yyyy") ?? "-";
    }


    private string GetImplementationTime()
    {
        if (_selectedOrder?.ZrealizowanaDataRealizacjiOd == null || _selectedOrder?.ZrealizowanaDataRealizacjiDo == null)
        {
            return "Nie zrealizowano";
        }

        var days = (_selectedOrder.ZrealizowanaDataRealizacjiDo.Value - _selectedOrder.ZrealizowanaDataRealizacjiOd.Value).Days;
        return $"{days} {PluralizeDay(days)}";
    }


    private string GetClientFullName()
    {
        if (_selectedOrder?.Klient?.Uzytkownik == null) return "-";
        return $"{_selectedOrder.Klient.Uzytkownik.Imie} {_selectedOrder.Klient.Uzytkownik.Nazwisko}";
    }

    private string GetTechnicianFullName()
    {
        if (_selectedOrder?.Serwisant?.Uzytkownik == null) return "-";
        return $"{_selectedOrder.Serwisant.Uzytkownik.Imie} {_selectedOrder.Serwisant.Uzytkownik.Nazwisko}";
    }

    private async Task DownloadPdf()
    {
        if (_selectedOrder == null) return;

        _generatingPdf = true;
        StateHasChanged();

        try
        {
            var pdfDocument = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(30);
                    page.PageColor(Colors.White);
                    page.DefaultTextStyle(style => style.FontSize(11));

                    page.Header().Element(header =>
                    {
                        header.BorderBottom(1).BorderColor(Colors.Black).PaddingTop(5)
                            .Row(row =>
                            {
                                row.RelativeItem().Column(column =>
                                {
                                    column.Item().Text("Serwis24 - Raport zlecenia").FontSize(20).Bold();
                                    column.Item().Text($"Numer zlecenia: {_selectedOrder.ZamowienieId}").FontSize(14);
                                });
                            });
                    });

                    page.Content().Element(content =>
                    {
                        content.PaddingVertical(10).Column(column =>
                        {
                            column.Item().Text("Informacje o zleceniu").FontSize(16).Bold();
                            column.Item().PaddingVertical(5).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.ConstantColumn(150);
                                    columns.RelativeColumn();
                                });

                                table.Cell().Text("Rodzaj zlecenia:");
                                table.Cell().Text(GetSerwisName(_selectedOrder.Serwis.SerwisId) ?? "-");

                                table.Cell().Text("Data utworzenia:");
                                table.Cell().Text(_selectedOrder.DataDodania.ToString("dd.MM.yyyy"));

                                table.Cell().Text("Status:");
                                table.Cell().Text(_selectedOrder.Status?.Nazwa ?? "-");

                                table.Cell().Text("Priorytet:");
                                table.Cell().Text(_selectedOrder.Priorytet?.Nazwa ?? "-");

                                table.Cell().Text("Metoda płatności:");
                                table.Cell().Text(_selectedOrder.MetodaPlatnosci?.Nazwa ?? "-");

                                table.Cell().Text("Kwota do zapłaty:");
                                table.Cell().Text($"{_selectedOrder.Koszt100} zł");
                            });
                            
                            if (_selectedOrder.Serwisant != null && _selectedOrder.Serwisant.Uzytkownik != null)
                            {
                                column.Item().PaddingTop(15).Text("Serwisant").FontSize(14).Bold();
                                column.Item().PaddingVertical(5).Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.ConstantColumn(150);
                                        columns.RelativeColumn();
                                    });

                                    table.Cell().Text("Imię i nazwisko:");
                                    table.Cell().Text(GetTechnicianFullName());

                                    table.Cell().Text("Numer telefonu:");
                                    table.Cell().Text(@GetServicemenPhoneNumber(_selectedOrder?.Serwisant.Uzytkownik.NumerTelefonuId));

                                    table.Cell().Text("Adres email:");
                                    table.Cell().Text(@GetServicemenEmail(_selectedOrder.Serwisant.Uzytkownik.AdresEmailId));
                                    
                                });
                            }

                            column.Item().PaddingTop(10).Text("Opis").FontSize(14).Bold();
                            column.Item().Background(Colors.Grey.Lighten5)
                                .Border(1)
                                .BorderColor(Colors.Grey.Lighten2)
                                .Padding(5)
                                .Text(_selectedOrder.Opis);

                            column.Item().PaddingTop(10).Text("Daty realizacji").FontSize(14).Bold();
                            column.Item().PaddingVertical(5).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.ConstantColumn(200);
                                    columns.RelativeColumn();
                                });

                                table.Cell().Text("Planowana data rozpoczęcia:");
                                table.Cell().Text(FormatDate(_selectedOrder.PlanowanaDataRealizacjiOd));

                                table.Cell().Text("Planowana data zakończenia:");
                                table.Cell().Text(FormatDate(_selectedOrder.PlanowanaDataRealizacjiDo));

                                table.Cell().Text("Data rozpoczęcia realizacji:");
                                table.Cell().Text(FormatDate(_selectedOrder.ZrealizowanaDataRealizacjiOd));

                                table.Cell().Text("Data zakończenia realizacji:");
                                table.Cell().Text(FormatDate(_selectedOrder.ZrealizowanaDataRealizacjiDo));

                                table.Cell().Text("Czas realizacji:");
                                table.Cell().Text(GetImplementationTime());
                            });

                            column.Item().PaddingTop(15).Text("Dane klienta").FontSize(14).Bold();
                            column.Item().PaddingVertical(5).Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.ConstantColumn(150);
                                    columns.RelativeColumn();
                                });

                                table.Cell().Text("Klient:");
                                table.Cell().Text(GetClientFullName());

                                table.Cell().Text("Numer telefonu:");
                                table.Cell().Text(_selectedOrder.NumerTelefonu?.Numer ?? "-");

                                table.Cell().Text("Adres email:");
                                table.Cell().Text(_selectedOrder.AdresEmail?.Email ?? "-");
                            });

                            if (_selectedOrder.Adres != null)
                            {
                                column.Item().PaddingTop(10).Text("Adres").FontSize(12).Bold();
                                column.Item().PaddingVertical(5).Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.ConstantColumn(150);
                                        columns.RelativeColumn();
                                    });

                                    table.Cell().Text("Ulica i numer:");
                                    table.Cell().Text($"{_selectedOrder.Adres.Ulica} {_selectedOrder.Adres.NumerDomu}");

                                    table.Cell().Text("Kod pocztowy i miasto:");
                                    table.Cell().Text($"{_selectedOrder.Adres.KodPocztowy}, {_selectedOrder.Adres.Miasto}");

                                    table.Cell().Text("Kraj:");
                                    table.Cell().Text(_selectedOrder.Adres.Kraj);
                                });
                            }

                            if (_selectedOrder.Komentarze != null && _selectedOrder.Komentarze.Any())
                            {
                                column.Item().PaddingTop(15).Text("Komentarze").FontSize(14).Bold();

                                foreach (var komentarz in _selectedOrder.Komentarze)
                                {
                                    column.Item().PaddingTop(5)
                                        .Background(Colors.Grey.Lighten5)
                                        .Border(1)
                                        .BorderColor(Colors.Grey.Lighten2)
                                        .Padding(5)
                                        .Text(komentarz.Tresc);
                                }
                            }
                        });
                    });

                    page.Footer().Element(footer =>
                    {
                        footer.BorderTop(1).BorderColor(Colors.Black).PaddingTop(5)
                            .Row(row =>
                            {
                                row.RelativeItem().Column(column =>
                                {
                                    column.Item().Text("© Serwis IT").FontSize(10);
                                    column.Item().Text("Dokument wygenerowany automatycznie").FontSize(8);
                                });

                                row.RelativeItem().AlignRight().Text(text =>
                                {
                                    text.Span("Strona ").FontSize(10);
                                    text.CurrentPageNumber().FontSize(10);
                                    text.Span(" z ").FontSize(10);
                                    text.TotalPages().FontSize(10);
                                });
                            });
                    });
                });
            });

            byte[] pdfBytes = pdfDocument.GeneratePdf();

            string base64String = Convert.ToBase64String(pdfBytes);

            string fileName = $"zamowienie_{_selectedOrder.ZamowienieId}.pdf";
            await JsRuntime.InvokeVoidAsync("downloadFileFromBase64", fileName, base64String, "application/pdf");

            Snackbar.Add("PDF został wygenerowany pomyślnie", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd przy generowaniu PDF.", Severity.Error);
        }
        finally
        {
            _generatingPdf = false;
            StateHasChanged();
        }
    }

    private static string PluralizeDay(int days)
    {
        if (days == 1) return "dzień";
        return "dni";
    }
}