@page "/contact"
@using ApiService
@using ApiService.Models
@using ApiService.Repositories
@using System.ComponentModel.DataAnnotations
@using serwis_web.Components
@rendermode InteractiveServer
@inject ApiService ApiService
@inject ISnackbar Snackbar

<PageTitle>Kontakt</PageTitle>

<div class="services-container">
    <h2>Kontakt</h2>

    <div class="service-back">
        <div class="team-section">
            <h3>Zespół projektowy</h3>
            <div class="team-members">
                <div class="team-member">
                    <div class="member-photo">
                        <img src="placeholder.png" alt="Kornelia Kołowska" />
                    </div>
                    <h4>Kornelia Kołowska</h4>
                    <p>Mobile Developer</p>
                    <p class="email">245845@edu.p.lodz.pl</p>
                </div>
                <div class="team-member">
                    <div class="member-photo">
                        <img src="placeholder.png" alt="Bartłomiej Mielnicki" />
                    </div>
                    <h4>Bartłomiej Mielnicki</h4>
                    <p>Mobile Developer</p>
                    <p class="email">245876@edu.p.lodz.pl</p>
                </div>
                <div class="team-member">
                    <div class="member-photo">
                        <img src="placeholder.png" alt="Jakub Borkiewicz" />
                    </div>
                    <h4>Jakub Borkiewicz</h4>
                    <p>Mobile Developer</p>
                    <p class="email">245775@edu.p.lodz.pl</p>
                </div>
                <div class="team-member">
                    <div class="member-photo">
                        <img src="placeholder.png" alt="Daniel Karolak" />
                    </div>
                    <h4>Daniel Karolak</h4>
                    <p>Frontend Developer</p>
                    <p class="email">245838@edu.p.lodz.pl</p>
                </div>
                <div class="team-member">
                    <div class="member-photo">
                        <img src="placeholder.png" alt="Oliwier Szafrański" />
                    </div>
                    <h4>Oliwier Szafrański</h4>
                    <p>Fullstack Developer</p>
                    <p class="email">245935@edu.p.lodz.pl</p>
                </div>
            </div>
        </div>

        <EditForm Model="@_contactModel" OnValidSubmit="SendMessage">
            <DataAnnotationsValidator />
            <div class="service-tab">
                <div class="service-col">
                    <h3>Formularz kontaktowy</h3>
                    <h4>Imię</h4>
                    <input type="text" placeholder="Podaj swoje imię" @bind="_contactModel.Name" />
                    <ValidationMessage For="@(() => _contactModel.Name)" class="validation-message" />

                    <h4>Email</h4>
                    <input type="email" placeholder="Podaj swój adres email" @bind="_contactModel.Email" />
                    <ValidationMessage For="@(() => _contactModel.Email)" class="validation-message" />

                    <h4>Temat</h4>
                    <input type="text" placeholder="Temat wiadomości" @bind="_contactModel.Subject" />
                    <ValidationMessage For="@(() => _contactModel.Subject)" class="validation-message" />
                </div>
                <div class="service-col">
                    <h3>&nbsp;</h3>
                    <h4>Treść wiadomości</h4>
                    <textarea class="textarea" placeholder="Opisz swój problem lub pytanie..." @bind="_contactModel.Message"></textarea>
                    <ValidationMessage For="@(() => _contactModel.Message)" class="validation-message" />
                </div>
            </div>

            <button type="submit" disabled="@_isSending">
                @if (_isSending)
                {
                    <span>Wysyłanie...</span>
                }
                else
                {
                    <span>Wyślij wiadomość</span>
                }
            </button>
        </EditForm>

        <div class="map-container">
            <h3>Nasza lokalizacja</h3>
            <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2469.869241033757!2d19.449142677061726!3d51.75371457187036!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x471a34d85d1152f3%3A0xbe75c3beee4bad56!2zUG9saXRlY2huaWthIMWBw7Nkemth!5e0!3m2!1spl!2spl!4v1746280311556!5m2!1spl!2spl"
                    width="100%" height="600px" style="height:600px; border:0; margin-top: 20px; margin-bottom: 20px;"
                    allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
        </div>
    </div>
</div>

<style>
    .validation-message {
        color: #ff5252;
        font-size: 0.75rem;
        margin-top: 4px;
        display: block;
    }

    input.invalid, textarea.invalid {
        border-color: #ff5252;
    }
</style>

<div class="help-button-container">
    <AccessibilityWidget/>
</div>


@code {
    private bool _isSending = false;

    private class ContactModel
    {
        [Required(ErrorMessage = "Imię jest wymagane")]
        [StringLength(100, ErrorMessage = "Imię nie może przekraczać 100 znaków")]
        [MinLength(2, ErrorMessage = "Imię musi zawierać co najmniej 2 znaki")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Podaj prawidłowy adres email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Temat jest wymagany")]
        [StringLength(100, ErrorMessage = "Temat nie może przekraczać 100 znaków")]
        [MinLength(2, ErrorMessage = "Temat musi zawierać co najmniej 2 znaki")]
        public string Subject { get; set; } = string.Empty;

        [Required(ErrorMessage = "Treść wiadomości jest wymagana")]
        [StringLength(1000, ErrorMessage = "Treść wiadomości nie może przekraczać 1000 znaków")]
        [MinLength(10, ErrorMessage = "Treść wiadomości musi zawierać co najmniej 10 znaków")]
        public string Message { get; set; } = string.Empty;
    }

    private ContactModel _contactModel = new();

    private async Task SendMessage()
    {
        try
        {
            _isSending = true;

            var emailRequest = new KontaktEmailRequest
            {
                EmailOdbiorcy = "245935@edu.p.lodz.pl",
                Temat = _contactModel.Subject,
                Tresc = $"Imie: {_contactModel.Name}{Environment.NewLine}Od: {_contactModel.Email}{Environment.NewLine}Treść: {_contactModel.Message}"
            };

            var result = await ApiService.KontaktEmailRepo.KontaktEmailPost(emailRequest);

            if (result.Error == null && result.Data)
            {
                Snackbar.Add("Wiadomość została wysłana! Dziękujemy za kontakt.", Severity.Success);
                ResetForm();
            }
            else
            {
                Snackbar.Add($"Wystąpił błąd podczas wysyłania wiadomości.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił nieoczekiwany błąd.", Severity.Error);
        }
        finally
        {
            _isSending = false;
        }
    }

    private void ResetForm()
    {
        _contactModel = new ContactModel();
    }
}