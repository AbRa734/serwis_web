@page "/users/{UserId:int}"
@inject ApiService ApiService
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using ApiService
@using ApiService.Models
@using ApiService.Repositories
@inject IDialogService DialogService
@using DialogService = MudBlazor.DialogService
@using serwis_web.Components
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Dane Użytkownika</PageTitle>

<style>
	.services-container {
		display: flex;
		flex-direction: column;
		gap: 23px;
		padding: 0;
		margin: 0;
		padding-left: 5px;
		padding-right: 20px;
	}

	.title-changes {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: 0;
		margin: 0;
		padding-right: 40px;
	}

	.title-changes h2 {
		font-size: 30px;
		font-weight: 600;
		margin: 0;
		padding: 0;
	}

	.service-back {
		display: flex;
		flex-direction: column;
		gap: 25px;
		width: 100%;
		padding: 30px;
		background-color: #FFFFFF;
		border-radius: 10px;
		box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
		margin: 0;
	}

	.service-tab {
		display: flex;
		width: 100%;
		gap: 100px;
		padding: 0;
		margin: 0;
	}

	.service-col {
		flex: 1;
		display: flex;
		flex-direction: column;
		gap: 12px;
	}

	.service-col h4 {
		font-size: 16px;
		font-weight: 500;
		padding: 0;
		margin: 0;
		color: #606060;
	}

	.service-row {
		display: flex;
		align-items: center;
		gap: 40px;
		width: 100%;
	}

	.single-col {
		display: flex;
		flex-direction: column;
		gap: 10px;
		width: 100%;
	}

	textarea, .form-input, select, option {
		background-color: #F5F6FA;
		border: solid 1px #D5D5D5;
		width: 100%;
		padding: 15px;
		border-radius: 5px;
		color: #A6A6A6;
		font-size: 14px;
		margin-bottom: 10px;
	}

	.textarea {
		height: 287px;
	}

	.form-input, select {
		height: 50px;
	}

	button {
		background-color: #4880FF;
		border: none;
		border-radius: 10px;
		padding: 15px;
		color: #FFFFFF;
		font-size: 16px;
		transition: all 0.3s ease-in-out;
		cursor: pointer;
	}

	button:hover {
		background-color: #336ff5;
	}

	.btn-changes {
		padding: 12px 50px;
		margin: 0;
		background-color: #4880FF;
		border: none;
		border-radius: 10px;
		color: #FFFFFF;
		font-size: 16px;
		transition: all 0.3s ease-in-out;
		cursor: pointer;
	}

	.reset-password {
		background-color: #ccf0eb;
		color: #00b69b;
		font-weight: 500;
		margin-top: 10px;
	}

	.reset-password:hover {
		background-color: #85d4c8;
	}

	.active_account {
		background-color: #15a80a;
		color: #ffffff;
		border: none;
		font-size: 16px;
		text-align: center;
		cursor: pointer;
	}

	.inactive_account {
		background-color: #f14c3c;
		color: #ffffff;
		border: none;
		font-size: 16px;
		text-align: center;
		cursor: pointer;
	}

	.validation-message {
		color: #F44336;
		font-size: 12px;
		margin-top: -5px;
		margin-bottom: 10px;
	}
	
	.invalid-field {
		border: 1px solid #F44336 !important;
	}

	@@media (max-width: 1366px) {
		.service-tab {
			gap: 80px;
		}

	}


	@@media (max-width: 1280px) {
		.services-container {
			gap: 30px;
			padding-right: 15px;
		}

		.service-row {
			gap: 40px;
		}

		.service-tab {
			flex-direction: column;
			gap: 25px;
		}

		textarea, .form-input, select {
			margin-bottom: 15px;
		}

		.single-col {
			gap: 8px;
		}

	}

	@@media (max-width: 1024px) {
		.title-changes {
			padding-right: 0;
		}

		.btn-changes {
			padding: 12px 35px;
		}

	}

	@@media (max-width: 768px) {
		.services-container {
			padding-right: 5px;
			padding-top: 10px;
		}

		.service-row {
			flex-direction: column;
			gap: 5px;
		}

		.btn-changes {
			padding: 12px 50px;
		}

	}

	@@media (max-width: 640px) {
		.title-changes {
			flex-direction: column;
			gap: 20px;
			align-items: flex-start;
		}

		.btn-changes {
			padding: 12px 35px;
			width: 100%;
		}

	}
</style>

<div class="services-container">

	<div class="title-changes">
		<h2>Dane Użytkownika</h2>
		<a href="/new-user" class="btn-changes">Nowy użytkownik</a>
	</div>

	@if (!string.IsNullOrEmpty(_message))
	{
		<div class="@_messageClass">@_message</div>
	}

	<EditForm Model="@_userDataModel" OnSubmit="SaveUserData" class="service-back">
		<DataAnnotationsValidator/>

		<div class="service-tab">
			<div class="service-col">

				<h4>Imię</h4>
				<InputText @bind-Value="_userDataModel.Imie" placeholder="Imię użytkownika" class="@(_formSubmitted && !string.IsNullOrEmpty(_imieValidationMessage) ? "form-input invalid-field" : "form-input")" />
				@if (_formSubmitted && !string.IsNullOrEmpty(_imieValidationMessage))
				{
					<div class="validation-message">@_imieValidationMessage</div>
				}

				<h4>Nazwisko</h4>
				<InputText @bind-Value="_userDataModel.Nazwisko" placeholder="Nazwisko użytkownika" class="@(_formSubmitted && !string.IsNullOrEmpty(_nazwiskoValidationMessage) ? "form-input invalid-field" : "form-input")"/>
				@if (_formSubmitted && !string.IsNullOrEmpty(_nazwiskoValidationMessage))
				{
					<div class="validation-message">@_nazwiskoValidationMessage</div>
				}

				<div class="service-row">
					<div class="single-col">
						<h4>Numer Telefonu</h4>
						<InputText @bind-Value="_userDataModel.NumerTelefonu" placeholder="Numer telefonu" class="@(_formSubmitted && !string.IsNullOrEmpty(_numerTelefonuValidationMessage) ? "form-input invalid-field" : "form-input")"/>
						@if (_formSubmitted && !string.IsNullOrEmpty(_numerTelefonuValidationMessage))
						{
							<div class="validation-message">@_numerTelefonuValidationMessage</div>
						}

					</div>
					<div class="single-col">
						<h4>Adres Email</h4>
						<InputText @bind-Value="_userDataModel.Email" placeholder="Adres email" class="form-input" readonly/>
					</div>
				</div>

				<h4>Państwo</h4>
				<InputText @bind-Value="_userDataModel.Kraj" placeholder="Państwo" class="@(_formSubmitted && !string.IsNullOrEmpty(_panstwoValidationMessage) ? "form-input invalid-field" : "form-input")"/>
				@if (_formSubmitted && !string.IsNullOrEmpty(_panstwoValidationMessage))
				{
					<div class="validation-message">@_panstwoValidationMessage</div>
				}

				<div class="service-row">
					<div class="single-col">
						<h4>Ulica</h4>
						<InputText @bind-Value="_userDataModel.Ulica" placeholder="Ulica" class="@(_formSubmitted && !string.IsNullOrEmpty(_ulicaValidationMessage) ? "form-input invalid-field" : "form-input")"/>
						@if (_formSubmitted && !string.IsNullOrEmpty(_ulicaValidationMessage))
						{
							<div class="validation-message">@_ulicaValidationMessage</div>
						}
					</div>
					<div class="single-col">
						<h4>Numer Domu</h4>
						<InputText @bind-Value="_userDataModel.NumerDomu" placeholder="Numer domu" class="@(_formSubmitted && !string.IsNullOrEmpty(_numerDomuValidationMessage) ? "form-input invalid-field" : "form-input")"/>
						@if (_formSubmitted && !string.IsNullOrEmpty(_numerDomuValidationMessage))
						{
							<div class="validation-message">@_numerDomuValidationMessage</div>
						}
					</div>
				</div>

				<div class="service-row">
					<div class="single-col">
						<h4>Miasto</h4>
						<InputText @bind-Value="_userDataModel.Miasto" placeholder="Miasto" class="@(_formSubmitted && !string.IsNullOrEmpty(_miastoValidationMessage) ? "form-input invalid-field" : "form-input")"/>
						@if (_formSubmitted && !string.IsNullOrEmpty(_miastoValidationMessage))
						{
							<div class="validation-message">@_miastoValidationMessage</div>
						}
					</div>
					<div class="single-col">
						<h4>Kod pocztowy</h4>
						<InputText @bind-Value="_userDataModel.KodPocztowy" placeholder="Kod pocztowy" class="@(_formSubmitted && !string.IsNullOrEmpty(_miastoValidationMessage) ? "form-input invalid-field" : "form-input")"/>
						@if (_formSubmitted && !string.IsNullOrEmpty(_kodPocztowyValidationMessage))
						{
							<div class="validation-message">@_kodPocztowyValidationMessage</div>
						}
					</div>
				</div>

				<button type="submit">Zapisz zmiany</button>
			</div>

			<div class="service-col">

				<h4>Id Użytkownika</h4>
				<InputNumber @bind-Value="_userDataModel.UzytkownikId" placeholder="Id użytkownika" class="form-input"
				             readonly/>

				<h4>Rola użytkownika</h4>
				<select @bind="_userDataModel.RoleId">
					@foreach (var role in _roles)
					{
						<option value="@role.RolaUzytkownikaId">@role.Nazwa</option>
					}
				</select>

				<h4>Data Utworzenia Konta</h4>
				<InputDate @bind-Value="_userDataModel.DataDodania" placeholder="Data" class="form-input" readonly/>

				<h4>Ostatnia Data Aktualizacji</h4>
				<InputDate @bind-Value="_userDataModel.DataAktualizacji" placeholder="Data" class="form-input"
				           readonly/>

				<h4>Aktywnosc konta</h4>
				<InputSelect @bind-Value="_userDataModel.CzyAktywny" class="@GetActivityAccountClass()">
					<option value="true">Tak</option>
					<option value="false">Nie</option>
				</InputSelect>

				<button class="reset-password">Zresetuj hasło użytkownika</button>

			</div>

		</div>

	</EditForm>

</div>

@* <div class="help-button-container"> *@
@* 	<AccessibilityWidget/> *@
@* </div> *@


@code {
	[Parameter] public int UserId { get; set; }

	private UserDataModel _userDataModel = new();
	private List<DicRolaUzytkownika> _roles = new();
	private Uzytkownik? _currentUser;
	private AdresEmail? _currentEmail;
	private NumerTelefonu? _currentPhone;
	private Adres? _currentAddress;
	private List<Serwisant> _serwisants = new();
	private Serwisant? _serwisant;

	private string? _message;
	private string _messageClass = "success-message";
	private bool _formSubmitted = false;
	private string _imieValidationMessage = string.Empty;
	private string _nazwiskoValidationMessage = string.Empty;
	private string _numerTelefonuValidationMessage = string.Empty;
	private string _panstwoValidationMessage = string.Empty;
	private string _ulicaValidationMessage = string.Empty;
	private string _numerDomuValidationMessage = string.Empty;
	private string _miastoValidationMessage = string.Empty;
	private string _kodPocztowyValidationMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await LoadUserData();
	}

	private async Task LoadUserData()
	{
		var userResult = await ApiService.UzytkownicyRepo.UzytkownikGet(UserId);

		if (userResult.Error != null)
		{
			ShowError("Błąd podczas ładowania danych użytkownika.");
			return;
		}

		_currentUser = userResult.Data;

		if (_currentUser == null)
		{
			ShowError("Nie znaleziono danych użytkownika");
			return;
		}

		if (_currentUser.AdresEmailId > 0)
		{
			var emailResult = await ApiService.AdresyEmailRepo.AdresEmailGet(_currentUser.AdresEmailId);
			_currentEmail = emailResult.Data;
		}

		if (_currentUser.NumerTelefonuId.HasValue && _currentUser.NumerTelefonuId.Value > 0)
		{
			var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuGet(_currentUser.NumerTelefonuId.Value);
			_currentPhone = phoneResult.Data;
		}

		if (_currentUser.Adres != null)
		{
			_currentAddress = _currentUser.Adres;
		}

		_userDataModel.UzytkownikId = _currentUser.UzytkownikId;
		_userDataModel.RoleId = _currentUser.RolaUzytkownika.RolaUzytkownikaId;
		_userDataModel.PreviousRolId = _currentUser.RolaUzytkownika.RolaUzytkownikaId;
		_userDataModel.CzyAktywny = _currentUser.CzyAktywny;
		_userDataModel.AdresEmailId = _currentUser.AdresEmailId;
		_userDataModel.NumerTelefonuId = _currentUser.NumerTelefonuId;
		_userDataModel.AdresId = _currentUser.Adres?.AdresId;

		_userDataModel.Imie = _currentUser.Imie;
		_userDataModel.Nazwisko = _currentUser.Nazwisko;
		_userDataModel.DataDodania = _currentUser.DataDodania;
		_userDataModel.DataAktualizacji = _currentUser.DataAktualizacji;
		_userDataModel.DataAktualizacji = _currentUser.DataAktualizacji;

		_userDataModel.Email = _currentEmail?.Email;
		_userDataModel.NumerTelefonu = _currentPhone?.Numer;

		_userDataModel.Ulica = _currentUser.Adres?.Ulica;
		_userDataModel.NumerDomu = _currentUser.Adres?.NumerDomu.ToString();
		_userDataModel.NumerMieszkania = _currentUser.Adres?.NumerMieszkania ?? 0;
		_userDataModel.KodPocztowy = _currentUser.Adres?.KodPocztowy;
		_userDataModel.Miasto = _currentUser.Adres?.Miasto;
		_userDataModel.Kraj = _currentUser.Adres?.Kraj;

		var rolesResult = await ApiService.RoleUzytkownikaRepo.RoleUzytkownikaGet();
		if (rolesResult.Data != null)
		{
			_roles = rolesResult.Data;
		}

		var servicemenResult = await ApiService.SerwisanciRepo.SerwisanciGet();
		if (servicemenResult.Data != null)
		{
			_serwisants = servicemenResult.Data;
			_serwisant = _serwisants.FirstOrDefault(s => s.UzytkownikId == UserId);
		}
	}

	private async Task SaveUserData()
	{
		_formSubmitted = true;
		
		if (!ValidateForm())
		{
			return;
		}
		
		try
		{
			int adresEmailId = _currentUser.AdresEmailId;

			int? numerTelefonuId = _currentUser?.NumerTelefonuId;

			if (!string.IsNullOrWhiteSpace(_userDataModel.NumerTelefonu))
			{
				var phoneDto = new NumerTelefonuDto { Numer = _userDataModel.NumerTelefonu };

				var phoneResult = numerTelefonuId.HasValue && numerTelefonuId.Value > 0
					? await ApiService.NumeryTelefonuRepo.NumerTelefonuPut(numerTelefonuId.Value, phoneDto)
					: await ApiService.NumeryTelefonuRepo.NumerTelefonuPost(phoneDto);

				if (phoneResult.Error != null)
				{
					ShowError("Błąd podczas zapisywania numeru telefonu.");
					return;
				}

				numerTelefonuId = phoneResult.Data?.NumerTelefonuId;
			}

			int adresId = _currentAddress?.AdresId ?? 0;
			if (!string.IsNullOrWhiteSpace(_userDataModel.Ulica) && !string.IsNullOrWhiteSpace(_userDataModel.Miasto))
			{
				int numerDomuInt = 0;
				if (!string.IsNullOrEmpty(_userDataModel.NumerDomu))
				{
					int.TryParse(_userDataModel.NumerDomu, out numerDomuInt);
				}
				
				var adresDto = new AdresDto
				{
					Ulica = _userDataModel.Ulica,
					NumerDomu = numerDomuInt,
					NumerMieszkania = _userDataModel.NumerMieszkania,
					KodPocztowy = _userDataModel.KodPocztowy,
					Miasto = _userDataModel.Miasto,
					Kraj = _userDataModel.Kraj
				};

				var adresResult = adresId > 0
					? await ApiService.AdresyRepo.AdresPut(adresId, adresDto)
					: await ApiService.AdresyRepo.AdresPost(adresDto);

				if (adresResult.Error != null)
				{
					ShowError("Błąd podczas zapisywania adresu.");
					return;
				}

				adresId = adresResult.Data?.AdresId ?? 0;
			}

			var uzytkownikDto = new UzytkownikDto
			{
				Imie = _userDataModel.Imie,
				Nazwisko = _userDataModel.Nazwisko,
				AdresEmailId = adresEmailId,
				NumerTelefonuId = numerTelefonuId,
				AdresId = adresId,
				RolaUzytkownikaId = _userDataModel.RoleId,
				CzyAktywny = _userDataModel.CzyAktywny,
			};

			var userResult = await ApiService.UzytkownicyRepo.UzytkownikPut(UserId, uzytkownikDto);

			if (userResult.Error != null)
			{
				Snackbar.Add("Błąd podczas zapisywania danych użytkownika.");
				return;
			}

			var userRole = _roles.FirstOrDefault(role => role.RolaUzytkownikaId == _userDataModel.RoleId)?.Nazwa;
			var previousUserRole = _roles.FirstOrDefault(role => role.RolaUzytkownikaId == _userDataModel.PreviousRolId)?.Nazwa;

			if (_serwisant != null)
			{
				if (userRole == "Serwisant" && previousUserRole != "Serwisant")
				{
					var servicemenResult = await ApiService.SerwisanciRepo.SerwisantPut(_serwisant.SerwisantId, new SerwisantDto
					{
						UzytkownikId = UserId,
						SerwisyIds = new List<int>(),
						CzyAktywny = true
					});

					if (servicemenResult.Error != null)
					{
						Snackbar.Add("Błąd podczas tworzenia serwisanta.");
						return;
					}
				}
				else if (userRole != "Serwisant" && previousUserRole == "Serwisant")
				{
					var servicemenResult = await ApiService.SerwisanciRepo.SerwisantPut(_serwisant.SerwisantId, new SerwisantDto
					{
						UzytkownikId = UserId,
						SerwisyIds = new List<int>(),
						CzyAktywny = false
					});

					if (servicemenResult.Error != null)
					{
						Snackbar.Add("Błąd podczas tworzenia serwisanta.");
						return;
					}
				}
			}
			else
			{
				if (userRole == "Serwisant" && previousUserRole != "Serwisant")
				{
					var servicemenResult = await ApiService.SerwisanciRepo.SerwisantPost(new SerwisantDto
					{
						UzytkownikId = UserId,
						SerwisyIds = new List<int>(),
						CzyAktywny = true
					});

					if (servicemenResult.Error != null)
					{
						Snackbar.Add("Błąd podczas tworzenia serwisanta.");
						return;
					}
				}
			}


			Snackbar.Add("Dane zostały zaktualizowane pomyślnie", Severity.Success);

			await LoadUserData();
		}
		catch (Exception ex)
		{
			ShowError("Wystąpił nieoczekiwany błąd.");
		}
	}
	
	private bool IsValidPhoneNumber(string phone)
	{
		return System.Text.RegularExpressions.Regex.IsMatch(phone, @"^\d{9}$");
	}

	private bool IsValidPostalCode(string postalCode)
	{
		return System.Text.RegularExpressions.Regex.IsMatch(postalCode, @"^\d{2}-\d{3}$");
	}

	
	private bool ValidateForm()
	{
		bool isValid = true;
			
		_imieValidationMessage = string.Empty;
		_nazwiskoValidationMessage = string.Empty;
		_numerTelefonuValidationMessage = string.Empty;
		_panstwoValidationMessage = string.Empty;
		_ulicaValidationMessage = string.Empty;
		_numerDomuValidationMessage = string.Empty;
		_miastoValidationMessage = string.Empty;
		_kodPocztowyValidationMessage = string.Empty;
		
		if (string.IsNullOrWhiteSpace(_userDataModel.Imie) || _userDataModel.Imie.Length < 2 || _userDataModel.Imie.Length > 100)
		{
			_imieValidationMessage = "Imię musi mieć od 2 do 100 znaków";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.Nazwisko) || _userDataModel.Nazwisko.Length < 2 || _userDataModel.Nazwisko.Length > 100)
		{
			_nazwiskoValidationMessage = "Nazwisko musi mieć od 2 do 100 znaków";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.NumerTelefonu) || !IsValidPhoneNumber(_userDataModel.NumerTelefonu))
		{
			_numerTelefonuValidationMessage = "Nieprawidłowy format numeru telefonu";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.Kraj) || _userDataModel.Kraj.Length > 64 || _userDataModel.Kraj.Length < 2)
		{
			_panstwoValidationMessage = "Państwo musi mieć od 2 do 64 znaków";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.Ulica) || _userDataModel.Ulica.Length > 100 || _userDataModel.Ulica.Length < 2)
		{
			_ulicaValidationMessage = "Ulica musi mieć od 2 do 100 znaków";
			isValid = false;
		}

		if (string.IsNullOrWhiteSpace(_userDataModel.NumerDomu))
		{
			_numerDomuValidationMessage = "Numer domu nie może być pusty";
			isValid = false;
		}
		
		else if (!int.TryParse(_userDataModel.NumerDomu, out int numerDomu) || numerDomu < 1 || numerDomu > 1000)
		{
			_numerDomuValidationMessage = "Numer domu musi być liczbą z przedziału od 1 do 1000";
			isValid = false;
		}

		if (string.IsNullOrWhiteSpace(_userDataModel.Miasto) || _userDataModel.Miasto.Length > 85 || _userDataModel.Miasto.Length < 2)
		{
			_miastoValidationMessage = "Miasto musi mieć od 2 do 85 znaków";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.KodPocztowy) || !IsValidPostalCode(_userDataModel.KodPocztowy))
		{
			_kodPocztowyValidationMessage = "Kod pocztowy powinien mieć format XX-XXX";
			isValid = false;
		}
        
		return isValid;
	}

	private void ShowSuccess(string message)
	{
		_message = message;
		_messageClass = "success-message";
	}

	private void ShowError(string error)
	{
		_message = error;
		_messageClass = "error-message";
	}

	private string GetActivityAccountClass()
	{
		return _userDataModel.CzyAktywny ? "form-input active_account" : "form-input inactive_account";
	}

	public class UserDataModel
	{
		// [Required(ErrorMessage = "ID użytkownika jest wymagane")]
		public int UzytkownikId { get; set; }

		// [Required(ErrorMessage = "Imię jest wymagane")]
		// [StringLength(50, ErrorMessage = "Imię nie może przekraczać 50 znaków")]
		public string? Imie { get; set; }

		// [Required(ErrorMessage = "Nazwisko jest wymagane")]
		// [StringLength(50, ErrorMessage = "Nazwisko nie może przekraczać 50 znaków")]
		public string? Nazwisko { get; set; }

		// [EmailAddress(ErrorMessage = "Proszę podać poprawny adres email")]
		// [Required(ErrorMessage = "Email jest wymagany")]
		// [StringLength(100, ErrorMessage = "Email nie może przekraczać 100 znaków")]
		public string? Email { get; set; }

		// [RegularExpression(@"^\d{9}$", ErrorMessage = "Numer telefonu powinien składać się z 9 cyfr")]
		// [Required(ErrorMessage = "Numer telefonu jest wymagany")]
		public string? NumerTelefonu { get; set; }

		// [Required(ErrorMessage = "Ulica jest wymagana")]
		// [StringLength(100, ErrorMessage = "Ulica nie może przekraczać 100 znaków")]
		public string? Ulica { get; set; }

		// [Required(ErrorMessage = "Numer domu jest wymagany")]
		public string? NumerDomu { get; set; }

		public int? NumerMieszkania { get; set; }

		// [RegularExpression(@"^\d{2}-\d{3}$", ErrorMessage = "Kod pocztowy powinien mieć format XX-XXX")]
		// [StringLength(6, ErrorMessage = "Kod pocztowy nie może przekraczać 6 znaków")]
		public string? KodPocztowy { get; set; }

		// [StringLength(50, ErrorMessage = "Miasto nie może przekraczać 50 znaków")]
		public string? Miasto { get; set; }

		// [StringLength(50, ErrorMessage = "Kraj nie może przekraczać 50 znaków")]
		public string? Kraj { get; set; }

		public DateTimeOffset? DataAktualizacji { get; set; }

		// [Required(ErrorMessage = "Data dodania jest wymagana")]
		public DateTimeOffset DataDodania { get; set; }

		// [Required(ErrorMessage = "Rola użytkownika jest wymagana")]
		public int RoleId { get; set; }

		public int PreviousRolId { get; set; }

		public bool CzyAktywny { get; set; }
		
		public int AdresEmailId { get; set; }

		public int? NumerTelefonuId { get; set; }

		public int? AdresId { get; set; }
	}

}