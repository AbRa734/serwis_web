@page "/report-zapis"
@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@using Color = MudBlazor.Color
@using Placement = MudBlazor.Placement
@using Size = MudBlazor.Size
@inject ApiService ApiService
@inject ISnackbar Snackbar

<PageTitle>Dostępne Raporty</PageTitle>

<style>
    .order-container {
        margin: 0;
        padding: 0;
        min-width: 100%;
        border: none;
    }

    .order-header {
        margin: 0 0 10px 0;
        padding: 0;
    }

    .order-header-tittle {
        font-size: 30px;
        font-weight: 600
    }

    .order-header-search-button {
        margin: 0 0 25px 0;
        padding: 0 40px 0 0;
        width: 100%;
        justify-content: space-between
    }

    .order-search {
        max-width: 300px;
    }

    .new-button {
        background-color: #4880FF;
        border: none;
        border-radius: 10px;
        padding: 12px 50px;
        color: #FFFFFF;
        font-size: 16px;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
        text-transform: none;
    }

    .new-button:hover {
        background-color: #336ff5;
    }

    .order-grid {
        border-radius: 15px;
        box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
    }

    .order-category {
        font-size: 16px;
        font-weight: 500;
        text-align: center;
        background-color: #FCFDFD !important;
        border-top-left-radius: 15px !important;
        border-top-right-radius: 15px !important;
        border-bottom: solid 2px #efefef !important;
    }

    .order-category-left {
        font-size: 16px;
        font-weight: 500;
        padding: 10px;
        margin: 0;
        text-align: center;
        background-color: #FCFDFD !important;
        border-top-left-radius: 15px !important;
        border-top-right-radius: 15px !important;
        border-bottom: solid 2px #efefef !important;
    }

    .order-category-right {
        font-size: 16px;
        font-weight: 500;
        padding: 14px 10px;
        margin: 0;
        text-align: center;
        background-color: #f1f4f9 !important;
        border: none;
        border-top-right-radius: 15px !important;
        border-bottom-right-radius: 15px !important;
    }

    .order-category-single-item {
        font-size: 16px;
        font-weight: 500;
        text-decoration: none;
    }

    .order-category-single-item-id {
        font-size: 16px;
        font-weight: 500;
        text-decoration: none !important;
        color: #000000 !important;
    }

    .status-finished {
        background-color: #d0f0e4;
        color: #0d8a5f;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    .status-realization {
        background-color: #e6e1ff;
        color: #6952e9;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    .status-canceled {
        background-color: #ffd9d9;
        color: #e75757;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    .status-waiting {
        background-color: #ffe9d1;
        color: #e99c52;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    .status-new {
        background-color: #e6e1ff;
        color: #6952e9;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    .status-default {
        background-color: inherit;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    @@media (max-width: 1024px) {
        .order-search {
            display: none;
        }

        .new-button {
            width: 100%;
            margin-top: 10px;
        }
    }

</style>



<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="order-container">

    <MudCardHeader Class="order-header">
        <MudText Class="order-header-tittle">Dostępne Raporty</MudText>
    </MudCardHeader>

    <MudCardHeader Class="order-header-search-button">
        <MudItem>
            <MudTextField @bind-Value="_searchString"
                          Placeholder="Szukaj raportu"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Immediate="true"
                          DebounceInterval="500"
                          OnDebounceIntervalElapsed="ApplySearch"
                          Class="order-search"></MudTextField>
        </MudItem>
    </MudCardHeader>


    <MudDataGrid T="Zamowienie" Items="@_filteredZamówienia" Hover="true" Loading="@_loading"
                 LoadingProgressColor="Color.Info" Filterable="true"
                 FilterMode="DataGridFilterMode.ColumnFilterMenu"
                 FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
                 FixedHeader="true" Pagination="false" Height="auto"
                 RowsPerPage="7"
                 Bordered="false" Dense="false" Class="order-grid">

        <Columns>
            <PropertyColumn T="Zamowienie" TProperty="int" Property="x => x.ZamowienieId" Title="Numer Zlecenia" HeaderClass="order-category-left">
                <CellTemplate>
                    <MudChip Size="Size.Medium" Class="@GetStatusStyle("")">
                        <MudLink Href="@($"/report/{context.Item.ZamowienieId}")" Class="order-category-single-item-id">@context.Item.ZamowienieId.ToString("D5")</MudLink>
                    </MudChip>
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn T="Zamowienie" TProperty="DateTime" Property="x => x.DataDodania" Title="Data Utworzenia" HeaderClass="order-category">
                <CellTemplate>
                    <MudChip Size="Size.Medium" Class="@GetStatusStyle("")">
                        <MudText Class="order-category-single-item">@context.Item.DataDodania.ToString("dd MMMM yyyy")</MudText>
                    </MudChip>
                </CellTemplate>
            </PropertyColumn>


            <PropertyColumn T="Zamowienie" TProperty="DateTime" Property="x => x.DataDodania" Title="Data Utworzenia" HeaderClass="order-category">
                <CellTemplate>
                    <MudChip Size="Size.Medium" Class="@GetStatusStyle("")">
                        <MudText Class="order-category-single-item">@context.Item.DataDodania.ToString("dd MMMM yyyy")</MudText>
                    </MudChip>
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn T="Zamowienie" TProperty="DateTime?" Property="x => x.ZrealizowanaDataRealizacjiDo" Title="Data Wykonania" HeaderClass="order-category">
                <CellTemplate>
                    <MudChip Size="Size.Medium" Class="@GetStatusStyle("")">
                        <MudText Class="order-category-single-item">@(context.Item.ZrealizowanaDataRealizacjiDo?.ToString("dd MMMM yyyy") ?? "Nie określono")</MudText>
                    </MudChip>
                </CellTemplate>
            </PropertyColumn>

            <PropertyColumn T="Zamowienie" TProperty="string" Property="x => x.Status.Nazwa" Title="Status" HeaderClass="order-category">
                <CellTemplate>
                    <MudChip Size="Size.Medium" Class="@GetStatusStyle(context.Item.Status.Nazwa)">
                        <MudText Class="order-category-single-item">@context.Item.Status.Nazwa</MudText>
                    </MudChip>
                </CellTemplate>
            </PropertyColumn>


            <PropertyColumn T="Zamowienie" TProperty="string" Property="x => x.Status.Nazwa" Title="Status" HeaderClass="order-category">
                <CellTemplate>
                    <MudChip Size="Size.Medium" Class="@GetStatusStyle(context.Item.Status.Nazwa)">
                        <MudText Class="order-category-single-item">@context.Item.Status.Nazwa</MudText>
                    </MudChip>
                </CellTemplate>
            </PropertyColumn>

        </Columns>
        <PagerContent>
            <MudDataGridPager T="Zamowienie" RowsPerPageString="Wierszy na stronę" InfoFormat="{first_item}-{last_item} z {all_items}" />
        </PagerContent>
        <NoRecordsContent>
            <MudText>Nie znaleziono zleceń</MudText>
        </NoRecordsContent>
    </MudDataGrid>
</MudContainer>

@code {
    private string _searchString = "";
    private bool _loading = true;
    private List<Zamowienie> _zamowienia = new();
    private List<Zamowienie> _filteredZamówienia = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        _loading = true;
        try
        {
            var result = await ApiService.ZamowieniaRepo.ZamowieniaGet();
            if (result.Data != null)
            {
                _zamowienia = result.Data;
                _filteredZamówienia = _zamowienia;

                if (_zamowienia.Count == 0)
                {
                    Snackbar.Add("Nie znaleziono żadnych zleceń", Severity.Info);
                }
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania zleceń.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ApplySearch()
    {
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            _filteredZamówienia = _zamowienia;
        }
        else
        {
            string searchLower = _searchString.ToLower();
            _filteredZamówienia = _zamowienia.Where(s =>
                s.ZamowienieId.ToString().Contains(searchLower) ||
                // s.RodzajZlecenia?.ToLower().Contains(searchLower) == true ||
                s.DataDodania.ToString("dd MMMM yyyy").ToLower().Contains(searchLower) ||
                (s.ZrealizowanaDataRealizacjiDo.HasValue && s.ZrealizowanaDataRealizacjiDo.Value.ToString("dd MMMM yyyy").ToLower().Contains(searchLower)) ||
                // (s.Koszt.HasValue && s.Koszt.ToString().Contains(searchLower)) ||
                s.Status.Nazwa.ToLower().Contains(searchLower)
            ).ToList();
        }

        StateHasChanged();
    }

    private string GetStatusStyle(string status)
    {
        return status switch
        {
            "Zakończony" => "status-finished",
            "W realizacji" => "status-realization",
            "Anulowany" => "status-canceled",
            "Oczekujący" => "status-waiting",
            "Nowy" => "status-new",
            _ => "status-default"
        };
    }
}