@page "/orders/{OrderId:int}"
@using serwis_web.Components
@inject ApiService ApiService
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using ApiService
@using ApiService.Models
@using ApiService.Repositories
@using Console = System.Console
@inject IDialogService DialogService
@using DialogService = MudBlazor.DialogService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

<PageTitle>Szczegóły zlecenia</PageTitle>

<style>
    .order-container {
        display: flex;
        flex-direction: column;
        gap: 23px;
        padding: 0;
        margin: 0;
        padding-left: 5px;
        padding-right: 20px;
    }

    .title-changes {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 0;
        margin: 0;
        padding-right: 40px;
    }

    .title-changes h2 {
        font-size: 30px;
        font-weight: 600;
        margin: 0;
        padding: 0;
    }

    .header-buttons {
        display: flex;
        align-items: center;
        gap: 25px;
    }

    .order-back {
        display: flex;
        flex-direction: column;
        gap: 25px;
        width: 100%;
        padding: 30px;
        background-color: #FFFFFF;
        border-radius: 10px;
        box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
        margin: 0;
    }

    .order-tab {
        display: flex;
        width: 100%;
        gap: 100px;
        padding: 0;
        margin: 0;
    }

    .order-col {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .order-col h4 {
        font-size: 16px;
        font-weight: 500;
        padding: 0;
        margin: 0;
        color: #606060;
    }

    .order-row {
        display: flex;
        align-items: center;
        gap: 40px;
        width: 100%;
    }

    .single-col {
        display: flex;
        flex-direction: column;
        gap: 10px;
        width: 100%;
    }

    .form-textarea, .form-input, select, option {
        background-color: #F5F6FA !important;
        border: solid 1px #D5D5D5 !important;
        width: 100%;
        padding: 15px;
        border-radius: 5px;
        color: #A6A6A6 !important;
        font-size: 14px;
    }
    
    select:disabled {
        background-color: #F5F6FA;
        border: solid 1px #D5D5D5;
        color: #A6A6A6;
        cursor: not-allowed;
    }
    
    .form-textarea {
        height: 145px;
        margin-top: 5px;
        margin-bottom: 12px;
    }

    textarea:disabled, .textarea-disabled {
        background-color: #F5F6FA;
        border: solid 1px #D5D5D5;
        color: #A6A6A6;
        cursor: not-allowed;
    }
    
    .form-input, select, option {
        height: 50px;
        margin-bottom: 10px;
    }

    button {
        background-color: #4880FF;
        border: none;
        border-radius: 10px;
        padding: 15px;
        color: #FFFFFF;
        font-size: 16px;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
        margin-top: 25px;
    }

    button:hover {
        background-color: #336ff5;
    }

    .btn-changes, .btn-delete {
        padding: 15px 50px;
        margin: 0;
    }

    .btn-delete {
        background-color: #f14c3c;
    }

    .btn-delete:hover {
        background-color: #d12413;
    }

    .order-rate {
        display: flex;
        align-items: center;
        gap: 20px;
        height: 52px;
    }

    i {
        font-size: 30px;
        cursor: pointer;
    }

    .status-finished {
        background-color: #ccf0eb;
        color: #00b69b;
        border: none;
    }

    .status-realization {
        background-color: #e0d4fc;
        color: #6226ef;
        border: none;
    }

    .status-canceled {
        background-color: #fcd7d4;
        color: #ef3826;
        border: none;
    }

    .status-waiting {
        background-color: #ffeddd;
        color: #ffa756;
        border: none;
    }

    .status-new {
        background-color: #f1d4ff;
        color: #ba29ff;
        border: none;
    }
    
    .validation-message {
        color: #F44336;
        font-size: 12px;
        margin-top: -5px;
        margin-bottom: 10px;
    }

    .invalid-field {
        border: 1px solid #F44336 !important;
    }

    @@media (max-width: 1536px) {
    .order-container {
        gap: 30px;
        padding-right: 15px;
    }

    .order-row {
        gap: 40px;
    }

    .order-back {
        padding: 30px;
    }

    .order-tab {
        flex-direction: column;
        gap: 10px;
    }

    .form-textarea, .form-input, select {
        margin-bottom: 25px;
    }

    .order-rate {
        height: 60px;
    }

    button {
        padding: 15px;
        margin-top: 10px;
    }

    i {
        font-size: 34px;
    }

    .form-textarea {
        height: 220px;
        margin-top: 5px;
    }
    }

    @@media (max-width: 1280px) {
        .title-changes {
            flex-direction: column;
            gap: 20px;
            align-items: flex-start;
            padding-right: 0;
        }

        .header-buttons 
        {
            flex-direction: column;
            gap: 20px;
            align-items: flex-start;
            width: 100%;
        }

        .btn-changes, .btn-delete 
        {
            padding: 12px 50px;
            width: 100%;
        }
    }


    @@media (max-width: 1024px) {
        .order-row {
            flex-direction: column;
            gap: 5px;
        }
    }


    @@media (max-width: 768px) {
        .order-container {
            padding-right: 5px;
            padding-top: 10px;
        }
    }

    @@media (max-width: 640px) {
        .order-rate {
            gap: 14px;
        }
    }

    .comments-section {
        max-height: 295px;
        overflow-y: auto;
        border-radius: 8px;
        background-color: #f9f9f9;
        padding: 10px;
        margin-bottom: 5px;
    }

    .comment {
        background-color: white;
        border-radius: 8px;
        padding: 12px;
        margin-bottom: 10px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    .comment p {
        margin: 0 0 7px 0;
        padding: 0;
    }
    .comment-edit
    {
        display: flex;
        width: 100%;
        justify-content: space-between;
    }
    .comment-edit-icons
    {
        margin-right: 20px;
        display: flex;
        align-items: center;
        gap: 18px;
    }
    .comment-edit-icons i {
        font-size: 18px;
    }
    
    .comment-role-user
    {
        display: flex;
        align-items: center;
        gap: 5px;
    }
    .comment-user, .comment-text {
        font-weight: 500;
    }

    .comment-meta {
        display: flex;
        justify-content: space-between;
        font-size: 12px;
        color: #777;
    }

    .services-list {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .service-item {
        background-color: #f0f7ff;
        border-radius: 8px;
        padding: 12px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

    .service-name {
        font-weight: bold;
        font-size: 16px;
        margin: 0 0 5px 0;
    }

    .service-desc {
        color: #555;
        font-size: 14px;
        margin: 0 0 5px 0;
    }

    .service-type {
        color: #777;
        font-size: 13px;
        margin: 0;
    }
</style>

<div class="order-container">
    <div class="title-changes">
        <h2>Szczegóły zlecenia</h2>
        <div class="header-buttons">
            <button @onclick="OpenHistoryDialog" class="btn-changes">Historia zmian</button>
            @if (GetUserRole() == "Administrator")
            {
                <button @onclick="DeleteOrder" class="btn-delete">Usuń zlecenie</button>
            }
        </div>
    </div>


    <EditForm Model="@_orderDataModel" OnValidSubmit="SaveOrderData" class="order-back">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    @if (_isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Style="align-items: center; justify-content: center; display: flex; margin: 0 auto;"/>
    }
    else
    {
        <div class="order-tab">
        <div class="order-col">

            <div class="order-row">
                <div class="single-col">
                    <h4>Numer zlecenia</h4>
                    <InputNumber @bind-Value="_orderDataModel.ZamowienieId" placeholder="Id zamówienia" class="form-input" readonly />
                </div>
                <div class="single-col">
                    <h4>Rodzaj zlecenia</h4>
                    <select @bind="_orderDataModel.SerwisId" disabled="@(GetUserRole() == "Klient")">
                        @foreach (var serwis in _serwisy)
                        {
                            <option value="@serwis.TypSerwisuId">@serwis.Nazwa</option>
                        }
                    </select>
                </div>
            </div>

            <div class="order-row">
                <div class="single-col">
                    <h4>Data utworzenia zlecenia</h4>
                    <InputDate @bind-Value="_orderDataModel.DataDodania" placeholder="Data utworzenia zlecenia" class="form-input" readonly />
                </div>
                <div class="single-col">
                    <h4>Data aktualizacji</h4>
                    <InputDate @bind-Value="_orderDataModel.DataAktualizacji" placeholder="Data aktualizacji" class="form-input" readonly />
                </div>
            </div>

            <h4>Opis zlecenia</h4>
            <Textarea @bind-Value="_orderDataModel.Opis" placeholder="Opis zlecenia" class="@(_formSubmitted && !string.IsNullOrEmpty(_opisValidationMessage) ? "form-textarea invalid-field" : "form-textarea")" IsDisabled="@(GetUserRole() != "Administrator")" ></Textarea>
            @if (_formSubmitted && !string.IsNullOrEmpty(_opisValidationMessage))
            {
                <div class="validation-message">@_opisValidationMessage</div>
            }

            <div class="order-row">
                <div class="single-col">
                    <h4>Imie klienta</h4>
                    <InputText @bind-Value="_orderDataModel.ImieKlienta" placeholder="Imie" class="@(_formSubmitted && !string.IsNullOrEmpty(_imieKlientaValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() != "Administrator")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_imieKlientaValidationMessage))
                    {
                        <div class="validation-message">@_imieKlientaValidationMessage</div>
                    }
                </div>
                
                <div class="single-col">
                    <h4>Nazwisko klienta</h4>
                    <InputText @bind-Value="_orderDataModel.NazwiskoKlienta" placeholder="Nazwisko" class="@(_formSubmitted && !string.IsNullOrEmpty(_nazwiskoKlientaValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() != "Administrator")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_nazwiskoKlientaValidationMessage))
                    {
                        <div class="validation-message">@_nazwiskoKlientaValidationMessage</div>
                    }
                </div>
            </div>

            <div class="order-row">
                <div class="single-col">
                    <h4>Numer telefonu klienta</h4>
                    <InputText @bind-Value="_orderDataModel.NumerTelefonuKlienta" placeholder="NumerTelefonu" class="@(_formSubmitted && !string.IsNullOrEmpty(_numerTelefonuKlientaValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() != "Administrator")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_numerTelefonuKlientaValidationMessage))
                    {
                        <div class="validation-message">@_numerTelefonuKlientaValidationMessage</div>
                    }
                </div>
                
                <div class="single-col">
                    <h4>Adres email klienta</h4>
                    <InputText @bind-Value="_orderDataModel.EmailKlienta" placeholder="Email" class="@(_formSubmitted && !string.IsNullOrEmpty(_emailKlientaValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() != "Administrator")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_emailKlientaValidationMessage))
                    {
                        <div class="validation-message">@_emailKlientaValidationMessage</div>
                    }
                </div>
            </div>

            <h4>Państwo</h4>
            <InputText @bind-Value="_orderDataModel.Kraj" placeholder="Państwo" class="@(_formSubmitted && !string.IsNullOrEmpty(_panstwoValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() != "Administrator")"/>
            @if (_formSubmitted && !string.IsNullOrEmpty(_panstwoValidationMessage))
            {
                <div class="validation-message">@_panstwoValidationMessage</div>
            }

            <div class="order-row">
                <div class="single-col">
                    <h4>Ulica</h4>
                    <InputText @bind-Value="_orderDataModel.Ulica" placeholder="Ulica" class="@(_formSubmitted && !string.IsNullOrEmpty(_ulicaValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() != "Administrator")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_ulicaValidationMessage))
                    {
                        <div class="validation-message">@_ulicaValidationMessage</div>
                    }
                </div>
                
                <div class="single-col">
                    <h4>Numer domu</h4>
                    <InputNumber @bind-Value="_orderDataModel.NumerDomu" placeholder="Numer domu" class="@(_formSubmitted && !string.IsNullOrEmpty(_numerDomuValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() != "Administrator")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_numerDomuValidationMessage))
                    {
                        <div class="validation-message">@_numerDomuValidationMessage</div>
                    }
                </div>
            </div>

            <div class="order-row">
                <div class="single-col">
                    <h4>Miasto</h4>
                    <InputText @bind-Value="_orderDataModel.Miasto" placeholder="Miasto" class="@(_formSubmitted && !string.IsNullOrEmpty(_miastoValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() != "Administrator")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_miastoValidationMessage))
                    {
                        <div class="validation-message">@_miastoValidationMessage</div>
                    }
                </div>
                
                <div class="single-col">
                    <h4>Kod pocztowy</h4>
                    <InputText @bind-Value="_orderDataModel.KodPocztowy" placeholder="Kod pocztowy" class="@(_formSubmitted && !string.IsNullOrEmpty(_kodPocztowyValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() != "Administrator")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_kodPocztowyValidationMessage))
                    {
                        <div class="validation-message">@_kodPocztowyValidationMessage</div>
                    }
                </div>
            </div>
        </div>

        <div class="order-col">

            <div class="order-row">
                <div class="single-col">
                    <h4>Planowana Data Realizacji Od</h4>
                    <InputDate @bind-Value="_orderDataModel.PlanowanaDataRealizacjiOd" placeholder="Data" class="form-input" readonly />
                </div>
                <div class="single-col">
                    <h4>Planowana Data Realizacji Do</h4>
                    <InputDate @bind-Value="_orderDataModel.PlanowanaDataRealizacjiDo" placeholder="Data" class="form-input" readonly />
                </div>
            </div>

            <div class="order-row">
                <div class="single-col">
                    <h4>Data Rozpoczęcia Realizacji</h4>
                    <InputDate @bind-Value="_orderDataModel.ZrealizowanaDataRealizacjiOd" style="font-weight: bold" min="@DateTime.Today.ToString("yyyy-MM-dd")" placeholder="" class="@(_formSubmitted &&!string.IsNullOrEmpty(_zrealizowanoDataRealizacjiValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() == "Klient")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_zrealizowanoDataRealizacjiValidationMessage))
                    {
                        <div class="validation-message">@_zrealizowanoDataRealizacjiValidationMessage</div>
                    }
                </div>
                
                <div class="single-col">
                    <h4>Data Zakończenia Realizacji</h4>
                    <InputDate @bind-Value="_orderDataModel.ZrealizowanaDataRealizacjiDo" style="font-weight: bold"  min="@DateTime.Today.ToString("yyyy-MM-dd")" placeholder="" class="@(_formSubmitted && !string.IsNullOrEmpty(_zrealizowanoDataZakonczeniaValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() == "Klient")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_zrealizowanoDataZakonczeniaValidationMessage))
                    {
                        <div class="validation-message">@_zrealizowanoDataZakonczeniaValidationMessage</div>
                    }
                </div>
            </div>

            <h4>Serwisant</h4>
            <select value="@_orderDataModel.SerwisantId" @onchange="HandleSerwisantChange" disabled="@(GetUserRole() != "Administrator")">
                @foreach (var serwisant in _serwisanci)
                {
                    <option value="@serwisant.SerwisantId">@serwisant.Uzytkownik.Imie @serwisant.Uzytkownik.Nazwisko</option>
                }
            </select>


            <div class="order-row"> 
                <div class="single-col"> 
                    <h4>Adres Email Serwisanta</h4>
                    <InputText @bind-Value="_orderDataModel.EmailSerwisanta" placeholder="Email" class="@(_formSubmitted && !string.IsNullOrEmpty(_emailSerwisantaValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() == "Klient")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_emailSerwisantaValidationMessage))
                    {
                        <div class="validation-message">@_emailSerwisantaValidationMessage</div>
                    }
                </div> 
                
                <div class="single-col">
                    <h4>Numer Telefonu Serwisanta</h4>
                    <InputText @bind-Value="_orderDataModel.NumerTelefonuSerwisanta" placeholder="Numer telefonu" class="@(_formSubmitted && !string.IsNullOrEmpty(_numerTelefonuSerwisantaValidationMessage) ? "form-input invalid-field" : "form-input")" disabled="@(GetUserRole() == "Klient")"/>
                    @if (_formSubmitted && !string.IsNullOrEmpty(_numerTelefonuSerwisantaValidationMessage))
                    {
                        <div class="validation-message">@_numerTelefonuSerwisantaValidationMessage</div>
                    }
                </div>
            </div>

            <h4>Priorytet</h4>
            <select @bind="_orderDataModel.PriorytetId" disabled="@(GetUserRole() != "Administrator")">
                @foreach (var priorytet in _priorytety)
                {
                    <option value="@priorytet.PriorytetId">@priorytet.Nazwa</option>
                }
            </select>

            <h4>Metoda Płatności</h4>
            <select @bind="_orderDataModel.MetodaPlatnosciId" disabled="@(GetUserRole() != "Administrator")">
                @foreach (var platnosc in _platnosci)
                {
                    <option value="@platnosc.MetodaPlatnosciId">@platnosc.Nazwa</option>
                }
            </select>

            <h4>Status zlecenia</h4>
            <select @bind="_orderDataModel.StatusId" class="@GetStatusClass(GetSelectedStatusName())" disabled="@(GetUserRole() == "Klient")">
                @foreach (var status in _statusy)
                {
                    <option value="@status.StatusId">@status.Nazwa</option>
                }
            </select>

            <h4>Kwota do zapłaty</h4>
            <InputNumber @bind-Value="_orderDataModel.Koszt100" placeholder="Koszt (zł)" class="form-input" disabled="@(GetUserRole() == "Klient")"/>
            @{
                var metodaPlatnosciNazwa = _platnosci.FirstOrDefault(p => p.MetodaPlatnosciId == _orderDataModel.MetodaPlatnosciId)?.Nazwa?.ToLower() ?? "";
                var metodaPlatnosciTyp = "stripe"; 

                metodaPlatnosciTyp = metodaPlatnosciNazwa switch {
                    var m when m.Contains("karta") => "karta",
                    var m when m.Contains("blik") => "blik",
                    var m when m.Contains("p24") || m.Contains("przelewy24") => "przelewy24",
                    var m when m.Contains("przelew") => "przelew",
                    _ => "stripe"
                };
            }

            <StripePay Amount="@(_orderDataModel.Koszt100)" MetodaPlatnosci="@metodaPlatnosciTyp" />
            
            
            @if (_komentarze?.Any() == true)
            {
                <h4>Komentarze</h4>
                <div class="comments-section">
                    @foreach (var comment in _komentarze)
                    {
                        <div class="comment">
                            <div class="comment-content">
                                <div class="comment-edit">
                                    <p><strong>Data: </strong>@FormatDate(comment.DataDodania)</p>
                                    @if (GetUserRole() == "Administrator")
                                    {
                                        <div class="comment-edit-icons">
                                            <i class="fa-solid fa-pen-to-square" style="color: #4880ff; cursor: pointer;" @onclick="() => EditComment(comment.KomentarzId, comment.Tresc)" ></i>
                                            <i class="fa-solid fa-trash" style="color: #ff0000; cursor: pointer;" @onclick="() => DeleteComment(comment.KomentarzId)"></i>
                                        </div>
                                    }
                                </div>
                                <p><strong>Rola użytkownika: </strong>@GetCommentUserRole(comment.UzytkownikId)</p>
                                <p><strong>Imie i Nazwisko: </strong>@GetUserComment(comment.UzytkownikId)</p>
                                <p><strong>Komentarz: </strong>@comment.Tresc</p>
                            </div>
                        </div>
                    }
                </div>
            }

            @if (GetUserRole() == "Serwisant" || GetUserRole() == "Administrator")
            {
                <button type="submit">Zapisz zmiany</button>
            }
            <button type="button" @onclick="OpenCommentDialog">Dodaj komentarz</button>
        </div>

    </div>
    }


    </EditForm>
    
    
</div>


@code {
    [Parameter] public int OrderId { get; set; }

    private OrderDataModel _orderDataModel = new();
    private Zamowienie? _order;
    private List<DicTypSerwisu> _serwisy = new();
    private List<Serwisant> _serwisanci = new();
    private bool _isLoading = true;
    private List<Log> orderLogs = new List<Log>();
    public Uzytkownik? _uzytkownikKlient;
    public Uzytkownik? _uzytkownikZalogowany;
    private List<DicPriorytet> _priorytety = new();
    private List<DicMetodaPlatnosci> _platnosci = new();
    private List<DicStatus> _statusy = new();
    private ICollection<Komentarz> _komentarze;
    private List<Uzytkownik> _uzytkownicy = new();

    public NumerTelefonu? _currentPhoneKlient;
    public AdresEmail? _currentEmailKlient;

    public NumerTelefonu? _currentPhoneSerwisant;
    public AdresEmail? _currentEmailSerwisantt;
    
    private bool _formSubmitted = false;
    
    private string _opisValidationMessage = string.Empty;
    private string _numerTelefonuKlientaValidationMessage = string.Empty;
    private string _emailKlientaValidationMessage = string.Empty;
    private string _panstwoValidationMessage = string.Empty;
    private string _ulicaValidationMessage = string.Empty;
    private string _numerDomuValidationMessage = string.Empty;
    private string _miastoValidationMessage = string.Empty;
    private string _kodPocztowyValidationMessage = string.Empty;
    private string _imieKlientaValidationMessage = string.Empty;
    private string _nazwiskoKlientaValidationMessage = string.Empty;
    private string _zrealizowanoDataRealizacjiValidationMessage = string.Empty;
    private string _zrealizowanoDataZakonczeniaValidationMessage = string.Empty;
    private string _numerTelefonuSerwisantaValidationMessage = string.Empty;
    private string _emailSerwisantaValidationMessage = string.Empty;
    
    private string? _message;
    private string _messageClass = "success-message";

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {
            await LoadUserData();
            await LoadOrderData();
            await LoadOrderLogs();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            _isLoading = false;
        }
        
    }

    private async Task LoadUserData()
    {
        try
        {
            _uzytkownikZalogowany = await ApiService.GetUzytkownik();
        }
        catch (Exception ex)
        {
            ShowError("Błąd podczas ładowania danych użytkownika.");
            return;
        }
    }

    private async Task LoadOrderData()
    {
        try
        {
            var orderResult = await ApiService.ZamowieniaRepo.ZamowienieGet(OrderId);

            if (orderResult.Error != null)
            {
                ShowError("Błąd podczas ładowania danych zlecenia.");
                return;
            }

            _order = orderResult.Data;

            if (_order == null)
            {
                ShowError("Nie znaleziono zlecenia");
                return;
            }

            if (_order.AdresEmailId > 0)
            {
                var emailResult = await ApiService.AdresyEmailRepo.AdresEmailGet(_order.AdresEmail.AdresEmailId);
                _currentEmailKlient = emailResult.Data;
            }

            if (_order.NumerTelefonuId.HasValue && _order.NumerTelefonuId.Value > 0)
            {
                var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuGet(_order.NumerTelefonuId.Value);
                _currentPhoneKlient = phoneResult.Data;
            }

            if (_order.Serwisant.Uzytkownik.AdresEmailId > 0)
            {
                var emailResult = await ApiService.AdresyEmailRepo.AdresEmailGet(_order.Serwisant.Uzytkownik.AdresEmailId);
                _currentEmailSerwisantt = emailResult.Data;
            }

            if (_order.Serwisant.Uzytkownik.NumerTelefonuId.HasValue && _order.Serwisant.Uzytkownik.NumerTelefonuId.Value > 0)
            {
                var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuGet(_order.Serwisant.Uzytkownik.NumerTelefonuId.Value);
                _currentPhoneSerwisant = phoneResult.Data;
            }
            
            if (_order?.Klient?.Uzytkownik?.UzytkownikId > 0)
            {
                var userResult = await ApiService.UzytkownicyRepo.UzytkownikGet(_order.Klient.Uzytkownik.UzytkownikId);
                _uzytkownikKlient = userResult.Data;
            }
            
            _orderDataModel.ZamowienieId = _order.ZamowienieId;
            _orderDataModel.SerwisantId = _order.SerwisantId;
            
            if (_orderDataModel.SerwisantId.HasValue)
            {
                await UpdateSerwisantContactInfo(_orderDataModel.SerwisantId.Value);
            }
            
            _orderDataModel.Opis = _order.Opis;

            _orderDataModel.KlientId = _order.KlientId;
            _orderDataModel.AdresEmailId = _order.AdresEmailId;
            _orderDataModel.NumerTelefonuId = _order.NumerTelefonuId;
            _orderDataModel.AdresId = _order.AdresId;
            _orderDataModel.SerwisId = _order.Serwis.SerwisId;
            _orderDataModel.PriorytetId = _order.PriorytetId;
            _orderDataModel.MetodaPlatnosciId = _order.MetodaPlatnosciId;
            _orderDataModel.Koszt100 = _order.Koszt100;
            _orderDataModel.StatusId = _order.StatusId;
            _orderDataModel.PreviousStatusId = _order.StatusId;
            
            _orderDataModel.DataDodania = _order.DataDodania;
            _orderDataModel.DataAktualizacji = _order.DataAktualizacji;
            _orderDataModel.PlanowanaDataRealizacjiOd = _order.PlanowanaDataRealizacjiOd;
            _orderDataModel.PlanowanaDataRealizacjiDo = _order.PlanowanaDataRealizacjiDo;
            _orderDataModel.ZrealizowanaDataRealizacjiOd = _order.ZrealizowanaDataRealizacjiOd;
            _orderDataModel.ZrealizowanaDataRealizacjiDo = _order.ZrealizowanaDataRealizacjiDo;


            _orderDataModel.EmailKlienta = _currentEmailKlient?.Email;
            _orderDataModel.NumerTelefonuKlienta = _currentPhoneKlient?.Numer;

            _orderDataModel.EmailSerwisanta = _currentEmailSerwisantt?.Email;
            _orderDataModel.NumerTelefonuSerwisanta = _currentPhoneSerwisant?.Numer;


            _orderDataModel.Ulica = _order.Adres?.Ulica;
            _orderDataModel.NumerDomu = _order.Adres?.NumerDomu ?? 0;
            _orderDataModel.NumerMieszkania = _order.Adres?.NumerMieszkania ?? 0;
            _orderDataModel.KodPocztowy = _order.Adres?.KodPocztowy;
            _orderDataModel.Miasto = _order.Adres?.Miasto;
            _orderDataModel.Kraj = _order.Adres?.Kraj;

            _orderDataModel.ImieKlienta = _order.Klient.Uzytkownik.Imie;
            _orderDataModel.NazwiskoKlienta = _order.Klient.Uzytkownik.Nazwisko;


            var serviceResult = await ApiService.TypySerwisuRepo.TypySerwisuGet();
            if (serviceResult.Data != null)
            {
                _serwisy = serviceResult.Data;
            }

            var serwisantResult = await ApiService.SerwisanciRepo.SerwisanciGet();
            if (serwisantResult.Data != null)
            {
                _serwisanci = serwisantResult.Data.Where(s => s.CzyAktywny).ToList();
            }

            var priorytetsResult = await ApiService.PriotytetyRepo.PriotytetyGet();
            if (priorytetsResult.Data != null)
            {
                _priorytety = priorytetsResult.Data;
            }

            var paymentsResult = await ApiService.MetodyPlatnosciRepo.MetodyPlatnosciGet();
            if (paymentsResult.Data != null)
            {
                _platnosci = paymentsResult.Data;
            }

            var statusResult = await ApiService.StatusyRepo.StatusyGet();
            if (statusResult.Data != null)
            {
                _statusy = statusResult.Data;
            }

            _komentarze = _order.Komentarze;
            _orderDataModel.KomentarzeIds = _komentarze
                .Select(k => k.KomentarzId)
                .ToList();
            
            _orderDataModel.Status = _order.Status;
            
            var usersResult = await ApiService.UzytkownicyRepo.UzytkownicyGet();
            if (usersResult.Data != null)
            {
                _uzytkownicy = usersResult.Data;
            }
            
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
        }
    }
    
    private async Task HandleSerwisantChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int serwisantId))
        {
            _orderDataModel.SerwisantId = serwisantId;
        
            await UpdateSerwisantContactInfo(serwisantId);
        }
    }

    private async Task UpdateSerwisantContactInfo(int serwisantId)
    {
        try
        {
            var selectedSerwisant = _serwisanci.FirstOrDefault(s => s.SerwisantId == serwisantId);
        
            if (selectedSerwisant != null)
            {
                var userResult = await ApiService.UzytkownicyRepo.UzytkownikGet(selectedSerwisant.Uzytkownik.UzytkownikId);
            
                if (userResult.Data != null)
                {
                    var user = userResult.Data;
                
                    if (user.AdresEmailId > 0)
                    {
                        var emailResult = await ApiService.AdresyEmailRepo.AdresEmailGet(user.AdresEmailId);
                        if (emailResult.Data != null)
                        {
                            _orderDataModel.EmailSerwisanta = emailResult.Data.Email;
                        }
                    }
                
                    if (user.NumerTelefonuId.HasValue && user.NumerTelefonuId.Value > 0)
                    {
                        var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuGet(user.NumerTelefonuId.Value);
                        if (phoneResult.Data != null)
                        {
                            _orderDataModel.NumerTelefonuSerwisanta = phoneResult.Data.Numer;
                        }
                    }
                
                    StateHasChanged(); 
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas pobierania danych serwisanta.", Severity.Error);
        }
    }

    private async Task LoadOrderLogs()
    {
        try
        {
            var logsResult = await ApiService.LogiRepo.LogiGet();

            if (logsResult.Data != null)
            {
                orderLogs = logsResult.Data
                    .Where(log => log.ZamowienieId == OrderId)
                    .ToList();
            }
            else
            {
                Snackbar.Add($"Błąd pobierania historii.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas pobierania historii.", Severity.Warning);
        }
    }
    private async Task OpenHistoryDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };

        var convertedChanges = orderLogs.Select(log => new HistoryDialog.DefaultChangeHistory
        {
            Date = log.DataDodania,
            UserRole = GetUserRole(),
            UserName = $"{_uzytkownikZalogowany?.Imie} {_uzytkownikZalogowany?.Nazwisko}",
            Status = log.Status?.Nazwa ?? "Aktualizacja",
            Note = log.Komentarz ?? "Zmieniono status zlecenia"
        }).ToList<HistoryDialog.IChangeHistory>();

        if (!convertedChanges.Any())
        {
            convertedChanges.Add(new HistoryDialog.DefaultChangeHistory
            {
                Date = _orderDataModel.DataDodania,
                UserRole = "Uzytownik",
                UserName = "Uzytownik",
                Status = _orderDataModel.Status?.Nazwa ?? "Nowe",
                Note = "Utworzono zlecenie"
            });
        }

        var dialog = await DialogService.ShowAsync<HistoryDialog>("Historia zmian", new DialogParameters
            {
                ["OrderChanges"] = convertedChanges,
                ["IsAdmin"] = true,
            }, options);
        var result = await dialog.Result;
    }
    
    private async Task OpenCommentDialog()
    {
        var parameters = new DialogParameters
        {
            ["TitleText"] = "Dodaj komentarz do zlecenia",
            ["SelectedOrderId"] = OrderId,
            ["User"] = _uzytkownikZalogowany,
            ["IsNewComment"] = true,
            ["CommentId"] = 0,
            ["Comment"] = ""
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            Position = DialogPosition.Center
        };

        var dialog = await DialogService.ShowAsync<AddEditCommentDialog>("", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var commentResult = (AddEditCommentDialog.CommentDialogResult)result.Data;
            
            try
            {
                _orderDataModel.KomentarzeIds.Add(commentResult.CommentId);
                
                var zamowienieDto = new ZamowienieDto
                {
                    SerwisantId = _orderDataModel.SerwisantId,
                    KlientId = _orderDataModel.KlientId,
                    SerwisId = _orderDataModel.SerwisId,
                    StatusId = _orderDataModel.StatusId,
                    PriorytetId = _orderDataModel.PriorytetId,
                    MetodaPlatnosciId = _orderDataModel.MetodaPlatnosciId,
                    KomentarzeIds = _orderDataModel.KomentarzeIds,
                    NumerTelefonuId = _orderDataModel.NumerTelefonuId,
                    AdresEmailId = _orderDataModel.AdresEmailId,
                    Koszt100 = _orderDataModel.Koszt100,
                    Opis = _orderDataModel.Opis,
                    AdresId = _orderDataModel.AdresId,
                    PlanowanaDataRealizacjiOd = _orderDataModel.PlanowanaDataRealizacjiOd,
                    PlanowanaDataRealizacjiDo = _orderDataModel.PlanowanaDataRealizacjiDo,
                    ZrealizowanaDataRealizacjiOd = _orderDataModel.ZrealizowanaDataRealizacjiOd,
                    ZrealizowanaDataRealizacjiDo = _orderDataModel.ZrealizowanaDataRealizacjiDo
                };

                var resultOrder = await ApiService.ZamowieniaRepo.ZamowieniePut(OrderId, zamowienieDto);
                if (resultOrder.Data != null)
                {
                    Snackbar.Add("Komentarz został dodany pomyślnie", Severity.Success);
                    await LoadOrderData();
                }
                else
                {
                    Snackbar.Add($"Błąd podczas dodawania komentarza.", Severity.Error);
                }
                
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Błąd podczas dodawania komentarza.", Severity.Error);
            }
        }
    }
    
    private async Task EditComment(int commentId, string Comment)
    {
        var parameters = new DialogParameters
        {
            ["TitleText"] = "Edytuj komentarz do zlecenia",
            ["SelectedOrderId"] = OrderId,
            ["User"] = _uzytkownikZalogowany,
            ["IsNewComment"] = false,
            ["CommentId"] = commentId,
            ["Comment"] = Comment
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            Position = DialogPosition.Center
        };

        var dialog = await DialogService.ShowAsync<AddEditCommentDialog>("", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Snackbar.Add("Komentarz został edytowany pomyślnie", Severity.Success);
            await LoadOrderData();
        }
    }

    private async Task DeleteComment(int commentId)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Czy na pewno chcesz usunąć ten komentarz?"
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Potwierdź usunięcie", parameters, options);
        var dialogResult = await dialog.Result;
        

        if (dialogResult != null && !dialogResult.Canceled)
        {
            var result = await ApiService.KomentarzeRepo.KomentarzDelete(commentId);
            if (result.Data)
            {
                await LoadOrderData();
                Snackbar.Add("Komentarz został usunięty", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Błąd podczas usuwania komentarza", Severity.Error);
            }
        }
    }

    private async Task DeleteOrder()
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Czy na pewno chcesz usunąć to zlecenie?"
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Potwierdź usunięcie", parameters, options);
        var dialogResult = await dialog.Result;
        

        if (dialogResult != null && !dialogResult.Canceled)
        {
            var result = await ApiService.ZamowieniaRepo.ZamowienieDelete(OrderId);

            if (result.Data)
            {
                Snackbar.Add("Zlecenie zostało usunięte", Severity.Success);
                NavigationManager.NavigateTo("/orders");
            }
            else
            {
                Snackbar.Add($"Błąd podczas usuwania zlecenia", Severity.Error);
            }
        }
    }


    private async Task SaveOrderData()
    {
        _formSubmitted = true;
		
        if (!ValidateForm())
        {
            return;
        }
        
        try
        {
            int adresEmailId = _orderDataModel.AdresEmailId ?? 0;

            if (!string.IsNullOrWhiteSpace(_orderDataModel.EmailKlienta))
            {
                var emailDto = new AdresEmailDto { Email = _orderDataModel.EmailKlienta };

                var emailResult = adresEmailId > 0
                    ? await ApiService.AdresyEmailRepo.AdresEmailPut(adresEmailId, emailDto)
                    : await ApiService.AdresyEmailRepo.AdresEmailPost(emailDto);

                if (emailResult.Error != null)
                {
                    ShowError("Błąd podczas zapisywania adresu email.");
                    return;
                }

                adresEmailId = emailResult.Data?.AdresEmailId ?? 0;
            }

            int? numerTelefonuId = _orderDataModel.NumerTelefonuId;

            if (!string.IsNullOrWhiteSpace(_orderDataModel.NumerTelefonuKlienta))
            {
                var phoneDto = new NumerTelefonuDto { Numer = _orderDataModel.NumerTelefonuKlienta };

                var phoneResult = numerTelefonuId.HasValue && numerTelefonuId.Value > 0
                    ? await ApiService.NumeryTelefonuRepo.NumerTelefonuPut(numerTelefonuId.Value, phoneDto)
                    : await ApiService.NumeryTelefonuRepo.NumerTelefonuPost(phoneDto);

                if (phoneResult.Error != null)
                {
                    ShowError("Błąd podczas zapisywania numeru telefonu");
                    return;
                }

                numerTelefonuId = phoneResult.Data?.NumerTelefonuId;
            }
            
            int? addressId = null;
            if (!string.IsNullOrWhiteSpace(_orderDataModel.Ulica) || !string.IsNullOrWhiteSpace(_orderDataModel.Miasto))
            {
                var adresResult = await ApiService.AdresyRepo.AdresPost(new AdresDto
                {
                    Kraj = _orderDataModel.Kraj,
                    Ulica = _orderDataModel.Ulica,
                    NumerDomu = _orderDataModel.NumerDomu,
                    NumerMieszkania = _orderDataModel.NumerMieszkania,
                    Miasto = _orderDataModel.Miasto,
                    KodPocztowy = _orderDataModel.KodPocztowy
                });

                if (adresResult.Error != null || adresResult.Data == null)
                {
                    ShowError("Błąd podczas zapisywania adresu.");
                    return;
                }

                addressId = adresResult.Data.AdresId;
            }
            
            
            if (!string.IsNullOrWhiteSpace(_orderDataModel.ImieKlienta) && !string.IsNullOrWhiteSpace(_orderDataModel.NazwiskoKlienta))
            {
                var userDto = new UzytkownikDto
                {
                    RolaUzytkownikaId = _uzytkownikKlient.RolaUzytkownika.RolaUzytkownikaId,
                    Imie = _orderDataModel.ImieKlienta,
                    Nazwisko = _orderDataModel.NazwiskoKlienta,
                    AdresEmailId = _uzytkownikKlient.AdresEmailId,
                    NumerTelefonuId = _uzytkownikKlient.NumerTelefonuId,
                    CzyAktywny = _uzytkownikKlient.CzyAktywny,
                    AdresId = _uzytkownikKlient.Adres.AdresId,
                };

                var userResult = await ApiService.UzytkownicyRepo.UzytkownikPut(_uzytkownikKlient.UzytkownikId, userDto);

                if (userResult.Error != null || userResult.Data == null)
                {
                    Snackbar.Add("Błąd podczas zapisywania danych klienta.");
                    return;
                }
            }
          

            if (_orderDataModel.SerwisantId.HasValue)
            {
                var selectedSerwisant = _serwisanci.FirstOrDefault(s => s.SerwisantId == _orderDataModel.SerwisantId.Value);
                
                if (selectedSerwisant != null)
                {
                    var freshUserResult = await ApiService.UzytkownicyRepo.UzytkownikGet(selectedSerwisant.Uzytkownik.UzytkownikId);
                    var freshUserData = freshUserResult.Data;
                    
                    if (freshUserData != null)
                    {
                        int adresEmailIdSerwisanta = freshUserData.AdresEmailId;
                        
                        if (!string.IsNullOrWhiteSpace(_orderDataModel.EmailSerwisanta))
                        {
                            var emailDto = new AdresEmailDto { Email = _orderDataModel.EmailSerwisanta };
                            
                            var emailResult = adresEmailIdSerwisanta > 0
                                ? await ApiService.AdresyEmailRepo.AdresEmailPut(adresEmailIdSerwisanta, emailDto)
                                : await ApiService.AdresyEmailRepo.AdresEmailPost(emailDto);
                            
                            if (emailResult.Error != null)
                            {
                                ShowError("Błąd podczas zapisywania adresu email serwisanta.");
                                return;
                            }
                            
                            adresEmailIdSerwisanta = emailResult.Data?.AdresEmailId ?? 0;
                        }
                        
                        int? numerTelefonuIdSerwisanta = freshUserData.NumerTelefonuId;
                        
                        if (!string.IsNullOrWhiteSpace(_orderDataModel.NumerTelefonuSerwisanta))
                        {
                            var phoneDto = new NumerTelefonuDto { Numer = _orderDataModel.NumerTelefonuSerwisanta };
                            
                            var phoneResult = numerTelefonuIdSerwisanta.HasValue && numerTelefonuIdSerwisanta.Value > 0
                                ? await ApiService.NumeryTelefonuRepo.NumerTelefonuPut(numerTelefonuIdSerwisanta.Value, phoneDto)
                                : await ApiService.NumeryTelefonuRepo.NumerTelefonuPost(phoneDto);
                            
                            if (phoneResult.Error != null)
                            {
                                ShowError("Błąd podczas zapisywania numeru telefonu serwisanta");
                                return;
                            }
                            
                            numerTelefonuIdSerwisanta = phoneResult.Data?.NumerTelefonuId;
                        }
                        
                        var userDto = new UzytkownikDto
                        {
                            RolaUzytkownikaId = freshUserData.RolaUzytkownika.RolaUzytkownikaId,
                            Imie = freshUserData.Imie,
                            Nazwisko = freshUserData.Nazwisko,
                            AdresEmailId = adresEmailIdSerwisanta,
                            NumerTelefonuId = numerTelefonuIdSerwisanta,
                            CzyAktywny = freshUserData.CzyAktywny,
                            AdresId = freshUserData.Adres?.AdresId ?? 0
                        };
                        
                        var userResult = await ApiService.UzytkownicyRepo.UzytkownikPut(freshUserData.UzytkownikId, userDto);
                        
                        if (userResult.Error != null || userResult.Data == null)
                        {
                            Snackbar.Add("Błąd podczas zapisywania danych serwisanta.", Severity.Error);
                            return;
                        }
                    }
                }
            }
            
            
            var zamowienieDto = new ZamowienieDto
            {
                SerwisantId = _orderDataModel.SerwisantId,
                KlientId = _orderDataModel.KlientId,
                SerwisId = _orderDataModel.SerwisId,
                StatusId = _orderDataModel.StatusId,
                PriorytetId = _orderDataModel.PriorytetId,
                MetodaPlatnosciId = _orderDataModel.MetodaPlatnosciId,
                KomentarzeIds = _orderDataModel.KomentarzeIds,
                NumerTelefonuId = numerTelefonuId,
                AdresEmailId = adresEmailId,
                Koszt100 = _orderDataModel.Koszt100,
                Opis = _orderDataModel.Opis,
                AdresId = addressId,
                PlanowanaDataRealizacjiOd = _orderDataModel.PlanowanaDataRealizacjiOd,
                PlanowanaDataRealizacjiDo = _orderDataModel.PlanowanaDataRealizacjiDo,
                ZrealizowanaDataRealizacjiOd = _orderDataModel.ZrealizowanaDataRealizacjiOd,
                ZrealizowanaDataRealizacjiDo = _orderDataModel.ZrealizowanaDataRealizacjiDo
            };

            var result = await ApiService.ZamowieniaRepo.ZamowieniePut(OrderId, zamowienieDto);
            
            if (result.Data != null )
            {
                if (_orderDataModel.PreviousStatusId != _orderDataModel.StatusId)
                {
                    var logDto = new LogDto
                    {
                        ZamowienieId = OrderId,
                        StatusId = _orderDataModel.StatusId,
                        Komentarz = "Aktualizacja danych zlecenia"
                    };
                    await ApiService.LogiRepo.LogPost(logDto);
                    await LoadOrderLogs();
                }
                Snackbar.Add("Zapisano zmiany", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił nieoczekiwany błąd, spróbuj ponownie później.", Severity.Error);
        }
    }
    
    	private bool IsValidEmail(string email)
	{
		try
		{
			var addr = new System.Net.Mail.MailAddress(email);
			return addr.Address == email;
		}
		catch
		{
			return false;
		}
	}

	private bool IsValidPhoneNumber(string phone)
	{
		return System.Text.RegularExpressions.Regex.IsMatch(phone, @"^(\+)?[\d\s-]{9,15}$");
	}

	private bool IsValidPostalCode(string postalCode)
	{
		return System.Text.RegularExpressions.Regex.IsMatch(postalCode, @"^\d{2}-\d{3}$");
	}
	
	
	private bool ValidateForm()
	{
		bool isValid = true;
		
        _opisValidationMessage = string.Empty;
        _numerTelefonuKlientaValidationMessage = string.Empty;
        _emailKlientaValidationMessage = string.Empty;
        _panstwoValidationMessage = string.Empty;
        _ulicaValidationMessage = string.Empty;
        _numerDomuValidationMessage = string.Empty;
        _miastoValidationMessage = string.Empty;
        _kodPocztowyValidationMessage = string.Empty;
        
        _imieKlientaValidationMessage = string.Empty;
        _nazwiskoKlientaValidationMessage = string.Empty;
        _zrealizowanoDataRealizacjiValidationMessage = string.Empty;
        _zrealizowanoDataZakonczeniaValidationMessage = string.Empty;
        _numerTelefonuSerwisantaValidationMessage = string.Empty;
        _emailSerwisantaValidationMessage = string.Empty;
        

		if (string.IsNullOrWhiteSpace(_orderDataModel.Opis) || _orderDataModel.Opis.Length > 500 || _orderDataModel.Opis.Length < 15)
		{
			_opisValidationMessage = "Opis musi mieć od 15 do 500 znaków";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_orderDataModel.NumerTelefonuKlienta) || !IsValidPhoneNumber(_orderDataModel.NumerTelefonuKlienta))
		{
			_numerTelefonuKlientaValidationMessage = "Nieprawidłowy format numeru telefonu";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_orderDataModel.EmailKlienta))
		{
			_emailKlientaValidationMessage = "Adres email jest wymagany";
			isValid = false;
		}
		
		else if (!IsValidEmail(_orderDataModel.EmailKlienta))
		{
            _emailKlientaValidationMessage = "Nieprawidłowy format adresu email";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_orderDataModel.Kraj) || _orderDataModel.Kraj.Length > 64 || _orderDataModel.Kraj.Length < 2)
		{
			_panstwoValidationMessage = "Państwo musi mieć od 2 do 64 znaków";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_orderDataModel.Ulica) || _orderDataModel.Ulica.Length > 100 || _orderDataModel.Ulica.Length < 2)
		{
			_ulicaValidationMessage = "Ulica musi mieć od 2 do 100 znaków";
			isValid = false;
		}
		
		if (_orderDataModel.NumerDomu < 1 || _orderDataModel.NumerDomu > 1000)
		{
			_numerDomuValidationMessage = "Numer domu musi być z przedzialu od 0 do 1000";
			isValid = false;
		}

		if (string.IsNullOrWhiteSpace(_orderDataModel.Miasto) || _orderDataModel.Miasto.Length > 85 || _orderDataModel.Miasto.Length < 2)
		{
			_miastoValidationMessage = "Miasto musi mieć od 2 do 85 znaków";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_orderDataModel.KodPocztowy) || !IsValidPostalCode(_orderDataModel.KodPocztowy))
		{
			_kodPocztowyValidationMessage = "Kod pocztowy powinien mieć format XX-XXX";
			isValid = false;
		}
        
        if (string.IsNullOrWhiteSpace(_orderDataModel.ImieKlienta) || _orderDataModel.ImieKlienta.Length < 1)
        {
            _imieKlientaValidationMessage = "Wprodzadz prawidlowe format imienia";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(_orderDataModel.NazwiskoKlienta) || _orderDataModel.NazwiskoKlienta.Length < 1)
        {
            _nazwiskoKlientaValidationMessage = "Wprodzadz prawidlowe format nazwiska";
            isValid = false;
        }
        
        if (_orderDataModel.ZrealizowanaDataRealizacjiDo < _orderDataModel.ZrealizowanaDataRealizacjiOd)
        {
            _zrealizowanoDataZakonczeniaValidationMessage = "Data zakończenia musi być późniejsza lub równa wzgledem daty realizacji";
            isValid = false;
        }
        
        if (string.IsNullOrWhiteSpace(_orderDataModel.NumerTelefonuSerwisanta) || !IsValidPhoneNumber(_orderDataModel.NumerTelefonuSerwisanta))
        {
            _numerTelefonuSerwisantaValidationMessage = "Nieprawidłowy format numeru telefonu";
            isValid = false;
        }
		
        if (string.IsNullOrWhiteSpace(_orderDataModel.EmailSerwisanta))
        {
            _emailSerwisantaValidationMessage = "Adres email jest wymagany";
            isValid = false;
        }
		
        else if (!IsValidEmail(_orderDataModel.EmailSerwisanta))
        {
            _emailSerwisantaValidationMessage = "Nieprawidłowy format adresu email";
            isValid = false;
        }
        
		return isValid;
	}

    private void ShowSuccess(string message)
    {
        _message = message;
        _messageClass = "success-message";
    }

    private void ShowError(string error)
    {
        _message = error;
        _messageClass = "error-message";
    }

    private string FormatDate(DateTime? date)
    {
        return date?.ToString("dd.MM.yyyy HH:mm") ?? "Nie określono";
    }

    private string GetUserComment(int userId)
    {
        var user = _uzytkownicy.FirstOrDefault(s => s.UzytkownikId == userId);
        return $"{user.Imie} {user.Nazwisko}";
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Zakończony" => "status-finished",
            "W realizacji" => "status-realization",
            "Anulowany" => "status-canceled",
            "Oczekujący" => "status-waiting",
            "Nowy" => "status-new",
            _ => "status-default"
        };
    }
    private string GetSelectedStatusName()
    {
        return _statusy.FirstOrDefault(s => s.StatusId == _orderDataModel.StatusId)?.Nazwa ?? "";
    }
    
    private string GetUserRole()
    {
        if (_uzytkownikZalogowany?.RolaUzytkownika == null)
            return "Brak roli";

        return _uzytkownikZalogowany.RolaUzytkownika.Nazwa;
    }
    
    private string GetCommentUserRole(int userId)
    {
        var user = _uzytkownicy.FirstOrDefault(s => s.UzytkownikId == userId);
        return user.RolaUzytkownika.Nazwa;
    }


    public class OrderDataModel
    {
        public int ZamowienieId { get; set; }
        public int? SerwisantId { get; set; }
        public int KlientId { get; set; }
        public int SerwisId { get; set; }
        public int StatusId { get; set; }
        public int PreviousStatusId { get; set; }
        public int PriorytetId { get; set; }
        public int MetodaPlatnosciId { get; set; }
        public List<int>? KomentarzeIds { get; set; }
        public int? NumerTelefonuId { get; set; }
        public int? AdresEmailId { get; set; }
        public int? AdresId { get; set; }
        public int Koszt100 { get; set; }
        public String Opis { get; set; }
        public DateTime? DataAktualizacji { get; set; }
        public DateTime DataDodania { get; set; }
        public DateTime? PlanowanaDataRealizacjiOd { get; set; }
        public DateTime? PlanowanaDataRealizacjiDo { get; set; }
        public DateTime? ZrealizowanaDataRealizacjiOd { get; set; }
        public DateTime? ZrealizowanaDataRealizacjiDo { get; set; }
        public DicStatus Status { get; set; }


        // [EmailAddress(ErrorMessage = "Proszę podać poprawny adres email")]
        public string? EmailKlienta { get; set; }

        // [RegularExpression(@"^\d{9}$", ErrorMessage = "Numer telefonu powinien składać się z 9 cyfr")]
        public string? NumerTelefonuKlienta { get; set; }

        // [EmailAddress(ErrorMessage = "Proszę podać poprawny adres email")]
        public string? EmailSerwisanta { get; set; }

        // [RegularExpression(@"^\d{9}$", ErrorMessage = "Numer telefonu powinien składać się z 9 cyfr")]
        public string? NumerTelefonuSerwisanta { get; set; }

        public string? ImieKlienta { get; set; }
        public string? NazwiskoKlienta { get; set; }

        public string? Ulica { get; set; }
        public int NumerDomu { get; set; }
        public int? NumerMieszkania { get; set; }
        public string? KodPocztowy { get; set; }
        public string? Miasto { get; set; }
        public string? Kraj { get; set; }
    }

}
