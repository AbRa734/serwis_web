@page "/orders"
@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@using Color = MudBlazor.Color
@using Placement = MudBlazor.Placement
@using Size = MudBlazor.Size
@inject ApiService ApiService
@inject ISnackbar Snackbar

<PageTitle>Lista zleceń</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudCard Elevation="3" Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Lista zleceń</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       Href="/services">Nowe zlecenie</MudButton>
        </MudCardHeader>
    </MudCard>

    <MudDataGrid T="Serwis" Items="@_filteredSerwisy" Hover="true" Loading="@_loading"
                 LoadingProgressColor="Color.Info" Filterable="true"
                 FilterMode="DataGridFilterMode.ColumnFilterMenu"
                 FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
                 Bordered="false" Dense="false">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Zlecenia</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Szukaj globalnie" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mr-2"
                          Immediate="true" DebounceInterval="500" OnDebounceIntervalElapsed="ApplySearch"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn T="Serwis" TProperty="int" Property="x => x.SerwisId" Title="Numer zlecenia">
                <CellTemplate>
                    <MudLink Href="@($"/orders/{context.Item.SerwisId}")">@context.Item.SerwisId.ToString("D6")</MudLink>
                </CellTemplate>
                <FooterTemplate>
                    <MudText Typo="Typo.body2"><b>Suma zleceń: @(_filteredSerwisy?.Count ?? 0)</b></MudText>
                </FooterTemplate>
            </PropertyColumn>
            <PropertyColumn T="Serwis" TProperty="string" Property="x => x.Nazwa" Title="Nazwa" />
            <PropertyColumn T="Serwis" TProperty="string" Property="x => x.Opis ?? string.Empty" Title="Opis">
                <CellTemplate>
                    @{
                        var opis = string.IsNullOrEmpty(context.Item.Opis) ? "-" : context.Item.Opis;
                        var shortOpis = opis.Length > 50 ? opis.Substring(0, 47) + "..." : opis;
                    }
                    <div style="max-width: 250px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                        <MudTooltip Text="@opis" Placement="Placement.Top" Arrow="true" Disabled="@(opis.Length <= 50 || opis == "-")">
                            <MudText Typo="Typo.body2">@shortOpis</MudText>
                        </MudTooltip>
                    </div>
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn T="Serwis" TProperty="DicTypSerwisu" Property="x => x.TypSerwisu" Title="Rodzaj">
                <CellTemplate>
                    @(context.Item.TypSerwisu?.Nazwa ?? "-")
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn T="Serwis" TProperty="DateTime" Property="x => x.DataDodania" Title="Data utworzenia" Format="dd.MM.yyyy" />
            <PropertyColumn T="Serwis" TProperty="DateTime?" Property="x => x.DataAktualizacji" Title="Data aktualizacji">
                <CellTemplate>
                    @(context.Item.DataAktualizacji?.ToString("dd.MM.yyyy") ?? "-")
                </CellTemplate>
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Serwis" RowsPerPageString="Wierszy na stronę" InfoFormat="{first_item}-{last_item} z {all_items}" />
        </PagerContent>
        <NoRecordsContent>
            <MudText>Nie znaleziono zleceń</MudText>
        </NoRecordsContent>
    </MudDataGrid>
</MudContainer>

@code {
    private string _searchString = "";
    private bool _loading = true;
    private List<Serwis> _serwisy = new();
    private List<Serwis> _filteredSerwisy = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServicesAsync();
    }

    private async Task LoadServicesAsync()
    {
        _loading = true;
        try
        {
            var result = await ApiService.SerwisyRepo.SerwisyGet();
            if (result.Data != null)
            {
                _serwisy = result.Data;
                _filteredSerwisy = _serwisy;
                
                if (_serwisy.Count == 0)
                {
                    Snackbar.Add("Nie znaleziono żadnych zleceń", Severity.Info);
                }
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania zleceń: {result.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił wyjątek: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ApplySearch()
    {
        if (string.IsNullOrWhiteSpace(_searchString))
        {
            _filteredSerwisy = _serwisy;
        }
        else
        {
            string searchLower = _searchString.ToLower();
            _filteredSerwisy = _serwisy.Where(s => 
                s.SerwisId.ToString().Contains(searchLower) ||
                s.Nazwa.ToLower().Contains(searchLower) ||
                (s.Opis != null && s.Opis.ToLower().Contains(searchLower)) ||
                (s.TypSerwisu?.Nazwa != null && s.TypSerwisu.Nazwa.ToLower().Contains(searchLower)) ||
                s.DataDodania.ToString("dd.MM.yyyy").Contains(searchLower) ||
                (s.DataAktualizacji.HasValue && s.DataAktualizacji.Value.ToString("dd.MM.yyyy").Contains(searchLower))
            ).ToList();
        }
        
        StateHasChanged();
    }
}