@page "/search"
@using ApiService
@using ApiService.Models
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@inject ApiService ApiService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Wyniki wyszukiwania</PageTitle>

<div class="services-container">
    <h2>Wyniki wyszukiwania: @searchQuery</h2>

    <div class="service-back">
        @if (isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        }
        else
        {
            @if (showNoResults)
            {
                <div class="no-results">
                    <i class="fa-solid fa-search fa-3x"></i>
                    <h3>Brak wyników dla zapytania "@searchQuery"</h3>
                    <p>Spróbuj użyć innych słów kluczowych.</p>
                </div>
            }
            else
            {
                <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3">
                    @if (!isKlient && !isSerwisant)
                    {
                        <MudTabPanel Text="@($"Użytkownicy ({users.Count})")" Icon="@Icons.Material.Filled.Person">
                            @if (users.Any())
                            {
                                <div class="search-results">
                                    @foreach (var user in users)
                                    {
                                        <MudCard Elevation="2" Class="my-2">
                                            <MudCardContent>
                                                <div class="d-flex gap-4">
                                                    <MudAvatar Color="Color.Primary">@(user.Imie?.Length > 0 ? user.Imie[0] : ' ')@(user.Nazwisko?.Length > 0 ? user.Nazwisko[0] : ' ')</MudAvatar>
                                                    <div>
                                                        <MudText Typo="Typo.h6">@user.Imie @user.Nazwisko</MudText>
                                                        <MudText Typo="Typo.body2">@(user.AdresEmail?.Email ?? "")</MudText>
                                                    </div>
                                                </div>
                                            </MudCardContent>
                                            <MudCardActions>
                                                <MudButton Variant="Variant.Text" Color="Color.Primary"
                                                          Href="@($"/users/{user.UzytkownikId}")">
                                                    Szczegóły
                                                </MudButton>
                                            </MudCardActions>
                                        </MudCard>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="no-results">
                                    <p>Brak pasujących użytkowników.</p>
                                </div>
                            }
                        </MudTabPanel>
                    }
                    
                    <MudTabPanel Text="@($"Zamówienia ({orders.Count})")" Icon="@Icons.Material.Filled.ShoppingCart">
                        @if (orders.Any())
                        {
                            <div class="search-results">
                                @foreach (var order in orders)
                                {
                                    <MudCard Elevation="2" Class="my-2">
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6">Zamówienie #@order.ZamowienieId</MudText>
                                            <MudText Typo="Typo.body2">Status: @(order.Status?.Nazwa ?? "Nieznany")</MudText>
                                            @if (order.DataDodania != default)
                                            {
                                                <MudText Typo="Typo.body2">Data utworzenia: @order.DataDodania.ToString("dd.MM.yyyy")</MudText>
                                            }
                                            @if (order.Klient != null)
                                            {
                                                <MudText Typo="Typo.body2">Klient: @order.Klient.Uzytkownik?.Imie @order.Klient.Uzytkownik?.Nazwisko</MudText>
                                            }
                                        </MudCardContent>
                                        <MudCardActions>
                                            <MudButton Variant="Variant.Text" Color="Color.Primary"
                                                      Href="@($"/orders/{order.ZamowienieId}")">
                                                Szczegóły
                                            </MudButton>
                                        </MudCardActions>
                                    </MudCard>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="no-results">
                                <p>Brak pasujących zamówień.</p>
                            </div>
                        }
                    </MudTabPanel>
                    
                    @if (!isKlient)
                    {
                        <MudTabPanel Text="@($"Serwisy ({services.Count})")" Icon="@Icons.Material.Filled.Build">
                            @if (services.Any())
                            {
                                <div class="search-results">
                                    @foreach (var service in services)
                                    {
                                        <MudCard Elevation="2" Class="my-2">
                                            <MudCardContent>
                                                <MudText Typo="Typo.h6">@service.Nazwa</MudText>
                                                <MudText Typo="Typo.subtitle1">Serwis #@service.SerwisId</MudText>
                                                <MudText Typo="Typo.body2">@service.Opis</MudText>
                                                <MudText Typo="Typo.body2">
                                                    Typ: @(service.TypSerwisu?.Nazwa ?? "Nieznany")
                                                </MudText>
                                                <MudText Typo="Typo.body2">
                                                    Dodano: @service.DataDodania.ToString("dd.MM.yyyy")
                                                </MudText>
                                            </MudCardContent>
                                            <MudCardActions>
                                                <MudButton Variant="Variant.Text" Color="Color.Primary"
                                                          Href="@($"/services/{service.SerwisId}")">
                                                    Szczegóły
                                                </MudButton>
                                            </MudCardActions>
                                        </MudCard>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="no-results">
                                    <p>Brak pasujących serwisów.</p>
                                </div>
                            }
                        </MudTabPanel>
                    }
                </MudTabs>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "q")]
    public string? searchQuery { get; set; }

    private bool isLoading = true;
    private bool showNoResults = false;
    private List<Uzytkownik> users = new();
    private List<Zamowienie> orders = new();
    private List<Serwis> services = new();
    private Uzytkownik? currentUser;
    private bool isSerwisant = false;
    private bool isKlient = false;
    private int? serwisantId = null;
    private int? klientId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUserAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            isLoading = false;
            showNoResults = true;
            return;
        }

        await PerformSearch();
    }

    private async Task LoadCurrentUserAsync()
    {
        try
        {
            currentUser = await ApiService.GetUzytkownik();

            // Check user role
            if (currentUser.RolaUzytkownika.Nazwa == "Serwisant")
            {
                isSerwisant = true;

                // Find the Serwisant ID associated with this user
                var serwisanci = await ApiService.SerwisanciRepo.SerwisanciGet();
                if (serwisanci.Data != null)
                {
                    var serwisant = serwisanci.Data.FirstOrDefault(s => s.UzytkownikId == currentUser.UzytkownikId);
                    if (serwisant != null)
                    {
                        serwisantId = serwisant.SerwisantId;
                    }
                }
            }
            else if (currentUser.RolaUzytkownika.Nazwa == "Klient")
            {
                isKlient = true;

                // Find the Klient ID associated with this user
                var klienci = await ApiService.KlienciRepo.KlienciGet();
                if (klienci.Data != null)
                {
                    var klient = klienci.Data.FirstOrDefault(k => k.UzytkownikId == currentUser.UzytkownikId);
                    if (klient != null)
                    {
                        klientId = klient.KlientId;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas pobierania danych użytkownika.", Severity.Error);
        }
    }

    private async Task PerformSearch()
    {
        isLoading = true;
        showNoResults = false;

        try
        {
            var searchTerms = searchQuery.ToLower().Split(' ', StringSplitOptions.RemoveEmptyEntries);

            var usersResult = await ApiService.UzytkownicyRepo.UzytkownicyGet();
            var ordersResult = await ApiService.ZamowieniaRepo.ZamowieniaGet();
            var servicesResult = await ApiService.SerwisyRepo.SerwisyGet();

            // Always filter users by search terms (no role-based restrictions)
            if (usersResult.Data != null)
            {
                users = usersResult.Data.Where(u =>
                    searchTerms.Any(term =>
                        (u.Imie != null && u.Imie.ToLower().Contains(term)) ||
                        (u.Nazwisko != null && u.Nazwisko.ToLower().Contains(term)) ||
                        (u.AdresEmail != null && u.AdresEmail.Email != null && u.AdresEmail.Email.ToLower().Contains(term)) ||
                        u.UzytkownikId.ToString() == term
                    )
                ).ToList();
            }

            // Filter orders based on user role and search terms
            if (ordersResult.Data != null)
            {
                var filteredOrders = ordersResult.Data;
                
                // Filter by role first
                if (isSerwisant && serwisantId.HasValue)
                {
                    // Technician can only see their own orders
                    filteredOrders = filteredOrders.Where(o => o.SerwisantId == serwisantId.Value).ToList();
                }
                else if (isKlient && klientId.HasValue)
                {
                    // Client can only see their own orders
                    filteredOrders = filteredOrders.Where(o => o.KlientId == klientId.Value).ToList();
                }
                
                // Then filter by search terms
                orders = filteredOrders.Where(o =>
                    searchTerms.Any(term =>
                        o.ZamowienieId.ToString() == term ||
                        (o.Status != null && o.Status.Nazwa != null && o.Status.Nazwa.ToLower().Contains(term)) ||
                        (o.Klient != null && o.Klient.Uzytkownik != null &&
                         ((o.Klient.Uzytkownik.Imie != null && o.Klient.Uzytkownik.Imie.ToLower().Contains(term)) ||
                          (o.Klient.Uzytkownik.Nazwisko != null && o.Klient.Uzytkownik.Nazwisko.ToLower().Contains(term))))
                    )
                ).ToList();
            }

            // Services aren't filtered by role (everyone can see all services)
            if (servicesResult.Data != null)
            {
                services = servicesResult.Data.Where(s =>
                    searchTerms.Any(term =>
                        s.SerwisId.ToString() == term ||
                        (s.Nazwa != null && s.Nazwa.ToLower().Contains(term)) ||
                        (s.Opis != null && s.Opis.ToLower().Contains(term)) ||
                        (s.TypSerwisu != null && s.TypSerwisu.Nazwa != null &&
                         s.TypSerwisu.Nazwa.ToLower().Contains(term))
                    )
                ).ToList();
            }

            showNoResults = !users.Any() && !orders.Any() && !services.Any();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas wyszukiwania.", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
}