@page "/avability"
@using ApiService
@using ApiService.Models
@using serwis_web.Components
@using Color = MudBlazor.Color
@inject IDialogService DialogService
@inject ApiService ApiService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<style>
    .mud-cal-clickable{
        cursor: pointer!important;    
    }
    .container {
        margin: 0;
        padding: 0;
        min-width: 100%;
    }

    .header-card {
        border: none;
        box-shadow: none;
        background-color: inherit;
        margin: 0 0 25px 0;
        padding: 0;
    }

    .header-content {
        border: none;
        box-shadow: none;
        background-color: inherit;
        margin: 0;
        padding: 0 40px 0 0;
        display: flex;
        width: 100%;
        justify-content: space-between;
    }

    .header-title {
        font-size: 30px;
        font-weight: 600;
    }

    .new-button {
        background-color: #4880FF;
        border: none;
        border-radius: 10px;
        padding: 12px 50px;
        color: #FFFFFF;
        font-size: 16px;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
        text-transform: none;
    }

    .new-button:hover {
        background-color: #336ff5;
    }

    .calendar {
        padding: 15px;
        border-radius: 15px;
        box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
    }
    
    .legend {
        display: flex;
        gap: 20px;
        margin: 15px 0;
        padding: 10px;
        border-radius: 10px;
        background-color: #f9f9f9;
    }
    
    .legend-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
    }
    
    .legend-available {
        width: 12px;
        height: 12px;
        background-color: #4CAF50;
        border-radius: 50%;
    }
    
    .legend-unavailable {
        width: 12px;
        height: 12px;
        background-color: #F44336;
        border-radius: 50%;
    }
    
    .technician-filter {
        margin-bottom: 15px;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }
    
    .filter-chip {
        cursor: pointer;
    }

    @@media (max-width: 1280px) {
        .header-content {
            padding: 0;
        }
    }

    @@media (max-width: 1024px) {
        .header-content {
            flex-direction: column;
        }
        .new-button {
            width: 100%;
            margin-top: 10px;
        }
    }
</style>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="container">
    <MudCard Class="header-card">
        <MudCardHeader Class="header-content">
            <MudText Class="header-title">Lista dostępności serwisantów</MudText>
            <MudButton Class="new-button" @onclick="OpenAddAvailabilityDialog">
                Nowa dostępność
            </MudButton>
        </MudCardHeader>
    </MudCard>
    
    @*<div class="legend">
        <div class="legend-item">
            <div class="legend-available"></div>
            <span>Dostępny</span>
        </div>
        <div class="legend-item">
            <div class="legend-unavailable"></div>
            <span>Niedostępny</span>
        </div>
    </div>*@

    <div class="technician-filter">
        @if (!_isSerwisant)
        {
            <MudSelect T="int?" Label="Wybierz serwisanta"
                       Value="selectedTechnicianId"
                       ValueChanged="@((int? val) => FilterByTechnician(val))"
                       Style="min-width: 150px;">
                @foreach (var technician in _technicians)
                {
                    <MudSelectItem T="int?" Value="@((int?)technician.Key)">@technician.Value (ID: @technician.Key)</MudSelectItem>
                }
            </MudSelect>
        }
        else if (_technicians.Count > 0)
        {
            <MudText>Twoja dostępność: @(_technicians.FirstOrDefault().Value) (ID: @(_technicians.FirstOrDefault().Key))</MudText>
        }
    </div>

    <MudCalendar Items="_filteredEvents"
                 CellClicked="CellClicked"
                 ItemClicked="ItemClicked"
                 DayTimeInterval="CalendarTimeInterval.Minutes30"
                 Bordered="false"
                 Dense="false"
                 Class="calendar" />
</MudContainer>

<div class="help-button-container">
    <AccessibilityWidget/>
</div>


@code {
    private bool isAdmin = true;
    private List<CalendarItem> _events = new();
    private List<CalendarItem> _filteredEvents = new();
    private Dictionary<CalendarItem, DostepnoscSerwisanta> _eventToDostepnosc = new();
    private List<DostepnoscSerwisanta> _wszystkieDostepnosci = new();
    private Dictionary<int, string> _technicians = new();
    private List<Serwisant> _allSerwisants = new();
    private int? selectedTechnicianId = null;
    private Uzytkownik _currentUser;
    private bool _isSerwisant = false;
    private int? _currentSerwisantId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCurrentUser();
        await LoadTechnicians();
        await LoadAvailabilities();
        
        if (!_isSerwisant)
        {
            selectedTechnicianId = null;
        }
    }
    
    private async Task LoadCurrentUser()
    {
        try {
            _currentUser = await ApiService.GetUzytkownik();
            _isSerwisant = _currentUser?.RolaUzytkownika?.Nazwa?.ToLower() == "serwisant";
            
            if (_isSerwisant)
            {
                var serwisanci = await ApiService.SerwisanciRepo.SerwisanciGet();
                if (serwisanci.Data != null)
                {
                    var serwisant = serwisanci.Data.FirstOrDefault(s => 
                        s.UzytkownikId == _currentUser.UzytkownikId);
                    
                    if (serwisant != null)
                    {
                        _currentSerwisantId = serwisant.SerwisantId;
                        selectedTechnicianId = _currentSerwisantId;
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania danych użytkownika.", Severity.Error);
        }
    }

    private async Task LoadTechnicians()
    {
        try
        {
            var result = await ApiService.SerwisanciRepo.SerwisanciGet();
            if (result.Data != null)
            {
                _allSerwisants = result.Data.ToList();
                
                _technicians.Clear();
                
                foreach (var serwisant in _allSerwisants)
                {
                    if (serwisant.Uzytkownik != null && !_technicians.ContainsKey(serwisant.SerwisantId))
                    {
                        var imieNazwisko = $"{serwisant.Uzytkownik.Imie} {serwisant.Uzytkownik.Nazwisko}".Trim();
                        _technicians[serwisant.SerwisantId] = imieNazwisko;
                    }
                }
                
                if (_isSerwisant && _currentSerwisantId.HasValue)
                {
                    var filteredTechnicians = new Dictionary<int, string>();
                    if (_technicians.TryGetValue(_currentSerwisantId.Value, out var techName))
                    {
                        filteredTechnicians[_currentSerwisantId.Value] = techName;
                    }
                    _technicians = filteredTechnicians;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania serwisantów.", Severity.Error);
        }
    }

    private async Task LoadAvailabilities()
    {
        try
        {
            _events.Clear();
            _filteredEvents.Clear();
            _eventToDostepnosc.Clear();
            _wszystkieDostepnosci.Clear();

            var result = await ApiService.DostepnosciSerwisantaRepo.DostepnosciSerwisantaGet();
            if (result.Data is not null)
            {
                var validSerwisantIds = _allSerwisants.Select(s => s.SerwisantId).ToHashSet();
                
                if (_isSerwisant && _currentSerwisantId.HasValue)
                {
                    _wszystkieDostepnosci = result.Data
                        .Where(d => d.SerwisantId == _currentSerwisantId.Value)
                        .ToList();
                }
                else
                {
                    _wszystkieDostepnosci = result.Data
                        .Where(d => validSerwisantIds.Contains(d.SerwisantId))
                        .ToList();
                }

                foreach (var d in _wszystkieDostepnosci)
                {
                    if (_technicians.TryGetValue(d.SerwisantId, out var imieNazwisko))
                    {
                        var item = new CalendarItem
                        {
                            Start = d.DataOd.DateTime,
                            End = d.DataDo.DateTime,
                            Text = imieNazwisko,
                        };
                        _events.Add(item);
                        _eventToDostepnosc[item] = d;
                    }
                    else if (d.Serwisant?.Uzytkownik != null)
                    {
                        var name = $"{d.Serwisant.Uzytkownik.Imie} {d.Serwisant.Uzytkownik.Nazwisko}".Trim();
                        var item = new CalendarItem
                        {
                            Start = d.DataOd.DateTime,
                            End = d.DataDo.DateTime,
                            Text = name,
                        };
                        _events.Add(item);
                        _eventToDostepnosc[item] = d;
                    }
                }

                _filteredEvents = new List<CalendarItem>(_events);

                if (_isSerwisant && _currentSerwisantId.HasValue)
                {
                    FilterByTechnician(_currentSerwisantId.Value);
                }

                if (selectedTechnicianId == null)
                {
                    _filteredEvents = new List<CalendarItem>();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania dostępności serwisantów.", Severity.Error);
        }
    }

    private void FilterByTechnician(int? technicianId)
    {
        selectedTechnicianId = technicianId;

        if (technicianId == null)
        {
            _filteredEvents = new List<CalendarItem>();
        }
        else
        {
            _filteredEvents = _events
                .Where(e => _eventToDostepnosc.TryGetValue(e, out var d) && d.SerwisantId == technicianId)
                .ToList();
        }
    }
    
    private async Task OpenAddAvailabilityDialog()
    {
        Dictionary<int, string> availableTechnicians;
        
        if (_isSerwisant && _currentSerwisantId.HasValue)
        {
            availableTechnicians = new Dictionary<int, string>();
            if (_technicians.TryGetValue(_currentSerwisantId.Value, out var name))
            {
                availableTechnicians[_currentSerwisantId.Value] = name;
            }
        }
        else
        {
            availableTechnicians = new Dictionary<int, string>();
            foreach (var serwisant in _allSerwisants)
            {
                if (serwisant.Uzytkownik != null)
                {
                    var imieNazwisko = $"{serwisant.Uzytkownik.Imie} {serwisant.Uzytkownik.Nazwisko}".Trim();
                    availableTechnicians[serwisant.SerwisantId] = imieNazwisko;
                }
            }
        }
    
        var parameters = new DialogParameters
        {
            ["TechnicianDict"] = availableTechnicians
        };
    
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true
        };

        var dialog = await DialogService.ShowAsync<AddAvailabilityDialog>("Dodaj nową dostępność", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var newAvailability = (DostepnoscSerwisantaDto)result.Data;
        
            var apiResult = await ApiService.DostepnosciSerwisantaRepo.DostepnoscSerwisantaPost(newAvailability);
        
            if (apiResult.Data != null)
            {
                Snackbar.Add("Dostępność została dodana pomyślnie", Severity.Success);
                await LoadAvailabilities();
            }
            else
            {
                Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
            }
        }
    }
    
    private async Task CellClicked(DateTime DateTimeOffset)
    {
        var dzien = DateTimeOffset.Date;
        var godzina = DateTimeOffset.TimeOfDay;
    
        var validSerwisantIds = _allSerwisants.Select(s => s.SerwisantId).ToHashSet();
        
        var dostepniSerwisanci = _wszystkieDostepnosci
            .Where(d => 
                d.DataOd <= DateTimeOffset && 
                d.DataDo >= DateTimeOffset && 
                d.CzyDostepny &&
                validSerwisantIds.Contains(d.SerwisantId))
            .Select(d => {
                if (_technicians.TryGetValue(d.SerwisantId, out var name))
                    return name;
                else if (d.Serwisant?.Uzytkownik != null)
                    return $"{d.Serwisant.Uzytkownik.Imie} {d.Serwisant.Uzytkownik.Nazwisko}".Trim();
                else
                    return $"Serwisant ID: {d.SerwisantId}";
            })
            .ToList();
        
        var niedostepniSerwisanci = _wszystkieDostepnosci
            .Where(d => 
                d.DataOd <= DateTimeOffset && 
                d.DataDo >= DateTimeOffset && 
                !d.CzyDostepny &&
                validSerwisantIds.Contains(d.SerwisantId))
            .Select(d => {
                if (_technicians.TryGetValue(d.SerwisantId, out var name))
                    return name;
                else if (d.Serwisant?.Uzytkownik != null)
                    return $"{d.Serwisant.Uzytkownik.Imie} {d.Serwisant.Uzytkownik.Nazwisko}".Trim();
                else
                    return $"Serwisant ID: {d.SerwisantId}";
            })
            .ToList();

        var parameters = new DialogParameters
        {
            ["Date"] = DateTimeOffset,
            ["AvailableTechnicians"] = dostepniSerwisanci,
            ["UnavailableTechnicians"] = niedostepniSerwisanci
        };
    
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true
        };
    
        var dialog = await DialogService.ShowAsync<TechnicianAvailabilityDialog>(
            $"Dostępność na {dzien:dd.MM.yyyy}, {godzina:hh\\:mm}", 
            parameters, 
            options);
        
        var result = await dialog.Result;
    
        if (!result.Canceled && result.Data is string action)
        {
            if (action == "add")
            {
                await OpenAddAvailabilityDialog();
            }
        }
    }
    
    private async Task ItemClicked(CalendarItem item)
    {
        if (!_eventToDostepnosc.TryGetValue(item, out var dostepnosc))
            return;

        string imieNazwisko = "Nieznany";
        if (_technicians.TryGetValue(dostepnosc.SerwisantId, out var techName))
        {
            imieNazwisko = techName;
        }
        
        var statusText = dostepnosc.CzyDostepny ? "Dostępny" : "Niedostępny";

        var parameters = new DialogParameters
        {
            ["Dostepnosc"] = dostepnosc,
            ["SerwisantName"] = imieNazwisko,
            ["StatusText"] = statusText,
            ["AllowEditing"] = isAdmin
        };
    
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true
        };
    
        var dialog = await DialogService.ShowAsync<AvailabilityDetailsDialog>("Szczegóły dostępności", parameters, options);
        var result = await dialog.Result;
    
        if (!result.Canceled && result.Data is string action)
        {
            if (action == "delete")
            {
                bool? confirm = await DialogService.ShowMessageBox(
                    "Usuń dostępność",
                    $"Czy na pewno chcesz usunąć dostępność serwisanta {imieNazwisko}?",
                    yesText: "Tak", noText: "Nie");
            
                if (confirm == true)
                {
                    var apiResult = await ApiService.DostepnosciSerwisantaRepo.DostepnoscSerwisantaDelete(dostepnosc.DostepnoscSerwisantaId);
                    if (apiResult.Data)
                    {
                        Snackbar.Add("Dostępność została usunięta", Severity.Success);
                        await LoadAvailabilities();
                    }
                    else
                    {
                        Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
                    }
                }
            }
            else if (action == "edit")
            {
                var editParameters = new DialogParameters
                {
                    ["Dostepnosc"] = dostepnosc,
                    ["TechnicianDict"] = _technicians
                };

                var editDialog = await DialogService.ShowAsync<EditAvailabilityDialog>("Edytuj dostępność", editParameters, options);
                var editResult = await editDialog.Result;

                if (!editResult.Canceled && editResult.Data is DostepnoscSerwisantaDto updatedAvailability)
                {
                    var apiResult = await ApiService.DostepnosciSerwisantaRepo.DostepnoscSerwisantaPut(dostepnosc.DostepnoscSerwisantaId, updatedAvailability);

                    if (apiResult.Data != null)
                    {
                        Snackbar.Add("Dostępność została zaktualizowana pomyślnie", Severity.Success);
                        await LoadAvailabilities(); 
                    }
                    else
                    {
                        Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
                    }
                }
            }
        }
    }
}