@page "/avability"
@using ApiService
@using ApiService.Models
@using serwis_web.Components
@using Color = MudBlazor.Color
@inject IDialogService DialogService
@inject ApiService ApiService
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<style>
    .mud-cal-clickable{
        cursor: pointer!important;    
    }
    .container {
        margin: 0;
        padding: 0;
        min-width: 100%;
    }

    .header-card {
        border: none;
        box-shadow: none;
        background-color: inherit;
        margin: 0 0 25px 0;
        padding: 0;
    }

    .header-content {
        border: none;
        box-shadow: none;
        background-color: inherit;
        margin: 0;
        padding: 0 40px 0 0;
        display: flex;
        width: 100%;
        justify-content: space-between;
    }

    .header-title {
        font-size: 30px;
        font-weight: 600;
    }

    .new-button {
        background-color: #4880FF;
        border: none;
        border-radius: 10px;
        padding: 12px 50px;
        color: #FFFFFF;
        font-size: 16px;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
        text-transform: none;
    }

    .new-button:hover {
        background-color: #336ff5;
    }

    .calendar {
        padding: 15px;
        border-radius: 15px;
        box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
    }
    
    .legend {
        display: flex;
        gap: 20px;
        margin: 15px 0;
        padding: 10px;
        border-radius: 10px;
        background-color: #f9f9f9;
    }
    
    .legend-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
    }
    
    .legend-available {
        width: 12px;
        height: 12px;
        background-color: #4CAF50;
        border-radius: 50%;
    }
    
    .legend-unavailable {
        width: 12px;
        height: 12px;
        background-color: #F44336;
        border-radius: 50%;
    }
    
    .technician-filter {
        margin-bottom: 15px;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }
    
    .filter-chip {
        cursor: pointer;
    }

    @@media (max-width: 1280px) {
        .header-content {
            padding: 0;
        }
    }

    @@media (max-width: 1024px) {
        .header-content {
            flex-direction: column;
        }
        .new-button {
            width: 100%;
            margin-top: 10px;
        }
    }
</style>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="container">
    <MudCard Class="header-card">
        <MudCardHeader Class="header-content">
            <MudText Class="header-title">Lista dostępności serwisantów</MudText>
            <MudButton Class="new-button" @onclick="OpenAddAvailabilityDialog">
                Nowa dostępność
            </MudButton>
        </MudCardHeader>
    </MudCard>
    
    @*<div class="legend">
        <div class="legend-item">
            <div class="legend-available"></div>
            <span>Dostępny</span>
        </div>
        <div class="legend-item">
            <div class="legend-unavailable"></div>
            <span>Niedostępny</span>
        </div>
    </div>*@
    
    <div class="technician-filter">
        <MudChip 
            T="string"
            Color="@(selectedTechnicianId == null ? Color.Primary : Color.Default)"
            OnClick="@(() => FilterByTechnician(null))"
            Class="filter-chip">
            Wszyscy
        </MudChip>
        @foreach (var technician in _technicians)
        {
            <MudChip T="string"
                Color="@(selectedTechnicianId == technician.Key ? Color.Primary : Color.Default)"
                OnClick="@(() => FilterByTechnician(technician.Key))"
                Class="filter-chip">
                @technician.Value
            </MudChip>
        }
    </div>

    <MudCalendar Items="_filteredEvents"
                 CellClicked="CellClicked"
                 ItemClicked="ItemClicked"
                 DayTimeInterval="CalendarTimeInterval.Minutes30"
                 Bordered="false"
                 Dense="false"
                 Class="calendar" />
</MudContainer>

@code {
    private bool isAdmin = true;
    private List<CalendarItem> _events = new();
    private List<CalendarItem> _filteredEvents = new();
    private Dictionary<CalendarItem, DostepnoscSerwisanta> _eventToDostepnosc = new();
    private List<DostepnoscSerwisanta> _wszystkieDostepnosci = new();
    private Dictionary<int, string> _technicians = new();
    private int? selectedTechnicianId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailabilities();
    }

    private async Task LoadAvailabilities()
    {
        _events.Clear();
        _filteredEvents.Clear();
        _eventToDostepnosc.Clear();
        _wszystkieDostepnosci.Clear();
        _technicians.Clear();
        
        var result = await ApiService.DostepnosciSerwisantaRepo.DostepnosciSerwisantaGet();
        if (result.Data is not null)
        {
            _wszystkieDostepnosci = result.Data;

            foreach (var d in result.Data)
            {
                var imieNazwisko = $"{d.Serwisant.Uzytkownik.Imie} {d.Serwisant.Uzytkownik.Nazwisko}".Trim();
                
                if (!_technicians.ContainsKey(d.SerwisantId))
                {
                    _technicians[d.SerwisantId] = imieNazwisko;
                }
                
                var item = new CalendarItem
                {
                    Start = d.DataOd,
                    End = d.DataDo,
                    //Text = $"{imieNazwisko} ({(d.CzyDostepny ? "Dostępny" : "Niedostępny")})",
                    Text = $"{imieNazwisko}",
                };
                _events.Add(item);
                _eventToDostepnosc[item] = d;
            }
            
            _filteredEvents = new List<CalendarItem>(_events);
        }
    }

    private void FilterByTechnician(int? technicianId)
    {
        selectedTechnicianId = technicianId;
        
        if (technicianId == null)
        {
            _filteredEvents = new List<CalendarItem>(_events);
        }
        else
        {
            _filteredEvents = _events
                .Where(e => _eventToDostepnosc.TryGetValue(e, out var d) && d.SerwisantId == technicianId)
                .ToList();
        }
    }
    private async Task OpenAddAvailabilityDialog()
    {
        var parameters = new DialogParameters
        {
            ["TechnicianDict"] = _technicians
        };
    
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true
        };

        var dialog = await DialogService.ShowAsync<AddAvailabilityDialog>("Dodaj nową dostępność", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var newAvailability = (DostepnoscSerwisantaDto)result.Data;
        
            var apiResult = await ApiService.DostepnosciSerwisantaRepo.DostepnoscSerwisantaPost(newAvailability);
        
            if (apiResult.Data != null)
            {
                Snackbar.Add("Dostępność została dodana pomyślnie", Severity.Success);
                await LoadAvailabilities(); // Reload all data
            }
            else
            {
                Snackbar.Add($"Błąd: {apiResult.Error}", Severity.Error);
            }
        }
    }
    private async Task CellClicked(DateTime dateTime)
    {
        var dzien = dateTime.Date;
        var godzina = dateTime.TimeOfDay;
    
        var dostepniSerwisanci = _wszystkieDostepnosci
            .Where(d => 
                d.DataOd <= dateTime && 
                d.DataDo >= dateTime && 
                d.CzyDostepny)
            .Select(d => $"{d.Serwisant.Uzytkownik.Imie} {d.Serwisant.Uzytkownik.Nazwisko}".Trim())
            .ToList();
        
        var niedostepniSerwisanci = _wszystkieDostepnosci
            .Where(d => 
                d.DataOd <= dateTime && 
                d.DataDo >= dateTime && 
                !d.CzyDostepny)
            .Select(d => $"{d.Serwisant.Uzytkownik.Imie} {d.Serwisant.Uzytkownik.Nazwisko}".Trim())
            .ToList();

        var parameters = new DialogParameters
        {
            ["Date"] = dateTime,
            ["AvailableTechnicians"] = dostepniSerwisanci,
            ["UnavailableTechnicians"] = niedostepniSerwisanci
        };
    
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true
        };
    
        var dialog = await DialogService.ShowAsync<TechnicianAvailabilityDialog>(
            $"Dostępność na {dzien:dd.MM.yyyy}, {godzina:hh\\:mm}", 
            parameters, 
            options);
        
        var result = await dialog.Result;
    
        if (!result.Canceled && result.Data is string action)
        {
            if (action == "add")
            {
                await OpenAddAvailabilityDialog();
            }
        }
    }
    private async Task ItemClicked(CalendarItem item)
    {
        if (!_eventToDostepnosc.TryGetValue(item, out var dostepnosc))
            return;

        var imieNazwisko = $"{dostepnosc.Serwisant.Uzytkownik.Imie} {dostepnosc.Serwisant.Uzytkownik.Nazwisko}".Trim();
        var statusText = dostepnosc.CzyDostepny ? "Dostępny" : "Niedostępny";

        var parameters = new DialogParameters
        {
            ["Dostepnosc"] = dostepnosc,
            ["SerwisantName"] = imieNazwisko,
            ["StatusText"] = statusText,
            ["AllowEditing"] = isAdmin
        };
    
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            CloseButton = true
        };
    
        var dialog = await DialogService.ShowAsync<AvailabilityDetailsDialog>($"Szczegóły dostępności", parameters, options);
        var result = await dialog.Result;
    
        if (!result.Canceled && result.Data is string action)
        {
            if (action == "delete")
            {
                bool? confirm = await DialogService.ShowMessageBox(
                    "Usuń dostępność",
                    $"Czy na pewno chcesz usunąć dostępność serwisanta {imieNazwisko}?",
                    yesText: "Tak", noText: "Nie");
            
                if (confirm == true)
                {
                    var apiResult = await ApiService.DostepnosciSerwisantaRepo.DostepnoscSerwisantaDelete(dostepnosc.DostepnoscSerwisantaId);
                    if (apiResult.Data)
                    {
                        Snackbar.Add("Dostępność została usunięta", Severity.Success);
                        await LoadAvailabilities();
                    }
                    else
                    {
                        Snackbar.Add($"Błąd: {apiResult.Error}", Severity.Error);
                    }
                }
            }
            else if (action == "edit")
            {
                var editParameters = new DialogParameters
                {
                    ["Dostepnosc"] = dostepnosc,
                    ["TechnicianDict"] = _technicians
                };

                var editDialog = await DialogService.ShowAsync<EditAvailabilityDialog>("Edytuj dostępność", editParameters, options);
                var editResult = await editDialog.Result;

                if (!editResult.Canceled && editResult.Data is DostepnoscSerwisantaDto updatedAvailability)
                {
                    var apiResult = await ApiService.DostepnosciSerwisantaRepo.DostepnoscSerwisantaPut(dostepnosc.DostepnoscSerwisantaId, updatedAvailability);

                    if (apiResult.Data != null)
                    {
                        Snackbar.Add("Dostępność została zaktualizowana pomyślnie", Severity.Success);
                        await LoadAvailabilities(); 
                    }
                    else
                    {
                        Snackbar.Add($"Błąd: {apiResult.Error}", Severity.Error);
                    }
                }
            }
        }
    }
}