@page "/statistics"
@rendermode InteractiveServer
@inject ApiService.ApiService ApiService
@using ApiService.Models
@using System.Linq
@using System.Collections.Generic
@using Color = MudBlazor.Color

<PageTitle>Statystyki</PageTitle>

<div class="services-container">
    <h2>Statystyki</h2>

    <div class="service-back">
        @if (_isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <p>Ładowanie danych...</p>
        }
        else
        {
            <div class="charts-section">
                <div class="chart-container">
                    <h3>Zamówienia według statusu</h3>
                    <MudPaper Elevation="0" Class="pa-4 chart-paper">
                        <MudChart ChartType="ChartType.Pie"
                                  Width="300px"
                                  Height="300px"
                                  InputData="@_orderStatusData"
                                  InputLabels="@_orderStatusLabels" />
                    </MudPaper>
                </div>

                <div class="chart-container">
                    <h3>Obciążenie serwisantów</h3>
                    <MudPaper Elevation="0" Class="pa-4 chart-paper">
                        <MudChart ChartType="ChartType.Bar"
                                  Width="500px"
                                  Height="300px"
                                  ChartSeries="@_technicianWorkloadSeries"
                                  XAxisLabels="@_technicianNames"/>
                    </MudPaper>
                </div>
            </div>

            <div class="chart-full-width">
                <h3>Zamówienia w czasie</h3>
                <MudPaper Elevation="0" Class="pa-4 chart-paper">
                    <MudChart ChartType="ChartType.Line"
                              ChartSeries="@_monthlySeries"
                              XAxisLabels="@_monthLabels"
                              Width="100%"
                              Height="350px"/>
                </MudPaper>
            </div>

            <div class="stats-cards">
                @foreach (var card in _statusCards)
                {
                    <MudCard Elevation="2" Class="@($"stat-card {card.CssClass}")">
                        <MudCardContent>
                            <div class="stat-value">@card.Count</div>
                            <div class="stat-label">@card.Label</div>
                        </MudCardContent>
                    </MudCard>
                }
            </div>
        }
    </div>
</div>

@code {
    private double[] _orderStatusData = Array.Empty<double>();
    private string[] _orderStatusLabels = Array.Empty<string>();
    private List<ChartSeries> _technicianWorkloadSeries = new();
    private string[] _technicianNames = Array.Empty<string>();
    private List<ChartSeries> _monthlySeries = new();
    private string[] _monthLabels = { "Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru" };
    private List<StatusCard> _statusCards = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _isLoading = true;

            await Task.WhenAll(
                LoadOrderStatusData(),
                LoadTechnicianWorkloadData(),
                LoadMonthlyOrderData()
            );
        }
        catch (Exception ex)
        {
            System.Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadOrderStatusData()
    {
        var statusesResult = await ApiService.StatusyRepo.StatusyGet();
        var ordersResult = await ApiService.ZamowieniaRepo.ZamowieniaGet();

        if (statusesResult.Data != null && ordersResult.Data != null)
        {
            var statusGroups = ordersResult.Data
                .GroupBy(z => z.StatusId)
                .Select(g => new { StatusId = g.Key, Count = g.Count() })
                .ToList();

            var statusLabels = new List<string>();
            var statusData = new List<double>();
            var statusCards = new List<StatusCard>();

            foreach (var status in statusesResult.Data)
            {
                var count = statusGroups.FirstOrDefault(g => g.StatusId == status.StatusId)?.Count ?? 0;
                
                statusLabels.Add(status.Nazwa);
                statusData.Add(count);
                
                string cssClass = status.Nazwa switch
                {
                    "Nowe" => "status-new",
                    "W trakcie realizacji" => "status-realization",
                    "Oczekujące" => "status-waiting",
                    "Zakończone" => "status-finished",
                    "Anulowane" => "status-canceled",
                    _ => "status-default"
                };

                statusCards.Add(new StatusCard
                {
                    Label = status.Nazwa,
                    Count = count,
                    CssClass = cssClass
                });
            }

            _orderStatusLabels = statusLabels.ToArray();
            _orderStatusData = statusData.ToArray();
            _statusCards = statusCards;
        }
    }

    private async Task LoadTechnicianWorkloadData()
    {
        var serwisanciResult = await ApiService.SerwisanciRepo.SerwisanciGet();
        var ordersResult = await ApiService.ZamowieniaRepo.ZamowieniaGet();

        if (serwisanciResult.Data != null && ordersResult.Data != null)
        {
            var technicianWorkload = serwisanciResult.Data
                .Take(5) 
                .Select(s => {
                    var assignedOrders = ordersResult.Data.Count(order => order.SerwisantId == s.SerwisantId);
                    return new { 
                        Name = $"{s.Uzytkownik?.Imie?.FirstOrDefault() ?? '?'}.{s.Uzytkownik?.Nazwisko ?? "?"}",
                        AssignedCount = assignedOrders 
                    };
                })
                .OrderByDescending(t => t.AssignedCount)
                .ToList();

            _technicianNames = technicianWorkload.Select(t => t.Name).ToArray();
            _technicianWorkloadSeries = new List<ChartSeries>
            {
                new ChartSeries() { 
                    Name = "Przypisane zamówienia", 
                    Data = technicianWorkload.Select(t => (double)t.AssignedCount).ToArray(), 
                    ShowDataMarkers = true 
                }
            };
        }
    }

    private async Task LoadMonthlyOrderData()
    {
        var ordersResult = await ApiService.ZamowieniaRepo.ZamowieniaGet();

        if (ordersResult.Data != null)
        {
            var currentYear = DateTime.Now.Year;
            var monthlyNewOrders = new double[12];
            var monthlyCompletedOrders = new double[12];

            foreach (var order in ordersResult.Data)
            {
                if (order.DataDodania.Year == currentYear)
                {
                    int month = order.DataDodania.Month - 1; // 0-based index for array
                    monthlyNewOrders[month]++;
                }

                if (order.Status?.Nazwa == "Zakończone" && order.DataAktualizacji?.Year == currentYear)
                {
                    int month = order.DataAktualizacji.Value.Month - 1;
                    monthlyCompletedOrders[month]++;
                }
            }

            _monthlySeries = new List<ChartSeries>
            {
                new ChartSeries() { 
                    Name = "Nowe zamówienia", 
                    Data = monthlyNewOrders, 
                    ShowDataMarkers = true 
                },
                new ChartSeries() { 
                    Name = "Zakończone", 
                    Data = monthlyCompletedOrders, 
                    ShowDataMarkers = true 
                }
            };
        }
    }

    private class StatusCard
    {
        public string Label { get; set; } = string.Empty;
        public double Count { get; set; }
        public string CssClass { get; set; } = "status-default";
    }
}