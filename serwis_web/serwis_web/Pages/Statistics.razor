@page "/statistics"
@rendermode InteractiveServer
@inject ApiService.ApiService ApiService
@using System.Linq
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using serwis_web.Components

<PageTitle>Statystyki</PageTitle>

<div>
    <div>
        <MudCardHeader Class="statistics-header">
            <MudText Class="statistics-header-tittle">Statystyki serwisu</MudText>
        </MudCardHeader>
        
        @if (_isLoading)
        {
            <MudPaper Class="d-flex justify-center flex-column align-center py-16 rounded-lg" Elevation="0">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
                <MudText Typo="Typo.body1" Class="mt-4">Ładowanie danych statystycznych...</MudText>
            </MudPaper>
        }
        else
        {
            <!-- Karty statusów -->
            <MudGrid Spacing="3" Class="mb-6">
                @foreach (var card in _statusCards)
                {
                    <MudItem xs="12" sm="6" md="4" lg="2">
                        <MudPaper Class="pa-6 d-flex flex-column align-center mud-theme-primary" 
                                 Style="border-radius: 12px; transition: all 0.3s;"
                                 Elevation="2">
                            <MudText Typo="Typo.h3" Style="color: #FFFFFF; font-weight: 700;">@card.Count</MudText>
                            <MudText Typo="Typo.subtitle1" Style="font-weight: 500;" Class="mt-2">@card.Label</MudText>
                            <MudDivider Style="@($"width: 40px; height: 3px; margin-top: 8px; background: {GetStatusColor(card.Label)}")" />
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>

            <!-- Sekcja wykresów -->
            <MudGrid Spacing="4">
                <MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg overflow-hidden h-100">
                        <MudCardHeader Class="pb-0">
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.PieChart" Class="mr-2" /> Zamówienia według statusu
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="d-flex justify-center">
                            <MudChart ChartType="ChartType.Pie" 
                                     Width="90%" 
                                     Height="300px" 
                                     InputData="@_orderStatusData" 
                                     InputLabels="@_orderStatusLabels" 
                                     LegendPosition="Position.Bottom" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                @**<MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg overflow-hidden h-100">
                        <MudCardHeader Class="pb-0">
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.BarChart" Class="mr-2" /> Obciążenie serwisantów
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudChart ChartType="ChartType.Bar" 
                                      Width="100%" 
                                      Height="300px" 
                                      ChartSeries="@_technicianWorkloadSeries" 
                                      XAxisLabels="@_technicianNames" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>**@
                
                <MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg overflow-hidden h-100">
                        <MudCardHeader Class="pb-0">
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.AccessTime" Class="mr-2" /> Średni czas realizacji zamówień
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="d-flex justify-center">
                            <MudChart ChartType="ChartType.Donut" 
                                      Width="90%" 
                                      Height="300px" 
                                      InputData="@_avgTimeData" 
                                      InputLabels="@_avgTimeLabels" 
                                      LegendPosition="Position.Right" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12">
                    <MudCard Elevation="3" Class="rounded-lg overflow-hidden">
                        <MudCardHeader Class="pb-0">
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.Timeline" Class="mr-2" /> Zamówienia w czasie
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudChart ChartType="ChartType.Line" 
                                     ChartSeries="@_monthlySeries" 
                                     XAxisLabels="@_monthLabels" 
                                     Width="100%" 
                                     Height="350px" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>



                @**<MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg overflow-hidden h-100">
                        <MudCardHeader Class="pb-0">
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6" Color="Color.Primary">
                                    <MudIcon Icon="@Icons.Material.Filled.DateRange" Class="mr-2" /> Zamówienia według dnia tygodnia
                                </MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudChart ChartType="ChartType.Bar" 
                                     Width="100%" 
                                     Height="300px" 
                                     ChartSeries="@_weekdaySeries" 
                                     XAxisLabels="@_weekdayLabels" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>**@
            </MudGrid>
        }
    </div>
</div>

<style>
    .mud-card {
        transition: all 0.3s;
    }
    
    .mud-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 15px rgba(0,0,0,0.1);
    }
    
    .mud-chart-legend {
        margin-top: 10px;
    }
    
    .mud-chart-serie {
        border-radius: 5px;
    }
    .statistics-header {
        margin: 0 0 20px 0;
        padding: 0;
    }

    .statistics-header-tittle {
        font-size: 30px;
        font-weight: 600;
    }
</style>

<div class="help-button-container">
    <AccessibilityWidget/>
</div>

@code {
    private double[] _orderStatusData = Array.Empty<double>();
    private string[] _orderStatusLabels = Array.Empty<string>();
    private List<ChartSeries> _technicianWorkloadSeries = new();
    private string[] _technicianNames = Array.Empty<string>();
    private List<ChartSeries> _monthlySeries = new();
    private string[] _monthLabels = { "Sty", "Lut", "Mar", "Kwi", "Maj", "Cze", "Lip", "Sie", "Wrz", "Paź", "Lis", "Gru" };
    private List<StatusCard> _statusCards = new();
    private bool _isLoading = true;
    
    private double[] _avgTimeData = { 3.5, 5.2, 7.1, 12.4 };
    private string[] _avgTimeLabels = { "Naprawa sprzętu", "Konserwacja", "Instalacja", "Diagnostyka" };
    
    private List<ChartSeries> _weekdaySeries = new();
    private string[] _weekdayLabels = { "Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek", "Sobota", "Niedziela" };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            _isLoading = true;

            await Task.WhenAll(
                LoadOrderStatusData(),
                LoadTechnicianWorkloadData(),
                LoadMonthlyOrderData(),
                LoadWeekdayOrderData()
            );
        }
        catch (Exception ex)
        {
            System.Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadOrderStatusData()
    {
        var statusesResult = await ApiService.StatusyRepo.StatusyGet();
        var ordersResult = await ApiService.ZamowieniaRepo.ZamowieniaGet();

        if (statusesResult.Data != null && ordersResult.Data != null)
        {
            var statusGroups = ordersResult.Data
                .GroupBy(z => z.StatusId)
                .Select(g => new { StatusId = g.Key, Count = g.Count() })
                .ToList();

            var statusLabels = new List<string>();
            var statusData = new List<double>();
            var statusCards = new List<StatusCard>();

            foreach (var status in statusesResult.Data)
            {
                var count = statusGroups.FirstOrDefault(g => g.StatusId == status.StatusId)?.Count ?? 0;
                
                statusLabels.Add(status.Nazwa);
                statusData.Add(count);
                
                statusCards.Add(new StatusCard
                {
                    Label = status.Nazwa,
                    Count = count
                });
            }

            _orderStatusLabels = statusLabels.ToArray();
            _orderStatusData = statusData.ToArray();
            _statusCards = statusCards;
        }
    }

    private async Task LoadTechnicianWorkloadData()
    {
        var serwisanciResult = await ApiService.SerwisanciRepo.SerwisanciGet();
        var ordersResult = await ApiService.ZamowieniaRepo.ZamowieniaGet();

        if (serwisanciResult.Data != null && ordersResult.Data != null)
        {
            var technicianWorkload = serwisanciResult.Data
                .Take(5) 
                .Select(s => {
                    var assignedOrders = ordersResult.Data.Count(order => order.SerwisantId == s.SerwisantId);
                    return new { 
                        Name = $"{s.Uzytkownik?.Imie?.FirstOrDefault() ?? '?'}.{s.Uzytkownik?.Nazwisko ?? "?"}",
                        AssignedCount = assignedOrders 
                    };
                })
                .OrderByDescending(t => t.AssignedCount)
                .ToList();

            _technicianNames = technicianWorkload.Select(t => t.Name).ToArray();
            _technicianWorkloadSeries = new List<ChartSeries>
            {
                new ChartSeries() { 
                    Name = "Przypisane zamówienia", 
                    Data = technicianWorkload.Select(t => (double)t.AssignedCount).ToArray(), 
                    ShowDataMarkers = true 
                }
            };
        }
    }

    private async Task LoadMonthlyOrderData()
    {
        var ordersResult = await ApiService.ZamowieniaRepo.ZamowieniaGet();

        if (ordersResult.Data != null)
        {
            var currentYear = DateTimeOffset.Now.Year;
            var monthlyNewOrders = new double[12];
            var monthlyCompletedOrders = new double[12];

            foreach (var order in ordersResult.Data)
            {
                if (order.DataDodania.Year == currentYear)
                {
                    int month = order.DataDodania.Month - 1;
                    monthlyNewOrders[month]++;
                }

                if (order.Status?.Nazwa == "Zakończone" && order.DataAktualizacji?.Year == currentYear)
                {
                    int month = order.DataAktualizacji.Value.Month - 1;
                    monthlyCompletedOrders[month]++;
                }
            }

            _monthlySeries = new List<ChartSeries>
            {
                new ChartSeries() { 
                    Name = "Nowe zamówienia", 
                    Data = monthlyNewOrders, 
                    ShowDataMarkers = true 
                },
                new ChartSeries() { 
                    Name = "Zakończone", 
                    Data = monthlyCompletedOrders, 
                    ShowDataMarkers = true 
                }
            };
        }
    }

    private async Task LoadWeekdayOrderData()
    {
        var ordersResult = await ApiService.ZamowieniaRepo.ZamowieniaGet();

        if (ordersResult.Data != null)
        {
            var weekdayNewCount = new double[7];
            var weekdayCompletedCount = new double[7];

            foreach (var order in ordersResult.Data)
            {
                int dayOfWeekNew = ((int)order.DataDodania.DayOfWeek + 6) % 7;
                weekdayNewCount[dayOfWeekNew]++;

                if (order.Status?.Nazwa == "Zakończone" && order.DataAktualizacji.HasValue)
                {
                    int dayOfWeekCompleted = ((int)order.DataAktualizacji.Value.DayOfWeek + 6) % 7;
                    weekdayCompletedCount[dayOfWeekCompleted]++;
                }
            }

            _weekdaySeries = new List<ChartSeries>
            {
                new ChartSeries() {
                    Name = "Nowe zamówienia",
                    Data = weekdayNewCount,
                    ShowDataMarkers = true
                },
                new ChartSeries() {
                    Name = "Zakończone zamówienia",
                    Data = weekdayCompletedCount,
                    ShowDataMarkers = true
                }
            };
        }
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Nowe" => "#3d5afe",
            "W trakcie realizacji" => "#00b0ff",
            "Oczekujące" => "#ffc400",
            "Zakończone" => "#00c853",
            "Anulowane" => "#ff5252",
            _ => "#9e9e9e"
        };
    }

    private class StatusCard
    {
        public string Label { get; set; } = string.Empty;
        public double Count { get; set; }
    }
}