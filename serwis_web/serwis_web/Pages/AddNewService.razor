@page "/services/{ServiceId:int}"
@using ApiService.Models
@using Color = MudBlazor.Color
@rendermode InteractiveServer
@inject ApiService.ApiService ApiService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using System.ComponentModel.DataAnnotations

<style>
	.services-container {
	display: flex;
	flex-direction: column;
	gap: 23px;
	padding: 0;
	margin: 0;
	padding-left: 5px;
	padding-right: 20px;
	}

	.services-container h2 {
	font-size: 30px;
	font-weight: 600;
	margin: 0;
	padding: 0;
	}

	.service-back {
	display: flex;
	flex-direction: column;
	gap: 25px;
	width: 100%;
	padding: 30px;
	background-color: #FFFFFF;
	border-radius: 10px;
	box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
	margin: 0;
	}

	.service-tab {
	display: flex;
	width: 100%;
	gap: 100px;
	padding: 0;
	margin: 0;
	}

	.service-col {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 12px;
	}

	.service-col h4 {
	font-size: 16px;
	font-weight: 500;
	padding: 0;
	margin: 0;
	color: #606060;
	}

	.service-row {
	display: flex;
	align-items: center;
	gap: 40px;
	width: 100%;
	}

	.single-col {
	display: flex;
	flex-direction: column;
	gap: 10px;
	width: 100%;
	}

	.form-textarea, .form-input, select, option {
	background-color: #F5F6FA;
	border: solid 1px #D5D5D5;
	width: 100%;
	padding: 15px;
	border-radius: 5px;
	color: #A6A6A6;
	font-size: 14px;
	margin-bottom: 10px;
	}

	.form-textarea {
	height: 287px;
	}

	.form-input, select {
	height: 50px;
	}

	.service-btn {
	background-color: #4880FF;
	border: none;
	border-radius: 10px;
	padding: 15px;
	color: #FFFFFF;
	font-size: 16px;
	transition: all 0.3s ease-in-out;
	cursor: pointer;
	width: 100%;
	margin-top: 25px;
	}

	.service-btn:hover {
	background-color: #336ff5;
	}

	@@media (max-width: 1366px) {
	.service-tab {
	gap: 80px;
	}
	}


	@@media (max-width: 1280px) {
	.services-container {
	gap: 30px;
	padding-right: 15px;
	}

	.service-row {
	gap: 40px;
	}

	.service-tab {
	flex-direction: column;
	gap: 10px;
	}

	.form-textarea, .form-input, select {
	margin-bottom: 15px;
	}

	.single-col {
	gap: 8px;
	}
	}

	@@media (max-width: 768px) {
	.services-container {
	padding-right: 5px;
	padding-top: 10px;
	}

	.service-row {
	flex-direction: column;
	gap: 5px;
	}
	}
</style>

<PageTitle>Nowe zlecenie</PageTitle>

<div class="services-container">
	<h2>Dodaj @((_typSerwisu?.Nazwa) ?? "Nowe zlecenie")</h2>

	<div class="service-back">
		@if (_isLoading)
		{
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
			<p>Ładowanie...</p>
		}
		else
		{
			<EditForm Model="@_newOrder" OnValidSubmit="SubmitNewOrder">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<div class="service-tab">
					<div class="service-col">
						<Textarea @bind-Value="_newOrder.Opis" PlaceHolder="Opisz swój problem" class="form-textarea" required/>

						<h4>Priorytet</h4>
						<select @bind="_selectedPriorytetId">
							@foreach (var priorytet in _priorytets)
							{
								<option value="@priorytet.PriorytetId">@priorytet.Nazwa</option>
							}
						</select>

						<h4>Planowana Data Realizacji</h4>
						<InputDate @bind-Value="_newOrder.PlanowanaDataRealizacjiOd" placeholder="" class="form-input" required />
						<ValidationMessage For="@(() => _newOrder.PlanowanaDataRealizacjiOd)" />

						<h4>Planowana Data Zakończenia</h4>
						<InputDate @bind-Value="_newOrder.PlanowanaDataRealizacjiDo" placeholder="" class="form-input" required />
						<ValidationMessage For="@(() => _newOrder.PlanowanaDataRealizacjiDo)" />
					</div>

					<div class="service-col">
						<h4>Dostępni serwisanci</h4>
						<select @bind="_selectedSerwisantId">
							@foreach (var serwisant in _serwisants)
							{
								<option value="@serwisant.SerwisantId">@serwisant.Uzytkownik.Imie @serwisant.Uzytkownik.Nazwisko</option>
							}
						</select>

						<h4>Numer Telefonu</h4>
						<InputText @bind-Value="_userDataModel.NumerTelefonu" placeholder="Numer telefonu" class="form-input" required />
						<ValidationMessage For="@(() => _userDataModel.NumerTelefonu)" />

						<h4>Adres Email</h4>
						<InputText @bind-Value="_userDataModel.Email" placeholder="Adres email" class="form-input" type="email" required />
						<ValidationMessage For="@(() => _userDataModel.Email)" />

						<h4>Państwo</h4>
						<InputText @bind-Value="_userDataModel.Kraj" placeholder="Państwo" class="form-input" required />

						<div class="service-row">
							<div class="single-col">
								<h4>Ulica</h4>
								<InputText @bind-Value="_userDataModel.Ulica" placeholder="Ulica" class="form-input" required />
							</div>
							<div class="single-col">
								<h4>Numer Domu</h4>
								<InputNumber @bind-Value="_userDataModel.NumerDomu" placeholder="Numer domu" class="form-input" required />
							</div>
						</div>

						<div class="service-row">
							<div class="single-col">
								<h4>Miasto</h4>
								<InputText @bind-Value="_userDataModel.Miasto" placeholder="Miasto" class="form-input" required />
							</div>
							<div class="single-col">
								<h4>Kod pocztowy</h4>
								<InputText @bind-Value="_userDataModel.KodPocztowy" placeholder="Kod pocztowy" class="form-input" required />
							</div>
						</div>
					</div>
				</div>


				@if (!string.IsNullOrEmpty(_errorMessage))
				{
					<div class="error-message">
						@_errorMessage
					</div>
				}

				<button type="submit" class="service-btn" disabled="@_isSaving">
					@if (_isSaving)
					{
						<span>Zapisywanie...</span>
					}
					else
					{
						<span>Utwórz zlecenie</span>
					}
				</button>
			</EditForm>
		}
	</div>
</div>

@code {
	[Parameter]
	public int ServiceId { get; set; }


	private UserDataModel _userDataModel = new();
	private ZamowienieDto _newOrder = new();

	private string? _message;
	private string _messageClass = "success-message";
	private int _userId = 1; //  TODO: zmienić
	private Uzytkownik? _currentUser;
	private AdresEmail? _currentEmail;
	private NumerTelefonu? _currentPhone;
	private Adres? _currentAddress;
	private DicTypSerwisu _typSerwisu = new();

	private List<DicPriorytet> _priorytets = new();
	private int _selectedPriorytetId = 0;
	private List<Serwisant> _serwisants = new();
	private int _selectedSerwisantId = 0;

	private bool _isLoading = true;
	private bool _isSaving = false;
	private string _errorMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var userResult = await ApiService.UzytkownicyRepo.UzytkownikGet(_userId);

			if (userResult.Error != null)
			{
				ShowError("Błąd podczas ładowania danych użytkownika: " + userResult.Error);
				return;
			}

			_currentUser = userResult.Data;

			if (_currentUser == null)
			{
				ShowError("Nie znaleziono danych użytkownika");
				return;
			}

			if (_currentUser.AdresEmailId > 0)
			{
				var emailResult = await ApiService.AdresyEmailRepo.AdresEmailGet(_currentUser.AdresEmailId);
				_currentEmail = emailResult.Data;
			}

			if (_currentUser.NumerTelefonuId.HasValue && _currentUser.NumerTelefonuId.Value > 0)
			{
				var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuGet(_currentUser.NumerTelefonuId.Value);
				_currentPhone = phoneResult.Data;
			}

			if (_currentUser.Adres != null)
			{
				_currentAddress = _currentUser.Adres;
			}

			_userDataModel.Imie = _currentUser.Imie;
			_userDataModel.Nazwisko = _currentUser.Nazwisko;
			_userDataModel.Email = _currentEmail?.Email;
			_userDataModel.NumerTelefonu = _currentPhone?.Numer;

			if (_currentAddress != null)
			{
				_userDataModel.Ulica = _currentAddress.Ulica;
				_userDataModel.NumerDomu = _currentAddress.NumerDomu;
				_userDataModel.NumerMieszkania = _currentAddress.NumerMieszkania;
				_userDataModel.KodPocztowy = _currentAddress.KodPocztowy;
				_userDataModel.Miasto = _currentAddress.Miasto;
				_userDataModel.Kraj = _currentAddress.Kraj;
			}


			var rolesResult = await ApiService.PriotytetyRepo.PriotytetyGet();
			if (rolesResult.Data != null)
			{
				_priorytets = rolesResult.Data;
				if (_priorytets.Any())
				{
					_selectedPriorytetId = _priorytets.First().PriorytetId;
				}
			}

			var serwisantResult = await ApiService.SerwisanciRepo.SerwisanciGet();
			if (serwisantResult.Data != null)
			{
				_serwisants = serwisantResult.Data;
				if (_serwisants.Any())
				{
					_selectedSerwisantId = _serwisants.First().SerwisantId;
				}
			}

			var serwisResult = await ApiService.TypySerwisuRepo.TypSerwisuGet(ServiceId);
			if (serwisResult.Data != null)
			{
				_typSerwisu = serwisResult.Data;
			}
			else
			{
				_errorMessage = "Nie znaleziono serwisu";
			}

		}
		catch (Exception ex)
		{
			_errorMessage = $"Błąd podczas ładowania ról: {ex.Message}";
		}
		finally
		{
			_isLoading = false;
		}
	}

	private async Task SubmitNewOrder()
	{

		try
		{
			_isSaving = true;
			_errorMessage = string.Empty;

			var emailResult = await ApiService.AdresyEmailRepo.AdresEmailPost(new AdresEmailDto
			{
				Email = _userDataModel.Email
			});

			if (emailResult.Error != null || emailResult.Data == null)
			{
				_errorMessage = $"Błąd podczas tworzenia adresu email: {emailResult.Error}";
				return;
			}

			int? phoneId = null;
			if (!string.IsNullOrWhiteSpace(_userDataModel.NumerTelefonu))
			{
				var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuPost(new NumerTelefonuDto
				{
					Numer = _userDataModel.NumerTelefonu
				});

				if (phoneResult.Error != null || phoneResult.Data == null)
				{
					_errorMessage = $"Błąd podczas tworzenia numeru telefonu: {phoneResult.Error}";
					return;
				}

				phoneId = phoneResult.Data.NumerTelefonuId;
			}

			int? addressId = null;
			if (!string.IsNullOrWhiteSpace(_userDataModel.Ulica) || !string.IsNullOrWhiteSpace(_userDataModel.Miasto))
			{
				var adresResult = await ApiService.AdresyRepo.AdresPost(new ApiService.Models.AdresDto
				{
					Kraj = _userDataModel.Kraj,
					Ulica = _userDataModel.Ulica,
					NumerDomu = _userDataModel.NumerDomu,
					NumerMieszkania = _userDataModel.NumerMieszkania,
					Miasto = _userDataModel.Miasto,
					KodPocztowy = _userDataModel.KodPocztowy
				});

				if (adresResult.Error != null || adresResult.Data == null)
				{
					_errorMessage = $"Błąd podczas tworzenia adresu: {adresResult.Error}";
					return;
				}

				addressId = adresResult.Data.AdresId;
			}

			var createResult = await ApiService.ZamowieniaRepo.ZamowieniePost(new ZamowienieDto
			{
				PlanowanaDataRealizacjiOd = _newOrder.PlanowanaDataRealizacjiOd,
				PlanowanaDataRealizacjiDo = _newOrder.PlanowanaDataRealizacjiDo,
				KlientId = _userId,
				AdresEmailId = emailResult.Data.AdresEmailId,
				NumerTelefonuId = phoneId,
				AdresId = addressId,
				PriorytetId = _selectedPriorytetId,
				SerwisantId = _selectedSerwisantId,
				SerwisId = ServiceId,
				Opis = _newOrder.Opis,
			});

			if (createResult.Error != null)
			{
				_errorMessage = $"Błąd podczas tworzenia zlecenia: {createResult.Error}";
				return;
			}

			Snackbar.Add("Zlecenie zostało pomyślnie utworzone!", Severity.Success);
			NavigationManager.NavigateTo("/orders");
		}
		catch (Exception ex)
		{
			_errorMessage = $"Wystąpił nieoczekiwany błąd: {ex.Message}";
		}
		finally
		{
			_isSaving = false;
		}
	}

	private void ShowSuccess(string message)
	{
		_message = message;
		_messageClass = "success-message";
	}

	private void ShowError(string error)
	{
		_message = error;
		_messageClass = "error-message";
	}


	private class AdresDto
	{
		public string? Kraj { get; set; }
		public string? Ulica { get; set; }
		public string? NumerDomu { get; set; } // Changed from int to string to fix the error
		public string? Miasto { get; set; }
		public string? KodPocztowy { get; set; }
	}

	public class UserDataModel
	{
		public string? Imie { get; set; }
		public string? Nazwisko { get; set; }

		[EmailAddress(ErrorMessage = "Proszę podać poprawny adres email")]
		public string? Email { get; set; }

		[RegularExpression(@"^\d{9}$", ErrorMessage = "Numer telefonu powinien składać się z 9 cyfr")]
		public string? NumerTelefonu { get; set; }

		public string? Ulica { get; set; }
		public int NumerDomu { get; set; }
		public int? NumerMieszkania { get; set; }
		public string? KodPocztowy { get; set; }
		public string? Miasto { get; set; }
		public string? Kraj { get; set; }
	}

}