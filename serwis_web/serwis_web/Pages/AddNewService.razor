@page "/services/{ServiceId:int}"
@using ApiService.Models
@using Color = MudBlazor.Color
@rendermode InteractiveServer
@inject ApiService.ApiService ApiService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using System.ComponentModel.DataAnnotations
@using serwis_web.Components

<style>
	.services-container {
	display: flex;
	flex-direction: column;
	gap: 23px;
	padding: 0;
	margin: 0;
	padding-left: 5px;
	padding-right: 20px;
	}

	.services-container h2 {
	font-size: 30px;
	font-weight: 600;
	margin: 0;
	padding: 0;
	}

	.service-back {
	display: flex;
	flex-direction: column;
	gap: 25px;
	width: 100%;
	padding: 30px;
	background-color: #FFFFFF;
	border-radius: 10px;
	box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
	margin: 0;
	}

	.service-tab {
	display: flex;
	width: 100%;
	gap: 100px;
	padding: 0;
	margin: 0;
	}

	.service-col {
	flex: 1;
	display: flex;
	flex-direction: column;
	gap: 12px;
	}

	.service-col h4 {
	font-size: 16px;
	font-weight: 500;
	padding: 0;
	margin: 0;
	color: #606060;
	}

	.service-row {
	display: flex;
	align-items: center;
	gap: 40px;
	width: 100%;
	}

	.single-col {
	display: flex;
	flex-direction: column;
	gap: 10px;
	width: 100%;
	}

	.form-textarea, .form-input, select, option {
	background-color: #F5F6FA;
	border: solid 1px #D5D5D5;
	width: 100%;
	padding: 15px;
	border-radius: 5px;
	color: #A6A6A6;
	font-size: 14px;
	margin-bottom: 10px;
	}

	.form-textarea {
	height: 287px;
	}

	.form-input, select {
	height: 50px;
	}

	.service-btn {
	background-color: #4880FF;
	border: none;
	border-radius: 10px;
	padding: 15px;
	color: #FFFFFF;
	font-size: 16px;
	transition: all 0.3s ease-in-out;
	cursor: pointer;
	width: 100%;
	margin-top: 25px;
	}

	.service-btn:hover {
	background-color: #336ff5;
	}

	.validation-message {
		color: #F44336;
		font-size: 12px;
		margin-top: -5px;
		margin-bottom: 10px;
	}
	
	.invalid-field {
		border: 1px solid #F44336 !important;
	}

	@@media (max-width: 1366px) {
	.service-tab {
	gap: 80px;
	}
	}


	@@media (max-width: 1280px) {
	.services-container {
	gap: 30px;
	padding-right: 15px;
	}

	.service-row {
	gap: 40px;
	}

	.service-tab {
	flex-direction: column;
	gap: 10px;
	}

	.form-textarea, .form-input, select {
	margin-bottom: 15px;
	}

	.single-col {
	gap: 8px;
	}
	}

	@@media (max-width: 768px) {
	.services-container {
	padding-right: 5px;
	padding-top: 10px;
	}

	.service-row {
	flex-direction: column;
	gap: 5px;
	}
	}
</style>

<PageTitle>Nowe zlecenie</PageTitle>

<div class="services-container">
	<h2>Dodaj @((_typSerwisu?.Nazwa) ?? "Nowe zlecenie")</h2>

	<div class="service-back">
		@if (_isLoading)
		{
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
			<p>Ładowanie...</p>
		}
		else
		{
			<EditForm Model="@_newOrder" OnValidSubmit="SubmitNewOrder">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<div class="service-tab">
					<div class="service-col">
						<Textarea @bind-Value="_userDataModel.Opis" Placeholder="Opisz swój problem" class="@(_formSubmitted && !string.IsNullOrEmpty(_opisValidationMessage) ? "form-textarea invalid-field" : "form-textarea")" />

						@if (_formSubmitted && !string.IsNullOrEmpty(_opisValidationMessage))
						{
							<div class="validation-message">@_opisValidationMessage</div>
						}
						
						<div class="service-row">
							<div class="single-col">
								<h4>Priorytet</h4>
								<select @bind="_selectedPriorytetId">
									@foreach (var priorytet in _priorytets)
									{
										<option value="@priorytet.PriorytetId">@priorytet.Nazwa</option>
									}
								</select>
							</div>
							<div class="single-col">
								<h4>Dostępni serwisanci</h4>
								<select @bind="_selectedSerwisantId">
									@foreach (var serwisant in _serwisants)
									{
										<option value="@serwisant.SerwisantId">@serwisant.Uzytkownik.Imie @serwisant.Uzytkownik.Nazwisko</option>
									}
								</select>
							</div>
						</div>
						
						<h4>Planowana Data Realizacji</h4>
						<InputDate @bind-Value="_userDataModel.PlanowanaDataRealizacjiOd" min="@DateTime.Today.ToString("yyyy-MM-dd")" placeholder="" class="@(_formSubmitted &&!string.IsNullOrEmpty(_planowanaDataRealizacjiValidationMessage) ? "form-input invalid-field" : "form-input")" />
						@if (_formSubmitted && !string.IsNullOrEmpty(_planowanaDataRealizacjiValidationMessage))
						{
							<div class="validation-message">@_planowanaDataRealizacjiValidationMessage</div>
						}

						<h4>Planowana Data Zakończenia</h4>
						<InputDate @bind-Value="_userDataModel.PlanowanaDataRealizacjiDo" min="@DateTime.Today.ToString("yyyy-MM-dd")" placeholder="" class="@(_formSubmitted && !string.IsNullOrEmpty(_planowanaDataZakonczeniaValidationMessage) ? "form-input invalid-field" : "form-input")" />
						@if (_formSubmitted && !string.IsNullOrEmpty(_planowanaDataZakonczeniaValidationMessage))
						{
							<div class="validation-message">@_planowanaDataZakonczeniaValidationMessage</div>
						}
					</div>

					<div class="service-col">
						@if (GetUserRole() == "Administrator" || GetUserRole() == "Serwisant")
						{
							<h4>Klient</h4>
							<select value="@_selectedClientId" @onchange="HandleClientChange">
								@foreach (var klient in _clients)
								{
									<option value="@klient.KlientId">@klient.Uzytkownik.Imie @klient.Uzytkownik.Nazwisko</option>
								}
							</select>
						}
						
						<h4>Numer Telefonu</h4>
						<InputText @bind-Value="_userDataModel.NumerTelefonu" placeholder="Numer telefonu" class="@(_formSubmitted && !string.IsNullOrEmpty(_numerTelefonuValidationMessage) ? "form-input invalid-field" : "form-input")"/>
						@if (_formSubmitted && !string.IsNullOrEmpty(_numerTelefonuValidationMessage))
						{
							<div class="validation-message">@_numerTelefonuValidationMessage</div>
						}

						<h4>Adres Email</h4>
						<InputText @bind-Value="_userDataModel.Email" placeholder="Adres email" class="@(_formSubmitted && !string.IsNullOrEmpty(_emailValidationMessage) ? "form-input invalid-field" : "form-input")" type="email"/>
						@if (_formSubmitted && !string.IsNullOrEmpty(_emailValidationMessage))
						{
							<div class="validation-message">@_emailValidationMessage</div>
						}

						<h4>Państwo</h4>
						<InputText @bind-Value="_userDataModel.Kraj" placeholder="Państwo" class="@(_formSubmitted && !string.IsNullOrEmpty(_panstwoValidationMessage) ? "form-input invalid-field" : "form-input")"/>
						@if (_formSubmitted && !string.IsNullOrEmpty(_panstwoValidationMessage))
						{
							<div class="validation-message">@_panstwoValidationMessage</div>
						}

						<div class="service-row">
							<div class="single-col">
								<h4>Ulica</h4>
								<InputText @bind-Value="_userDataModel.Ulica" placeholder="Ulica" class="@(_formSubmitted && !string.IsNullOrEmpty(_ulicaValidationMessage) ? "form-input invalid-field" : "form-input")" />
								@if (_formSubmitted && !string.IsNullOrEmpty(_ulicaValidationMessage))
								{
									<div class="validation-message">@_ulicaValidationMessage</div>
								}
							</div>
							<div class="single-col">
								<h4>Numer Domu</h4>
								<InputNumber @bind-Value="_userDataModel.NumerDomu" placeholder="Numer domu" class="@(_formSubmitted && !string.IsNullOrEmpty(_numerDomuValidationMessage) ? "form-input invalid-field" : "form-input")"/>
								@if (_formSubmitted && !string.IsNullOrEmpty(_numerDomuValidationMessage))
								{
									<div class="validation-message">@_numerDomuValidationMessage</div>
								}
							</div>
						</div>

						<div class="service-row">
							<div class="single-col">
								<h4>Miasto</h4>
								<InputText @bind-Value="_userDataModel.Miasto" placeholder="Miasto" class="@(_formSubmitted && !string.IsNullOrEmpty(_miastoValidationMessage) ? "form-input invalid-field" : "form-input")"/>
								@if (_formSubmitted && !string.IsNullOrEmpty(_miastoValidationMessage))
								{
									<div class="validation-message">@_miastoValidationMessage</div>
								}
								
							</div>
							<div class="single-col">
								<h4>Kod pocztowy</h4>
								<InputText @bind-Value="_userDataModel.KodPocztowy" placeholder="Kod pocztowy" class="@(_formSubmitted && !string.IsNullOrEmpty(_kodPocztowyValidationMessage) ? "form-input invalid-field" : "form-input")"/>
								@if (_formSubmitted && !string.IsNullOrEmpty(_kodPocztowyValidationMessage))
								{
									<div class="validation-message">@_kodPocztowyValidationMessage</div>
								}
							</div>
						</div>
					</div>
				</div>


				@if (!string.IsNullOrEmpty(_errorMessage))
				{
					<div class="error-message">
						@_errorMessage
					</div>
				}

				<button type="submit" class="service-btn" disabled="@_isSaving">
					@if (_isSaving)
					{
						<span>Zapisywanie...</span>
					}
					else
					{
						<span>Utwórz zlecenie</span>
					}
				</button>
			</EditForm>
		}
	</div>
</div>

<div class="help-button-container">
	<AccessibilityWidget/>
</div>


@code {
	[Parameter]
	public int ServiceId { get; set; }


	private UserDataModel _userDataModel = new();
	private ZamowienieDto _newOrder = new();

	private string? _message;
	private string _messageClass = "success-message";
	private Uzytkownik? _currentUser;
	private AdresEmail? _currentEmail;
	private NumerTelefonu? _currentPhone;
	private Adres? _currentAddress;
	private DicTypSerwisu _typSerwisu = new();

	private List<DicPriorytet> _priorytets = new();
	private int _selectedPriorytetId = 0;
	private List<Serwisant> _serwisants = new();
	private int _selectedSerwisantId = 0;
	private List<Klient> _clients = new();
	private int _selectedClientId = 0;

	private bool _isLoading = true;
	private bool _isSaving = false;
	private string _errorMessage = string.Empty;
	private bool _formSubmitted = false;
	
	private string _opisValidationMessage = string.Empty;
	private string _planowanaDataRealizacjiValidationMessage = string.Empty;
	private string _planowanaDataZakonczeniaValidationMessage = string.Empty;
	private string _numerTelefonuValidationMessage = string.Empty;
	private string _emailValidationMessage = string.Empty;
	private string _panstwoValidationMessage = string.Empty;
	private string _ulicaValidationMessage = string.Empty;
	private string _numerDomuValidationMessage = string.Empty;
	private string _miastoValidationMessage = string.Empty;
	private string _kodPocztowyValidationMessage = string.Empty;
	
	
	protected override async Task OnInitializedAsync()
	{
		_isLoading = true;
		try
		{
			await LoadUserAsync();
			
			if (_currentUser == null)
			{
				ShowError("Nie znaleziono danych użytkownika");
				return;
			}

			if (_currentUser.AdresEmailId > 0)
			{
				var emailResult = await ApiService.AdresyEmailRepo.AdresEmailGet(_currentUser.AdresEmailId);
				_currentEmail = emailResult.Data;
			}

			if (_currentUser.NumerTelefonuId.HasValue && _currentUser.NumerTelefonuId.Value > 0)
			{
				var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuGet(_currentUser.NumerTelefonuId.Value);
				_currentPhone = phoneResult.Data;
			}

			if (_currentUser.Adres != null)
			{
				_currentAddress = _currentUser.Adres;
			}

			_userDataModel.Email = _currentEmail?.Email;
			_userDataModel.NumerTelefonu = _currentPhone?.Numer;

			if (_currentAddress != null)
			{
				_userDataModel.Ulica = _currentAddress.Ulica;
				_userDataModel.NumerDomu = _currentAddress.NumerDomu;
				_userDataModel.NumerMieszkania = _currentAddress.NumerMieszkania;
				_userDataModel.KodPocztowy = _currentAddress.KodPocztowy;
				_userDataModel.Miasto = _currentAddress.Miasto;
				_userDataModel.Kraj = _currentAddress.Kraj;
			}


			var rolesResult = await ApiService.PriotytetyRepo.PriotytetyGet();
			if (rolesResult.Data != null)
			{
				_priorytets = rolesResult.Data;
				if (_priorytets.Any())
				{
					_selectedPriorytetId = _priorytets.First().PriorytetId;
				}
			}

			var serwisantResult = await ApiService.SerwisanciRepo.SerwisanciGet();
			if (serwisantResult.Data != null)
			{
				_serwisants = serwisantResult.Data.Where(s => s.CzyAktywny).ToList();
				if (_serwisants.Any())
				{
					_selectedSerwisantId = _serwisants.First().SerwisantId;
				}
			}
			
			var klientResult = await ApiService.KlienciRepo.KlienciGet();
			if (klientResult.Data != null)
			{
				_clients = klientResult.Data;
				if (_clients.Any())
				{
					_selectedClientId = _clients.FirstOrDefault(client => client.UzytkownikId == _currentUser.UzytkownikId)?.KlientId ?? _clients.First().KlientId;
					await UpdateClientInfo(_selectedClientId);
				}
			}

			var serwisResult = await ApiService.TypySerwisuRepo.TypSerwisuGet(ServiceId);
			if (serwisResult.Data != null)
			{
				_typSerwisu = serwisResult.Data;
			}
			else
			{
				_errorMessage = "Nie znaleziono serwisu";
			}

		}
		catch (Exception ex)
		{
			_errorMessage = $"Błąd podczas ładowania ról: {ex.Message}";
		}
		finally
		{
			_isLoading = false;
			StateHasChanged();
		}
	}
	
	private async Task LoadUserAsync()
	{
		try
		{
			_currentUser = await ApiService.GetUzytkownik();
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Błąd podczas pobierania danych użytkownika.", Severity.Error);
		}
	}
	
	private string GetUserRole()
	{
		if (_currentUser?.RolaUzytkownika == null)
			return "Brak roli";

		return _currentUser.RolaUzytkownika.Nazwa;
	}
	
	private bool IsValidEmail(string email)
	{
		try
		{
			var addr = new System.Net.Mail.MailAddress(email);
			return addr.Address == email;
		}
		catch
		{
			return false;
		}
	}

	private bool IsValidPhoneNumber(string phone)
	{
		return System.Text.RegularExpressions.Regex.IsMatch(phone, @"^(\+)?[\d\s-]{9,15}$");
	}

	private bool IsValidPostalCode(string postalCode)
	{
		return System.Text.RegularExpressions.Regex.IsMatch(postalCode, @"^\d{2}-\d{3}$");
	}
	
	
	private bool ValidateForm()
	{
		bool isValid = true;
		
		 _opisValidationMessage = string.Empty;
		 _planowanaDataRealizacjiValidationMessage = string.Empty;
		 _planowanaDataZakonczeniaValidationMessage = string.Empty;
		 _numerTelefonuValidationMessage = string.Empty;
		 _emailValidationMessage = string.Empty;
		 _panstwoValidationMessage = string.Empty;
		 _ulicaValidationMessage = string.Empty;
		 _numerDomuValidationMessage = string.Empty;
		 _miastoValidationMessage = string.Empty;
		 _kodPocztowyValidationMessage = string.Empty;

		if (string.IsNullOrWhiteSpace(_userDataModel.Opis) || _userDataModel.Opis.Length > 500 || _userDataModel.Opis.Length < 15)
		{
			_opisValidationMessage = "Opis musi mieć od 15 do 500 znaków";
			isValid = false;
		}
		
		if (_userDataModel.PlanowanaDataRealizacjiOd == null || _userDataModel.PlanowanaDataRealizacjiOd.Value == default)
		{
			_planowanaDataRealizacjiValidationMessage = "Nieprawidłowy format daty";
			isValid = false;
		}

		if (_userDataModel?.PlanowanaDataRealizacjiDo == null || _userDataModel.PlanowanaDataRealizacjiDo.Value == default)
		{
			_planowanaDataZakonczeniaValidationMessage = "Nieprawidłowy format daty";
			isValid = false;
		}
		else if (_userDataModel.PlanowanaDataRealizacjiDo < _userDataModel.PlanowanaDataRealizacjiOd)
		{
			_planowanaDataZakonczeniaValidationMessage = "Data zakończenia musi być późniejsza lub równa wzgledem daty realizacji";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.NumerTelefonu) || !IsValidPhoneNumber(_userDataModel.NumerTelefonu))
		{
			_numerTelefonuValidationMessage = "Nieprawidłowy format numeru telefonu";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.Email))
		{
			_emailValidationMessage = "Adres email jest wymagany";
			isValid = false;
		}
		
		else if (!IsValidEmail(_userDataModel.Email))
		{
			_emailValidationMessage = "Nieprawidłowy format adresu email";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.Kraj) || _userDataModel.Kraj.Length > 64 || _userDataModel.Kraj.Length < 2)
		{
			_panstwoValidationMessage = "Państwo musi mieć od 2 do 64 znaków";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.Ulica) || _userDataModel.Ulica.Length > 100 || _userDataModel.Ulica.Length < 2)
		{
			_ulicaValidationMessage = "Ulica musi mieć od 2 do 100 znaków";
			isValid = false;
		}
		
		if (_userDataModel.NumerDomu < 1 || _userDataModel.NumerDomu > 1000)
		{
			_numerDomuValidationMessage = "Numer domu musi być z przedzialu od 0 do 1000";
			isValid = false;
		}

		if (string.IsNullOrWhiteSpace(_userDataModel.Miasto) || _userDataModel.Miasto.Length > 85 || _userDataModel.Miasto.Length < 2)
		{
			_miastoValidationMessage = "Miasto musi mieć od 2 do 85 znaków";
			isValid = false;
		}
		
		if (string.IsNullOrWhiteSpace(_userDataModel.KodPocztowy) || !IsValidPostalCode(_userDataModel.KodPocztowy))
		{
			_kodPocztowyValidationMessage = "Kod pocztowy powinien mieć format XX-XXX";
			isValid = false;
		}
		
		return isValid;
	}

	private async Task SubmitNewOrder()
	{
		_formSubmitted = true;
		
		if (!ValidateForm())
		{
			return;
		}
		
		try
		{
			_isSaving = true;
			_errorMessage = string.Empty; 

			var emailResult = await ApiService.AdresyEmailRepo.AdresEmailPost(new AdresEmailDto
			{
				Email = _userDataModel.Email
			});

			if (emailResult.Error != null || emailResult.Data == null)
			{
				_errorMessage = $"Błąd podczas tworzenia adresu email: {emailResult.Error}";
				return;
			}

			int? phoneId = null;
			if (!string.IsNullOrWhiteSpace(_userDataModel.NumerTelefonu))
			{
				var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuPost(new NumerTelefonuDto
				{
					Numer = _userDataModel.NumerTelefonu
				});

				if (phoneResult.Error != null || phoneResult.Data == null)
				{
					_errorMessage = $"Błąd podczas tworzenia numeru telefonu: {phoneResult.Error}";
					return;
				}

				phoneId = phoneResult.Data.NumerTelefonuId;
			}

			int? addressId = null;
			if (!string.IsNullOrWhiteSpace(_userDataModel.Ulica) || !string.IsNullOrWhiteSpace(_userDataModel.Miasto))
			{
				var adresResult = await ApiService.AdresyRepo.AdresPost(new ApiService.Models.AdresDto
				{
					Kraj = _userDataModel.Kraj,
					Ulica = _userDataModel.Ulica,
					NumerDomu = _userDataModel.NumerDomu,
					NumerMieszkania = _userDataModel.NumerMieszkania,
					Miasto = _userDataModel.Miasto,
					KodPocztowy = _userDataModel.KodPocztowy
				});

				if (adresResult.Error != null || adresResult.Data == null)
				{
					_errorMessage = $"Błąd podczas tworzenia adresu: {adresResult.Error}";
					return;
				}

				addressId = adresResult.Data.AdresId;
			}

			int clientId = 0;
			
			var clientResult = await ApiService.KlienciRepo.KlientGet(_selectedClientId); 
			if (clientResult.Data != null)
			{
				clientId = clientResult.Data.KlientId;
			}
			else
			{
				_errorMessage = $"Błąd podczas ładowania klienta: ";
				return;
			}
			
			// var clientResult = await ApiService.KlienciRepo.KlientPost(new KlientDto
			// {
			// 	UzytkownikId = _currentUser.UzytkownikId,
			// 	TypKlientaId = 0
			// });
			//
			// if (clientResult.Error != null || clientResult.Data == null)
			// {
			// 	_errorMessage = $"Błąd podczas tworzenia klienta: {clientResult.Error}";
			// 	return;
			// }
			//
			// clientId = clientResult.Data.KlientId;
			
			
			var createResult = await ApiService.ZamowieniaRepo.ZamowieniePost(new ZamowienieDto
			{
				PlanowanaDataRealizacjiOd = _userDataModel.PlanowanaDataRealizacjiOd,
				PlanowanaDataRealizacjiDo = _userDataModel.PlanowanaDataRealizacjiDo,
				KlientId = clientId,
				AdresEmailId = emailResult.Data.AdresEmailId,
				NumerTelefonuId = phoneId,
				AdresId = addressId,
				PriorytetId = _selectedPriorytetId,
				SerwisantId = _selectedSerwisantId,
				SerwisId = ServiceId,
				Opis = _userDataModel.Opis ?? "",
			});

			if (createResult.Error != null)
			{
				_errorMessage = $"Błąd podczas tworzenia zlecenia: {createResult.Error}";
				return;
			}
			else
			{
				var logDto = new LogDto
				{
					ZamowienieId = createResult.Data.ZamowienieId,
					StatusId = 0,
					Komentarz = "Utworzono nowe zlecenie"
				};

				var logResult = await ApiService.LogiRepo.LogPost(logDto);

				if (logResult.Data == null)
				{
					_errorMessage = $"Błąd podczas tworzenia nowego loga: {logResult.Error}";
					return;
				}
			}
			
			
			Snackbar.Add("Zlecenie zostało pomyślnie utworzone!", Severity.Success);
			NavigationManager.NavigateTo("/orders");
		}
		catch (Exception ex)
		{
			_errorMessage = $"Wystąpił nieoczekiwany błąd: {ex.Message}";
		}
		finally
		{
			_isSaving = false;
		}
	}
	
	private async Task HandleClientChange(ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int clientId))
		{
			_selectedClientId = clientId;
        
			await UpdateClientInfo(clientId);
		}
	}

	private async Task UpdateClientInfo(int clientId)
	{
		try
		{
			var selectedClient = _clients.FirstOrDefault(c => c.KlientId == clientId);
        
			if (selectedClient != null)
			{
				var userResult = await ApiService.UzytkownicyRepo.UzytkownikGet(selectedClient.Uzytkownik.UzytkownikId);
            
				if (userResult.Data != null)
				{
					var user = userResult.Data;
                
					if (user.AdresEmailId > 0)
					{
						var emailResult = await ApiService.AdresyEmailRepo.AdresEmailGet(user.AdresEmailId);
						if (emailResult.Data != null)
						{
							_userDataModel.Email = emailResult.Data.Email;
						}
					}
                
					if (user.NumerTelefonuId.HasValue && user.NumerTelefonuId.Value > 0)
					{
						var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuGet(user.NumerTelefonuId.Value);
						if (phoneResult.Data != null)
						{
							_userDataModel.NumerTelefonu = phoneResult.Data.Numer;
						}
					}
					
					if (user.Adres != null )
					{
						var adresResult = await ApiService.AdresyRepo.AdresGet(user.Adres.AdresId);
						if (adresResult.Data != null)
						{
							_userDataModel.Kraj = adresResult.Data.Kraj;
							_userDataModel.Ulica = adresResult.Data.Ulica;
							_userDataModel.NumerDomu = adresResult.Data.NumerDomu;
							_userDataModel.Miasto = adresResult.Data.Miasto;
							_userDataModel.KodPocztowy = adresResult.Data.KodPocztowy;
						}
					}
					
					StateHasChanged(); 
				}
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Błąd podczas pobierania danych serwisanta.", Severity.Error);
		}
	}

	private void ShowSuccess(string message)
	{
		_message = message;
		_messageClass = "success-message";
	}

	private void ShowError(string error)
	{
		_message = error;
		_messageClass = "error-message";
	}

	public class UserDataModel
	{
		// [EmailAddress(ErrorMessage = "Proszę podać poprawny adres email")]
		// [StringLength(254, MinimumLength = 6, ErrorMessage = "Email powinien mieć minimum 6 znaków")]
		public string? Email { get; set; }

		// [RegularExpression(@"^\d{9}$", ErrorMessage = "Nieprawidłowy format numeru telefonu")]
		public string? NumerTelefonu { get; set; }

		// [StringLength(100, MinimumLength = 2, ErrorMessage = "Ulica musi mieć od 2 do 100 znaków")]
		public string? Ulica { get; set; }
    
		// [Range(1, 9999, ErrorMessage = "Podaj prawidłowy numer domu")]
		public int NumerDomu { get; set; }
    
		public int? NumerMieszkania { get; set; }
    
		// [Required(ErrorMessage = "Kod pocztowy jest wymagany")]
		// [RegularExpression(@"^\d{2}-\d{3}$", ErrorMessage = "Kod pocztowy powinien mieć format XX-XXX")]
		public string? KodPocztowy { get; set; }
    
		// [StringLength(85, MinimumLength = 2, ErrorMessage = "Miasto musi mieć od 2 do 85 znaków")]
		public string? Miasto { get; set; }
    
		// [StringLength(64, MinimumLength = 2, ErrorMessage = "Państwo musi mieć od 2 do 64 znaków")]
		public string? Kraj { get; set; }
		
		// [StringLength(500, MinimumLength = 15, ErrorMessage = "Opis musi mieć od 15 do 500 znaków")]
		public string? Opis { get; set; }
		
		// [DataType(DataType.Date)]
		public DateTime? PlanowanaDataRealizacjiOd { get; set; }

		
		// [DataType(DataType.Date)]
		public DateTime? PlanowanaDataRealizacjiDo { get; set; }

	}


}