@page "/index"
@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@inject ApiService ApiService
@inject ISnackbar Snackbar

<PageTitle>Strona Główna</PageTitle>

<div class="home-container">
    <h2>Strona Główna</h2>

    <div class="top-section">
        <a class="tab-container" href="/services">
            <div class="tab-wrapper">
                <h3>Nowe zlecenie</h3>
                <p>Utwórz nowe zlecenie serwisowe</p>
                <div class="order-box">
                    <i class="fa-solid fa-plus" style="color: #8280FF"></i>
                </div>
            </div>
        </a>

        <a class="tab-container" href="/statistics">
            <div class="tab-wrapper">
                <h3>Statystyki</h3>
                <p>Śledź ilość i status wykonanych zleceń</p>
                <div class="statistics-box">
                    <i class="fa-solid fa-chart-simple" style="color: #4AD991"></i>
                </div>
            </div>
        </a>

        <a class="tab-container" href="/report">
            <div class="tab-wrapper">
                <h3>Raport</h3>
                <p>Podsumowanie wykonanych usług</p>
                <div class="report-box">
                    <i class="fa-solid fa-file" style="color: #FF9066"></i>
                </div>
            </div>
        </a>
    </div>

    <div class="add-comment">
        <div class="comment-top">
            <div class="comment-box">
                <i class="fa-regular fa-keyboard" style="color: #BA29FF; font-size: 32px;"></i>
            </div>
            <h3>Dodaj komentarz do usługi</h3>
        </div>
        <p>Podziel się swoją opinią na temat wykonanej usługi, aby ulepszyć jakość naszych usług</p>
    </div>

    <div class="add-rate">
        <div class="rate-top">
            <div class="rate-box">
                <i class="fa-solid fa-star" style="color: #FEC53D; font-size: 32px;"></i>
            </div>
            <h3>Oceń wykonaną usługę</h3>
        </div>
        <p>Wystaw ocenę, aby wyrazić swoje zadowolenie z realizacji naszych usług</p>
    </div>

    <div class="orders">
        <div class="orders-header">
            <h3>Ostatnie zlecenia</h3>
            <a class="see-more" href="orders">Zobacz więcej</a>
        </div>
        
        <MudDataGrid T="Serwis" Items="@_latestSerwisy" Hover="true" Loading="@_loading"
                    LoadingProgressColor="Color.Info" Bordered="false" Dense="true" 
                    FixedHeader="true" RowsPerPage="5" Pagination="false" Height="auto">
            <Columns>
                <PropertyColumn T="Serwis" TProperty="int" Property="x => x.SerwisId" Title="Numer zlecenia">
                    <CellTemplate>
                        <MudLink Href="@($"/orders/{context.Item.SerwisId}")">@context.Item.SerwisId.ToString("D6")</MudLink>
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn T="Serwis" TProperty="DicTypSerwisu" Property="x => x.TypSerwisu" Title="Rodzaj">
                    <CellTemplate>
                        @(context.Item.TypSerwisu?.Nazwa ?? "-")
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn T="Serwis" TProperty="DateTime" Property="x => x.DataDodania" Title="Data utworzenia" Format="dd.MM.yyyy" />
                <PropertyColumn T="Serwis" TProperty="DateTime?" Property="x => x.DataAktualizacji" Title="Data aktualizacji">
                    <CellTemplate>
                        @(context.Item.DataAktualizacji?.ToString("dd.MM.yyyy") ?? "-")
                    </CellTemplate>
                </PropertyColumn>
            </Columns>
            <NoRecordsContent>
                <MudText>Brak zleceń do wyświetlenia</MudText>
            </NoRecordsContent>
        </MudDataGrid>
    </div>
</div>

@code {
    private bool _loading = true;
    private List<Serwis> _serwisy = new();
    private List<Serwis> _latestSerwisy = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServicesAsync();
    }

    private async Task LoadServicesAsync()
    {
        _loading = true;
        try
        {
            var result = await ApiService.SerwisyRepo.SerwisyGet();
            if (result.Data != null)
            {
                _serwisy = result.Data;
                
                // Get 5 latest services sorted by creation date (newest first)
                _latestSerwisy = _serwisy
                    .OrderByDescending(s => s.DataDodania)
                    .Take(5)
                    .ToList();
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania zleceń: {result.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił wyjątek: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }
}