@page "/bank/typy-klienta"
@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@using serwis_web.Components
@using Colors = DesignSystem.Tokens.Colors
@using Size = MudBlazor.Size
@inject ISnackbar Snackbar
@inject ApiService ApiService
@inject IDialogService DialogService

<PageTitle>Typy klienta</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudCard Elevation="3" Class="mb-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Typy klienta</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Filled" Style="@($"background-color: {Colors.Primary}; color: {Colors.White}")"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="@(() => OpenDialog(new DicTypKlientaDto()))">Dodaj typ klienta</MudButton>
        </MudCardHeader>
    </MudCard>

    <MudTable Items="@_typyKlienta" Hover="true" Loading="@_loading"
              LoadingProgressColor="@MudBlazor.Color.Info" Style="@($"--mud-palette-primary: {Colors.Primary}")"
              Filter="new Func<DicTypKlienta,bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Lista typów klienta</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Szukaj" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"
                          Immediate="true" OnDebounceIntervalElapsed="StateHasChanged"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<DicTypKlienta, object>(x => x.TypKlientaId)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DicTypKlienta, object>(x => x.Nazwa)">Nazwa</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DicTypKlienta, object?>(x => x.Opis)">Opis</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DicTypKlienta, object>(x => x.DataDodania)">Data utworzenia</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<DicTypKlienta, object?>(x => x.DataAktualizacji)">Aktualizacja</MudTableSortLabel></MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">@context.TypKlientaId</MudTd>
            <MudTd DataLabel="Nazwa">@context.Nazwa</MudTd>
            <MudTd DataLabel="Opis">@context.Opis</MudTd>
            <MudTd DataLabel="Data utworzenia">@context.DataDodania.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Aktualizacja">@(context.DataAktualizacji?.ToString("dd/MM/yyyy") ?? "-")</MudTd>
            <MudTd>
                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Style="@($"color: {Colors.Primary}")"
                                   OnClick="@(() => OpenDialog(MapToDto(context)))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Style="@($"color: {Colors.DarkGray}")"
                                   OnClick="@(() => DeleteConfirm(context.TypKlientaId))" />
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Wierszy na stronę" InfoFormat="{first_item}-{last_item} z {all_items}" />
        </PagerContent>
        <NoRecordsContent>
            <MudText>Nie znaleziono typów klienta</MudText>
        </NoRecordsContent>
    </MudTable>
</MudContainer>

@code {
    private List<DicTypKlienta> _typyKlienta = new();
    private string _searchString = "";
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        StateHasChanged();
        var result = await ApiService.TypyKlientaRepo.TypyKlientaGet();
        if (result.Data != null)
        {
            _typyKlienta = result.Data;
        }
        else
        {
            Snackbar.Add("Błąd podczas pobierania danych: " + result.Error, Severity.Error);
        }
        _loading = false;
        StateHasChanged();
    }

    private bool FilterFunc(DicTypKlienta element)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (element.Nazwa.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.Opis != null && element.Opis.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task OpenDialog(DicTypKlientaDto typKlienta)
    {
        StateHasChanged();
        var currentId = GetIdFromTypKlienta(typKlienta);

        var parameters = new DialogParameters
        {
            ["TypKlienta"] = typKlienta,
            ["IsNew"] = currentId == 0
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var title = currentId > 0 ? "Edytuj typ klienta" : "Dodaj nowy typ klienta";

        var dialog = await DialogService.ShowAsync<TypKlientaDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            if (result.Data is DicTypKlientaDto updatedTypKlienta)
            {
                if (currentId > 0)
                {
                    var updateResult = await ApiService.TypyKlientaRepo.TypKlientaPut(currentId, updatedTypKlienta);
                    if (updateResult.Data != null)
                    {
                        Snackbar.Add("Typ klienta został zaktualizowany", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Błąd: " + updateResult.Error, Severity.Error);
                    }
                }
                else
                {
                    var createResult = await ApiService.TypyKlientaRepo.TypKlientaPost(updatedTypKlienta);
                    if (createResult.Data != null)
                    {
                        Snackbar.Add("Typ klienta został dodany", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Błąd: " + createResult.Error, Severity.Error);
                    }
                }
                await LoadData();
            }
        }
    }

    private int GetIdFromTypKlienta(DicTypKlientaDto typKlienta)
    {
        var existingRecord = _typyKlienta.FirstOrDefault(t =>
            t.Nazwa == typKlienta.Nazwa &&
            t.Opis == typKlienta.Opis);

        return existingRecord?.TypKlientaId ?? 0;
    }

    private async Task DeleteConfirm(int id)
    {
        StateHasChanged();
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Czy na pewno chcesz usunąć ten typ klienta?"
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Potwierdź usunięcie", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await DeleteTypKlienta(id);
        }
    }

    private async Task DeleteTypKlienta(int id)
    {
        var result = await ApiService.TypyKlientaRepo.TypKlientaDelete(id);
        if (result.Data)
        {
            Snackbar.Add("Typ klienta został usunięty", Severity.Success);
            await LoadData();
        }
        else
        {
            Snackbar.Add("Błąd podczas usuwania: " + result.Error, Severity.Error);
        }
    }

    private DicTypKlientaDto MapToDto(DicTypKlienta model)
    {
        return new DicTypKlientaDto
        {
            Nazwa = model.Nazwa,
            Opis = model.Opis
        };
    }
}