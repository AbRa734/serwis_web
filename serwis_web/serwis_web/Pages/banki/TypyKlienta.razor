@page "/bank/typy-klienta"
@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@using serwis_web.Components
@using Colors = DesignSystem.Tokens.Colors
@using Size = MudBlazor.Size
@inject ISnackbar Snackbar
@inject ApiService ApiService
@inject IDialogService DialogService

<PageTitle>Typy klienta</PageTitle>

<style>
    .order-container {
        margin: 0;
        padding: 0;
        min-width: 100%;
        border: none;
    }

    .order-header {
        margin: 0 0 10px 0;
        padding: 0;
    }

    .order-header-tittle {
        font-size: 30px;
        font-weight: 600
    }

    .order-header-search-button {
        margin: 0 0 25px 0;
        padding: 0 40px 0 0;
        width: 100%;
        justify-content: space-between
    }

    .order-search {
        max-width: 300px;
    }

    .new-button {
        background-color: #4880FF;
        border: none;
        border-radius: 10px;
        padding: 12px 50px;
        color: #FFFFFF;
        font-size: 16px;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
        text-transform: none;
    }

    .new-button:hover {
        background-color: #336ff5;
    }

    .order-grid {
        border-radius: 15px;
        box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
    }

    .order-category {
        font-size: 16px;
        font-weight: 500;
        /* text-align: center;  */
        background-color: #FCFDFD !important;
        border-top-left-radius: 15px !important;
        border-top-right-radius: 15px !important;
        border-bottom: solid 2px #efefef !important;
    }

    .order-category-left {
        padding-left: 50px;
        font-size: 16px;
        font-weight: 500;
        /* text-align: center;  */
        background-color: #FCFDFD !important;
        border-top-left-radius: 15px !important;
        border-top-right-radius: 15px !important;
        border-bottom: solid 2px #efefef !important;
    }

    .status-default {
        font-size: 16px;
        font-weight: 500;
        /* text-align: center; */
    }

    .status-default-left {
        padding-left: 50px;
        font-size: 16px;
        font-weight: 500;
        /* text-align: center; */
    }

    .edit {
        color: #4880FF;
        border: none;
    }

    .delete {
        color: #979797;
        border: none;
    }

    @@media (max-width: 1024px) {
        .order-header-search-button {
            padding: 0;
            margin: 0;
        }

        .order-header {
            margin: 0;
        }

        .order-search {
            display: none;
        }

        .new-button {
            width: 100%;
            padding: 12px 0;
            margin: 10px 0 20px 0;
        }

        .order-category-left {
            padding-left: 20px;
        }

        .status-default-left {
            padding-left: 20px;
        }
    }

    @@media (max-width: 600) {

        .order-category {
            text-align: start;
        }

        .status-default {
            text-align: start;
        }
    }

</style>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="order-container">

    <MudCardHeader Class="order-header">
        <MudText Class="order-header-tittle">Typy klienta</MudText>
    </MudCardHeader>

    <MudCardHeader Class="order-header-search-button">
        <MudItem>
            <MudTextField @bind-Value="_searchString"
                          Placeholder="Szukaj"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Immediate="true"
                          DebounceInterval="500"
                          OnDebounceIntervalElapsed="StateHasChanged"
                          Class="order-search"></MudTextField>
        </MudItem>
        <MudButton Class="new-button" OnClick="@(() => OpenDialog(new DicTypKlientaDto()))">
            Dodaj typ klienta
        </MudButton>
    </MudCardHeader>

    <MudTable Items="@_typyKlienta" Hover="true" Loading="@_loading"
              LoadingProgressColor="@MudBlazor.Color.Info" Style="@($"--mud-palette-primary: {Colors.Primary}")"
              RowsPerPage="7" Filter="new Func<DicTypKlienta,bool>(FilterFunc)" Bordered="false" Class="order-grid">


        <HeaderContent>
            <MudTh Class="order-category-left"><MudTableSortLabel SortBy="new Func<DicTypKlienta, object>(x => x.TypKlientaId)">ID</MudTableSortLabel></MudTh>
            <MudTh Class="order-category"><MudTableSortLabel SortBy="new Func<DicTypKlienta, object>(x => x.Nazwa)">Nazwa</MudTableSortLabel></MudTh>
            <MudTh Class="order-category"><MudTableSortLabel SortBy="new Func<DicTypKlienta, object?>(x => x.Opis)">Opis</MudTableSortLabel></MudTh>
            <MudTh Class="order-category"><MudTableSortLabel SortBy="new Func<DicTypKlienta, object>(x => x.DataDodania)">Data utworzenia</MudTableSortLabel></MudTh>
            <MudTh Class="order-category"><MudTableSortLabel SortBy="new Func<DicTypKlienta, object?>(x => x.DataAktualizacji)">Aktualizacja</MudTableSortLabel></MudTh>
            <MudTh Class="order-category">Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID" Class="status-default-left">@context.TypKlientaId</MudTd>
            <MudTd DataLabel="Nazwa" Class="status-default">@context.Nazwa</MudTd>
            <MudTd DataLabel="Opis" Class="status-default">@context.Opis</MudTd>
            <MudTd DataLabel="Data utworzenia" Class="status-default">@context.DataDodania.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Aktualizacja" Class="status-default">@(context.DataAktualizacji?.ToString("dd/MM/yyyy") ?? "-")</MudTd>
            <MudTd Class="status-default">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Class="edit"
                                OnClick="@(() => OpenDialog(MapToDto(context)))" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Class="delete"
                                OnClick="@(() => DeleteConfirm(context.TypKlientaId))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Wierszy na stronę" InfoFormat="{first_item}-{last_item} z {all_items}" />
        </PagerContent>
        <NoRecordsContent>
            <MudText>Nie znaleziono typów klienta</MudText>
        </NoRecordsContent>
    </MudTable>
</MudContainer>

@code {
    private List<DicTypKlienta> _typyKlienta = new();
    private string _searchString = "";
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _loading = true;
        StateHasChanged();
        var result = await ApiService.TypyKlientaRepo.TypyKlientaGet();
        if (result.Data != null)
        {
            _typyKlienta = result.Data;
        }
        else
        {
            Snackbar.Add("Błąd podczas pobierania danych: " + result.Error, Severity.Error);
        }
        _loading = false;
        StateHasChanged();
    }

    private bool FilterFunc(DicTypKlienta element)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (element.Nazwa.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (element.Opis != null && element.Opis.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private async Task OpenDialog(DicTypKlientaDto typKlienta)
    {
        StateHasChanged();
        var currentId = GetIdFromTypKlienta(typKlienta);

        var parameters = new DialogParameters
        {
            ["TypKlienta"] = typKlienta,
            ["IsNew"] = currentId == 0
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var title = currentId > 0 ? "Edytuj typ klienta" : "Dodaj nowy typ klienta";

        var dialog = await DialogService.ShowAsync<TypKlientaDialog>(title, parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            if (result.Data is DicTypKlientaDto updatedTypKlienta)
            {
                if (currentId > 0)
                {
                    var updateResult = await ApiService.TypyKlientaRepo.TypKlientaPut(currentId, updatedTypKlienta);
                    if (updateResult.Data != null)
                    {
                        Snackbar.Add("Typ klienta został zaktualizowany", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Błąd: " + updateResult.Error, Severity.Error);
                    }
                }
                else
                {
                    var createResult = await ApiService.TypyKlientaRepo.TypKlientaPost(updatedTypKlienta);
                    if (createResult.Data != null)
                    {
                        Snackbar.Add("Typ klienta został dodany", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Błąd: " + createResult.Error, Severity.Error);
                    }
                }
                await LoadData();
            }
        }
    }

    private int GetIdFromTypKlienta(DicTypKlientaDto typKlienta)
    {
        var existingRecord = _typyKlienta.FirstOrDefault(t =>
            t.Nazwa == typKlienta.Nazwa &&
            t.Opis == typKlienta.Opis);

        return existingRecord?.TypKlientaId ?? 0;
    }

    private async Task DeleteConfirm(int id)
    {
        StateHasChanged();
        var parameters = new DialogParameters
        {
            ["ContentText"] = "Czy na pewno chcesz usunąć ten typ klienta?"
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.ExtraSmall
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Potwierdź usunięcie", parameters, options);
        var result = await dialog.Result;

        if (result != null && !result.Canceled)
        {
            await DeleteTypKlienta(id);
        }
    }

    private async Task DeleteTypKlienta(int id)
    {
        var result = await ApiService.TypyKlientaRepo.TypKlientaDelete(id);
        if (result.Data)
        {
            Snackbar.Add("Typ klienta został usunięty", Severity.Success);
            await LoadData();
        }
        else
        {
            Snackbar.Add("Błąd podczas usuwania: " + result.Error, Severity.Error);
        }
    }

    private DicTypKlientaDto MapToDto(DicTypKlienta model)
    {
        return new DicTypKlientaDto
        {
            Nazwa = model.Nazwa,
            Opis = model.Opis
        };
    }
}