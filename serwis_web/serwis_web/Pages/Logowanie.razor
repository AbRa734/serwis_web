@page "/"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.IdentityModel.Tokens.Jwt
@using Colors = DesignSystem.Tokens.Colors
@using ApiService
@using ApiService.Helpers
@using ApiService.Models
@using serwis_web.Layout
@using ButtonType = MudBlazor.ButtonType
@using Size = MudBlazor.Size
@using serwis_web.Components
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@layout EmptyLayout
@inject IHttpContextAccessor context
@using System.IdentityModel.Tokens.Jwt;
@using Microsoft.AspNetCore.Mvc;
@using Console = System.Console

<main
    style="@($"background-color: {Colors.Primary}; width: 100%; height: 100vh; display: flex; justify-content: center; align-items: center; background-image: url('/shape.png'); background-size: cover; background-position: center;"))">
    <section
        style="@($"background-color: {Colors.White}; border-radius: 8px; padding: 40px 20px; margin: 0 20px; width: 80%; max-width: 700px;"))">
        <h1 style="text-align: center">Zaloguj się do aplikacji</h1>
        <p style="text-align: center">Podaj swój adres e-mail i hasło lub wybierz metodę logowania za pomocą mediów
            społecznościowych</p>

        <EditForm Model="@_loginModel" OnValidSubmit="ZalogujUzytkownika">
            <DataAnnotationsValidator />

            <MudTextField @bind-Value="_loginModel.Email" Label="Email" Variant="Variant.Outlined"
                          Style="border-radius: 8px; margin: 10px 0;"
                          For="@(() => _loginModel.Email)"
                          Validation="@_validateEmail"></MudTextField>

            <p style="text-align: right"><a  href="/przypomnij-haslo">Nie pamiętasz hasła?</a></p>

            <MudTextField @bind-Value="_loginModel.Haslo" Label="Hasło" Variant="Variant.Outlined"
                          InputType="@(_pokazHaslo ? InputType.Text : InputType.Password)"
                          Style="margin: 10px 0;"
                          For="@(() => _loginModel.Haslo)"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_pokazHaslo ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                          OnAdornmentClick="@(() => _pokazHaslo = !_pokazHaslo)"></MudTextField>

            <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit"
                       Style="@($"background-color: {Colors.Primary}; height: 42px; width: 100%; color: {Colors.White}; border-radius: 8px; margin: 10px 0;")">
                @if (_isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <span class="ms-2">Logowanie...</span>
                }
                else
                {
                    <span>Zaloguj się</span>
                }
            </MudButton>

            <MudButton Variant="Variant.Filled" @onclick="() => { _ = ZalogujSzybkoAdmin(); }"
                       Style="@($"background-color: {Colors.Primary}; height: 42px; width: 100%; color: {Colors.White}; border-radius: 8px; margin: 10px 0;")">
                @if (_isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <span class="ms-2">Logowanie...</span>
                }
                else
                {
                    <span>Zaloguj szybko (admin)</span>
                }
            </MudButton>

            <MudButton Variant="Variant.Filled" @onclick="() => { _ = ZalogujSzybkoSerwisant(); }"
                       Style="@($"background-color: {Colors.Primary}; height: 42px; width: 100%; color: {Colors.White}; border-radius: 8px; margin: 10px 0;")">
                @if (_isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <span class="ms-2">Logowanie...</span>
                }
                else
                {
                    <span>Zaloguj szybko (serwisant)</span>
                }
            </MudButton>

            <MudButton Variant="Variant.Filled" @onclick="() => { _ = ZalogujSzybkoKlient(); }"
                       Style="@($"background-color: {Colors.Primary}; height: 42px; width: 100%; color: {Colors.White}; border-radius: 8px; margin: 10px 0;")">
                @if (_isLoading)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <span class="ms-2">Logowanie...</span>
                }
                else
                {
                    <span>Zaloguj szybko (klient)</span>
                }
            </MudButton>

            @***<div style="display: flex; align-items: center;">
                <MudCheckBox Dense="true" @bind-Value="_loginModel.ZapamietajHaslo"
                             Style="@($"color: {Colors.Primary}; padding: 0px;")"></MudCheckBox>
                Zapamiętaj hasło
            </div>***@
        </EditForm>

        <p style="text-align: right">Nie masz jeszcze konta? <a @onclick="NavigateToRegister" style=@($"color: {Colors.Primary}; text-decoration: none; cursor: pointer;")>Zarejestruj się</a></p>

        <div style="margin-top: 20px;">
            <MudButton Href="/clerk.html" Variant="Variant.Filled" Disabled="@_isLoading"
                       Style="@($"height: 42px; border-radius: 8px; width: 100%; background-color: {Colors.Gray}; display: flex; align-items: center; justify-content: center;")">
                <i class="fab fa-google" style="margin-right: 16px;"></i> <i class="fab fa-facebook" style="margin-right: 16px;"></i> <i class="fab fa-github" style="margin-right: 16px;"></i> Zaloguj się przez Google/Facebook/Github
            </MudButton>
        </div>
        <div style="margin-top: 20px; text-align: center;">
            @if (!string.IsNullOrEmpty(email))
            {
                <MudAlert Severity="Severity.Info" Style="border-radius: 8px;">
                    Zalogowano jako: @email
                </MudAlert>
            }
        </div>
    </section>
</main>

@code {
    private readonly LoginModel _loginModel = new();
    private Result<Token>? _wynik;
    private bool _pokazHaslo;
    private bool _isLoading;

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/rejestracja", forceLoad: true);
    }
    
    private string? email;

    protected override async Task OnInitializedAsync()
    {
        email = context.HttpContext?.Request.Cookies["userEmail"];
        
        if (!string.IsNullOrEmpty(email))
        {
            try
            {
                var loginResult = await ApiService.AdministracjaRepo.LoginPost(new LoginRequest
                {
                    Haslo = "20u[y;h}6~uwTgyGI%Oo^T,8!",
                    Email = email,
                });
                
                if (loginResult.Error == null)
                {
                    Snackbar.Add("Logowanie udane", Severity.Success);
                    Navigation.NavigateTo("/index");
                }
                else
                {
                    
                    var emailExists = false;

                    var emailResult = await ApiService.AdresyEmailRepo.AdresyEmailGet();

                    if (emailResult.Data != null)
                    {
                        emailExists = emailResult.Data.Any(e => e.Email.Equals(email, StringComparison.OrdinalIgnoreCase));
                    }

                    if (emailExists)
                    {
                        Snackbar.Add("Konto z tym adresem email już istnieje w bazie. Zaloguj się za pomocą hasła.", Severity.Warning);
                    }
                    else
                    {
                        var registerRequest = new RegisterRequest
                        {
                            Email = email,
                            Haslo = "20u[y;h}6~uwTgyGI%Oo^T,8!",
                            Imie = email.Split('@')[0],
                            Nazwisko = email.Split('@')[1],
                            Numer = null,
                        };

                        var registerResult = await ApiService.AdministracjaRepo.RejestracjaPost(registerRequest);

                        if (registerResult.Data)
                        {
                            Snackbar.Add("Konto zostało utworzone. Możesz się teraz zalogować.", Severity.Success);
                            Navigation.NavigateTo("/index");
                        }
                        else
                        {
                            Snackbar.Add("Nie udało się utworzyć konta.", Severity.Error);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Wystąpił nieoczekiwany błąd, spróbuj ponownie później.", Severity.Error);
            }
        }
    }
    
    private readonly Func<string, IEnumerable<string>> _validateEmail = email =>
    {
        if (string.IsNullOrWhiteSpace(email))
            return new[] { "Email jest wymagany" };

        if (!new EmailAddressAttribute().IsValid(email))
            return new[] { "Wprowadź poprawny adres email" };

        return Array.Empty<string>();
    };

    private async Task ZalogujSzybkoAdmin()
    {
        _wynik = await ApiService.AdministracjaRepo.LoginPost(new LoginRequest
        {
            Haslo = "Test123@",
            Email = "test@test.test",
        });
        
        Navigation.NavigateTo("/index");
    }
    
    private async Task ZalogujSzybkoSerwisant()
    {
        _wynik = await ApiService.AdministracjaRepo.LoginPost(new LoginRequest
        {
            Haslo = "Test123@",
            Email = "serwisant.test@test.com",
        });
        
        Navigation.NavigateTo("/index");
    }
    
    private async Task ZalogujSzybkoKlient()
    {
        _wynik = await ApiService.AdministracjaRepo.LoginPost(new LoginRequest
        {
            Haslo = "Test123@",
            Email = "klient.test@test.com",
        });
        
        Navigation.NavigateTo("/index");
    }

    private async Task ZalogujUzytkownika()
    {
        _isLoading = true;

        try
        {
            _wynik = await ApiService.AdministracjaRepo.LoginPost(new LoginRequest
            {
                Haslo = _loginModel.Haslo,
                Email = _loginModel.Email,
            });

            if (_wynik != null && _wynik.Error == null)
            {
                Snackbar.Add("Logowanie udane", Severity.Success);
                await Task.Delay(1000);
                Navigation.NavigateTo("/index");
            }
            else
            {
                Snackbar.Add("Nieprawidłowy email lub hasło", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił nieoczekiwany błąd, spróbuj ponownie później.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Niepoprawny format adresu email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Hasło jest wymagane")]
        [MinLength(6, ErrorMessage = "Hasło musi mieć co najmniej 6 znaków")]
        public string Haslo { get; set; } = string.Empty;

        public bool ZapamietajHaslo { get; set; } = true;
    }
}