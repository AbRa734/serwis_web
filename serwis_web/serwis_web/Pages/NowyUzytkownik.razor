@page "/new-user"
@using ApiService.Models
@using Color = MudBlazor.Color
@rendermode InteractiveServer
@inject ApiService.ApiService ApiService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<style>
	.services-container {
		display: flex;
		flex-direction: column;
		gap: 23px;
		padding: 0;
		margin: 0;
		padding-left: 5px;
		padding-right: 20px;
	}

	.services-container h2 {
		font-size: 30px;
		font-weight: 600;
		margin: 0;
		padding: 0;
	}

	.service-back {
		display: flex;
		flex-direction: column;
		gap: 25px;
		width: 100%;
		padding: 30px;
		background-color: #FFFFFF;
		border-radius: 10px;
		box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
		margin: 0;
	}

	.service-tab {
		display: flex;
		width: 100%;
		gap: 100px;
		padding: 0;
		margin: 0;
	}

	.service-col {
		flex: 1;
		display: flex;
		flex-direction: column;
		gap: 12px;
	}

	.service-col h4 {
		font-size: 16px;
		font-weight: 500;
		padding: 0;
		margin: 0;
		color: #606060;
	}

	.service-row {
		display: flex;
		align-items: center;
		gap: 40px;
		width: 100%;
	}

	.single-col {
		display: flex;
		flex-direction: column;
		gap: 10px;
		width: 100%;
	}

	textarea, input, select, option {
		background-color: #F5F6FA;
		border: solid 1px #D5D5D5;
		width: 100%;
		padding: 15px;
		border-radius: 5px;
		color: #A6A6A6;
		font-size: 14px;
		margin-bottom: 10px;
	}

	.textarea {
		height: 287px;
	}

	input, select {
		height: 50px;
	}

	button {
		background-color: #4880FF;
		border: none;
		border-radius: 10px;
		padding: 15px;
		color: #FFFFFF;
		font-size: 16px;
		transition: all 0.3s ease-in-out;
		cursor: pointer;
	}

	button:hover {
		background-color: #336ff5;
	}

	@@media (max-width: 1366px) {
	.service-tab {
		gap: 80px;
	}
	}


	@@media (max-width: 1280px) {
	.services-container {
		gap: 30px;
		padding-right: 15px;
	}

	.service-row {
		gap: 40px;
	}

	.service-tab {
		flex-direction: column;
		gap: 10px;
	}

	textarea, input, select {
		margin-bottom: 15px;
	}

	.single-col {
		gap: 8px;
	}
	}

	@@media (max-width: 768px) {

	.services-container {
		padding-right: 5px;
		padding-top: 10px;
	}

	.service-row {
		flex-direction: column;
		gap: 5px;
	}
	}

</style>

<PageTitle>Utwórz nowego użytkownika</PageTitle>

<div class="services-container">
	<h2>Utwórz nowego użytkownika</h2>

	<div class="service-back">
		@if (_isLoading)
		{
			<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
			<p>Ładowanie...</p>
		}
		else
		{
			<EditForm Model="@_newUser" OnValidSubmit="OnValidSubmit">
				<DataAnnotationsValidator />

				<div class="service-tab">
					<div class="service-col">
						<h4>Rola użytkownika</h4>
						<select @bind="_selectedRoleId">
							@foreach (var role in _roles)
							{
								<option value="@role.RolaUzytkownikaId">@role.Nazwa</option>
							}
						</select>

						<h4>Imię</h4>
						<InputText @bind-Value="_newUser.Imie" placeholder="Imię użytkownika" class="form-control" />
						<ValidationMessage For="@(() => _newUser.Imie)" />

						<h4>Nazwisko</h4>
						<InputText @bind-Value="_newUser.Nazwisko" placeholder="Nazwisko użytkownika" class="form-control" />
						<ValidationMessage For="@(() => _newUser.Nazwisko)" />

						<h4>Numer Telefonu</h4>
						<InputText @bind-Value="_phone" placeholder="Numer telefonu" class="form-control" />

						<h4>Adres Email</h4>
						<InputText @bind-Value="_email" placeholder="Adres email" class="form-control" type="email" />
						<ValidationMessage For="@(() => _email)" />
					</div>
					<div class="service-col">
						<h4>Państwo</h4>
						<InputText @bind-Value="_adres.Kraj" placeholder="Państwo" class="form-control" />

						<h4>Ulica</h4>
						<InputText @bind-Value="_adres.Ulica" placeholder="Ulica" class="form-control" />

						<h4>Numer Domu</h4>
						<InputText @bind-Value="_adres.NumerDomu" placeholder="Numer domu" class="form-control" />

						<h4>Miasto</h4>
						<InputText @bind-Value="_adres.Miasto" placeholder="Miasto" class="form-control" />

						<h4>Kod pocztowy</h4>
						<InputText @bind-Value="_adres.KodPocztowy" placeholder="Kod pocztowy" class="form-control" />
					</div>
				</div>

				@if (!string.IsNullOrEmpty(_errorMessage))
				{
					<div class="error-message">
						@_errorMessage
					</div>
				}

				<button type="submit" class="setting-btn" disabled="@_isSaving">
					@if (_isSaving)
					{
						<span>Zapisywanie...</span>
					}
					else
					{
						<span>Utwórz nowego użytkownika</span>
					}
				</button>
			</EditForm>
		}
	</div>
</div>

@code {
	private UzytkownikDto _newUser = new();
	private AdresDto _adres = new();
	private string _email = string.Empty;
	private string _phone = string.Empty;
	private List<DicRolaUzytkownika> _roles = new();
	private int _selectedRoleId = 0;
	private bool _isLoading = true;
	private bool _isSaving = false;
	private string _errorMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var rolesResult = await ApiService.RoleUzytkownikaRepo.RoleUzytkownikaGet();
			if (rolesResult.Data != null)
			{
				_roles = rolesResult.Data;
				if (_roles.Any())
				{
					_selectedRoleId = _roles.First().RolaUzytkownikaId;
				}
			}
		}
		catch (Exception ex)
		{
			_errorMessage = $"Błąd podczas ładowania ról: {ex.Message}";
		}
		finally
		{
			_isLoading = false;
		}
	}

	private async Task OnValidSubmit()
	{
		if (string.IsNullOrWhiteSpace(_email))
		{
			_errorMessage = "Adres email jest wymagany.";
			return;
		}

		try
		{
			_isSaving = true;
			_errorMessage = string.Empty;

			var emailResult = await ApiService.AdresyEmailRepo.AdresEmailPost(new AdresEmailDto
			{
				Email = _email
			});

			if (emailResult.Error != null || emailResult.Data == null)
			{
				_errorMessage = $"Błąd podczas tworzenia adresu email: {emailResult.Error}";
				return;
			}

			int? phoneId = null;
			if (!string.IsNullOrWhiteSpace(_phone))
			{
				var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuPost(new NumerTelefonuDto
				{
					Numer = _phone
				});

				if (phoneResult.Error != null || phoneResult.Data == null)
				{
					_errorMessage = $"Błąd podczas tworzenia numeru telefonu: {phoneResult.Error}";
					return;
				}

				phoneId = phoneResult.Data.NumerTelefonuId;
			}

			List<int> addressIds = new();
			if (!string.IsNullOrWhiteSpace(_adres.Ulica) || !string.IsNullOrWhiteSpace(_adres.Miasto))
			{
				var adresResult = await ApiService.AdresyRepo.AdresPost(new ApiService.Models.AdresDto
				{
					Kraj = _adres.Kraj,
					Ulica = _adres.Ulica,
					NumerDomu = Convert.ToInt32(_adres.NumerDomu),
					Miasto = _adres.Miasto,
					KodPocztowy = _adres.KodPocztowy
				});

				if (adresResult.Error != null || adresResult.Data == null)
				{
					_errorMessage = $"Błąd podczas tworzenia adresu: {adresResult.Error}";
					return;
				}

				addressIds.Add(adresResult.Data.AdresId);
			}

			_newUser.AdresEmailId = emailResult.Data.AdresEmailId;
			_newUser.NumerTelefonuId = phoneId;
			_newUser.AdresyIds = addressIds;
			_newUser.RoleUzytkownikaIds = new List<int> { _selectedRoleId };

			var userResult = await ApiService.UzytkownicyRepo.UzytkownikPost(_newUser);

			if (userResult.Error != null)
			{
				_errorMessage = $"Błąd podczas tworzenia użytkownika: {userResult.Error}";
				return;
			}

			Snackbar.Add("Użytkownik został utworzony pomyślnie", Severity.Success);
			NavigationManager.NavigateTo("/users");
		}
		catch (Exception ex)
		{
			_errorMessage = $"Wystąpił nieoczekiwany błąd: {ex.Message}";
		}
		finally
		{
			_isSaving = false;
		}
	}

	private class AdresDto
	{
		public string? Kraj { get; set; }
		public string? Ulica { get; set; }
		public string? NumerDomu { get; set; } // Changed from int to string to fix the error
		public string? Miasto { get; set; }
		public string? KodPocztowy { get; set; }
	}
}