@page "/new-user"
@using ApiService.Models
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using System.ComponentModel.DataAnnotations
@using serwis_web.Components
@rendermode InteractiveServer
@inject ApiService.ApiService ApiService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<style>
	.services-container {
		display: flex;
		flex-direction: column;
		gap: 23px;
		padding: 0;
		margin: 0;
		padding-left: 5px;
		padding-right: 20px;
	}

	.services-container h2 {
		font-size: 30px;
		font-weight: 600;
		margin: 0;
		padding: 0;
	}

	.service-back {
		display: flex;
		flex-direction: column;
		gap: 25px;
		width: 100%;
		padding: 30px;
		background-color: #FFFFFF;
		border-radius: 10px;
		box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
		margin: 0;
	}

	.service-tab {
		display: flex;
		width: 100%;
		gap: 100px;
		padding: 0;
		margin: 0;
	}

	.service-col {
		flex: 1;
		display: flex;
		flex-direction: column;
		gap: 12px;
	}

	.service-col h4 {
		font-size: 16px;
		font-weight: 500;
		padding: 0;
		margin: 0;
		color: #606060;
	}

	.service-row {
		display: flex;
		align-items: center;
		gap: 40px;
		width: 100%;
	}

	.single-col {
		display: flex;
		flex-direction: column;
		gap: 10px;
		width: 100%;
	}

	textarea, .form-control, select, option {
		background-color: #F5F6FA;
		border: solid 1px #D5D5D5;
		width: 100%;
		padding: 15px;
		border-radius: 5px;
		color: #A6A6A6;
		font-size: 14px;
		margin-bottom: 10px;
	}

	.textarea {
		height: 287px;
	}

	.form-control, select {
		height: 50px;
	}

	.setting-btn {
		background-color: #4880FF;
		border: none;
		border-radius: 10px;
		padding: 15px;
		color: #FFFFFF;
		font-size: 16px;
		transition: all 0.3s ease-in-out;
		cursor: pointer;
		width: 100%;
		margin-top: 25px;
	}

	.setting-btn:hover {
		background-color: #336ff5;
	}

	.validation-message {
		color: #F44336;
		font-size: 12px;
		margin-top: -5px;
		margin-bottom: 10px;
	}

	.error-message {
		color: #F44336;
		font-size: 14px;
		margin-top: 10px;
		padding: 10px;
		background-color: rgba(244, 67, 54, 0.1);
		border-radius: 5px;
	}

	.field-container {
		margin-bottom: 15px;
	}

	.invalid-field {
		border: 1px solid #F44336 !important;
	}

	@@media (max-width: 1366px) {
		.service-tab {
			gap: 80px;
		}
	}


	@@media (max-width: 1280px) {
		.services-container {
			gap: 30px;
			padding-right: 15px;
		}

		.service-row {
			gap: 40px;
		}

		.service-tab {
			flex-direction: column;
			gap: 10px;
		}

		textarea, .form-control, select {
			margin-bottom: 15px;
		}

		.single-col {
			gap: 8px;
		}
	}

	@@media (max-width: 768px) {

		.services-container {
			padding-right: 5px;
			padding-top: 10px;
		}

		.service-row {
			flex-direction: column;
			gap: 5px;
		}
	}

</style>

<PageTitle>Utwórz nowego użytkownika</PageTitle>

<div class="services-container">
	<h2>Utwórz nowego użytkownika</h2>

	<div class="service-back">
		@if (_isLoading)
		{
			<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Style="align-items: center; justify-content: center; display: flex; margin: 0 auto;"/>
		}
		else
		{
			<EditForm Model="@_newUser" OnValidSubmit="OnValidSubmit">
				<DataAnnotationsValidator />

				<div class="service-tab">
					<div class="service-col">
						<h4>Rola użytkownika <span style="color: #F44336">*</span></h4>
						<select @bind="_selectedRoleId" class="@(_formSubmitted && _roleValidationMessage != string.Empty ? "invalid-field" : "")">
							<option value="0">Wybierz rolę</option>
							@foreach (var role in _roles)
							{
								<option value="@role.RolaUzytkownikaId">@role.Nazwa</option>
							}
						</select>
						@if (_formSubmitted && _roleValidationMessage != string.Empty)
						{
							<div class="validation-message">@_roleValidationMessage</div>
						}

						<h4>Imię <span style="color: #F44336">*</span></h4>
						<InputText @bind-Value="_newUser.Imie" placeholder="Imię użytkownika" class="@(_formSubmitted && string.IsNullOrEmpty(_newUser.Imie) ? "form-control invalid-field" : "form-control")" />
						@if (_formSubmitted && string.IsNullOrEmpty(_newUser.Imie))
						{
							<div class="validation-message">Imię jest wymagane</div>
						}

						<h4>Nazwisko <span style="color: #F44336">*</span></h4>
						<InputText @bind-Value="_newUser.Nazwisko" placeholder="Nazwisko użytkownika" class="@(_formSubmitted && string.IsNullOrEmpty(_newUser.Nazwisko) ? "form-control invalid-field" : "form-control")" />
						@if (_formSubmitted && string.IsNullOrEmpty(_newUser.Nazwisko))
						{
							<div class="validation-message">Nazwisko jest wymagane</div>
						}

						<h4>Numer Telefonu</h4>
						<InputText @bind-Value="_phone" placeholder="Numer telefonu" class="@(_formSubmitted && _phoneValidationMessage != string.Empty ? "form-control invalid-field" : "form-control")" />
						@if (_formSubmitted && _phoneValidationMessage != string.Empty)
						{
							<div class="validation-message">@_phoneValidationMessage</div>
						}

						<h4>Adres Email <span style="color: #F44336">*</span></h4>
						<InputText @bind-Value="_email" placeholder="Adres email" class="@(_formSubmitted && _emailValidationMessage != string.Empty ? "form-control invalid-field" : "form-control")" type="email" />
						@if (_formSubmitted && _emailValidationMessage != string.Empty)
						{
							<div class="validation-message">@_emailValidationMessage</div>
						}
					</div>
					<div class="service-col">
						<h4>Państwo</h4>
						<InputText @bind-Value="_adres.Kraj" placeholder="Państwo" class="form-control" />

						<h4>Ulica</h4>
						<InputText @bind-Value="_adres.Ulica" placeholder="Ulica" class="form-control" />

						<h4>Numer Domu</h4>
						<InputText @bind-Value="_adres.NumerDomu" placeholder="Numer domu" class="@(_formSubmitted && _numerDomuValidationMessage != string.Empty ? "form-control invalid-field" : "form-control")" />
						@if (_formSubmitted && _numerDomuValidationMessage != string.Empty)
						{
							<div class="validation-message">@_numerDomuValidationMessage</div>
						}

						<h4>Miasto</h4>
						<InputText @bind-Value="_adres.Miasto" placeholder="Miasto" class="form-control" />

						<h4>Kod pocztowy</h4>
						<InputText @bind-Value="_adres.KodPocztowy" placeholder="Kod pocztowy" class="@(_formSubmitted && _kodPocztowyValidationMessage != string.Empty ? "form-control invalid-field" : "form-control")" />
						@if (_formSubmitted && _kodPocztowyValidationMessage != string.Empty)
						{
							<div class="validation-message">@_kodPocztowyValidationMessage</div>
						}
					</div>
				</div>

				@if (!string.IsNullOrEmpty(_errorMessage))
				{
					<div class="error-message">
						@_errorMessage
					</div>
				}

				<button type="submit" class="setting-btn" disabled="@_isSaving">
					@if (_isSaving)
					{
						<span>Zapisywanie...</span>
					}
					else
					{
						<span>Utwórz nowego użytkownika</span>
					}
				</button>
			</EditForm>
		}
	</div>
</div>

<div class="help-button-container">
	<AccessibilityWidget/>
</div>

@code {
	private UzytkownikDto _newUser = new();
	private AdresDto _adres = new();
	private string _email = string.Empty;
	private string _phone = string.Empty;
	private List<DicRolaUzytkownika> _roles = new();
	private int _selectedRoleId = 0;
	private bool _isLoading = true;
	private bool _isSaving = false;
	private string _errorMessage = string.Empty;
	private int _uzytkownikId;
	private bool _formSubmitted = false;

	private string _emailValidationMessage = string.Empty;
	private string _phoneValidationMessage = string.Empty;
	private string _roleValidationMessage = string.Empty;
	private string _numerDomuValidationMessage = string.Empty;
	private string _kodPocztowyValidationMessage = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		_isLoading = true;
		try
		{
			var rolesResult = await ApiService.RoleUzytkownikaRepo.RoleUzytkownikaGet();
			if (rolesResult.Data != null)
			{
				_roles = rolesResult.Data;
				if (_roles.Any())
				{
					_selectedRoleId = _roles.First().RolaUzytkownikaId;
				}
			}
		}
		catch (Exception ex)
		{
			_errorMessage = $"Błąd podczas ładowania ról: {ex.Message}";
		}
		finally
		{
			_isLoading = false;
		}
	}

	private bool ValidateForm()
	{
		bool isValid = true;

		_emailValidationMessage = string.Empty;
		_phoneValidationMessage = string.Empty;
		_roleValidationMessage = string.Empty;
		_numerDomuValidationMessage = string.Empty;
		_kodPocztowyValidationMessage = string.Empty;

		if (_selectedRoleId <= 0)
		{
			_roleValidationMessage = "Wybierz rolę użytkownika";
			isValid = false;
		}

		if (string.IsNullOrWhiteSpace(_email))
		{
			_emailValidationMessage = "Adres email jest wymagany";
			isValid = false;
		}
		else if (!IsValidEmail(_email))
		{
			_emailValidationMessage = "Nieprawidłowy format adresu email";
			isValid = false;
		}

		if (!string.IsNullOrWhiteSpace(_phone) && !IsValidPhoneNumber(_phone))
		{
			_phoneValidationMessage = "Nieprawidłowy format numeru telefonu";
			isValid = false;
		}

		if (string.IsNullOrWhiteSpace(_newUser.Imie))
		{
			isValid = false;
		}

		if (string.IsNullOrWhiteSpace(_newUser.Nazwisko))
		{
			isValid = false;
		}

		if (!string.IsNullOrWhiteSpace(_adres.NumerDomu))
		{
			if (!int.TryParse(_adres.NumerDomu, out _))
			{
				_numerDomuValidationMessage = "Numer domu musi być liczbą";
				isValid = false;
			}
		}

		if (!string.IsNullOrWhiteSpace(_adres.KodPocztowy) && !IsValidPostalCode(_adres.KodPocztowy))
		{
			_kodPocztowyValidationMessage = "Nieprawidłowy format kodu pocztowego";
			isValid = false;
		}

		return isValid;
	}

	private bool IsValidEmail(string email)
	{
		try
		{
			var addr = new System.Net.Mail.MailAddress(email);
			return addr.Address == email;
		}
		catch
		{
			return false;
		}
	}

	private bool IsValidPhoneNumber(string phone)
	{
		return System.Text.RegularExpressions.Regex.IsMatch(phone, @"^(\+)?[\d\s-]{9,15}$");
	}

	private bool IsValidPostalCode(string postalCode)
	{
		return System.Text.RegularExpressions.Regex.IsMatch(postalCode, @"^\d{2}-\d{3}$");
	}

	private async Task OnValidSubmit()
	{
		_formSubmitted = true;
		
		if (!ValidateForm())
		{
			return;
		}

		try
		{
			_isSaving = true;
			_errorMessage = string.Empty;

			var emailResult = await ApiService.AdresyEmailRepo.AdresEmailPost(new AdresEmailDto
			{
				Email = _email
			});

			if (emailResult.Error != null || emailResult.Data == null)
			{
				_errorMessage = $"Błąd podczas tworzenia adresu email: {emailResult.Error}";
				return;
			}

			int? phoneId = null;
			if (!string.IsNullOrWhiteSpace(_phone))
			{
				var phoneResult = await ApiService.NumeryTelefonuRepo.NumerTelefonuPost(new NumerTelefonuDto
				{
					Numer = _phone
				});

				if (phoneResult.Error != null || phoneResult.Data == null)
				{
					_errorMessage = $"Błąd podczas tworzenia numeru telefonu: {phoneResult.Error}";
					return;
				}

				phoneId = phoneResult.Data.NumerTelefonuId;
			}

			List<int> addressIds = new();
			if (!string.IsNullOrWhiteSpace(_adres.Ulica) || !string.IsNullOrWhiteSpace(_adres.Miasto))
			{
				int numerDomu = 0;
				if (!string.IsNullOrEmpty(_adres.NumerDomu))
				{
					int.TryParse(_adres.NumerDomu, out numerDomu);
				}

				var adresResult = await ApiService.AdresyRepo.AdresPost(new ApiService.Models.AdresDto
				{
					Kraj = _adres.Kraj,
					Ulica = _adres.Ulica,
					NumerDomu = numerDomu,
					Miasto = _adres.Miasto,
					KodPocztowy = _adres.KodPocztowy
				});

				if (adresResult.Error != null || adresResult.Data == null)
				{
					_errorMessage = $"Błąd podczas tworzenia adresu: {adresResult.Error}";
					return;
				}

				addressIds.Add(adresResult.Data.AdresId);
			}

			_newUser.AdresEmailId = emailResult.Data.AdresEmailId;
			_newUser.NumerTelefonuId = phoneId;
			_newUser.AdresId = addressIds.FirstOrDefault();
			_newUser.RolaUzytkownikaId = _selectedRoleId;
			_newUser.CzyAktywny = true;


			var userResult = await ApiService.UzytkownicyRepo.UzytkownikPost(_newUser);

			if (userResult.Error != null)
			{
				_errorMessage = $"Błąd podczas tworzenia użytkownika: {userResult.Error}";
				return;
			}

			_uzytkownikId = userResult.Data.UzytkownikId;
			
			var userRole = _roles.FirstOrDefault(role => role.RolaUzytkownikaId == _newUser.RolaUzytkownikaId)?.Nazwa;

			if (userRole == "Serwisant")
			{
				var servicemenResult = await ApiService.SerwisanciRepo.SerwisantPost(new SerwisantDto
				{
					UzytkownikId = _uzytkownikId,
					SerwisyIds = new List<int>(),
					CzyAktywny = true
				});

				if (servicemenResult.Error != null)
				{
					_errorMessage = $"Błąd podczas tworzenia serwisanta: {userResult.Error}";
					return;
				}
			}
			
			var clientResult = await ApiService.KlienciRepo.KlientPost(new KlientDto
			{
				UzytkownikId = _uzytkownikId,
				TypKlientaId = 0
			});

			if (clientResult.Error != null)
			{
				_errorMessage = $"Błąd podczas tworzenia klienta: {userResult.Error}";
				return;
			}
			
			
			String hasloNowegoUzytkownika = GenerateRandomPassword();
			var autoryzacjaResult = await ApiService.AdministracjaRepo.RejestracjaUzytkownikaWIdentity(new RegisterRequestIdentity
			{
				Email = emailResult.Data.Email,
				Haslo = hasloNowegoUzytkownika,
			});
			
			if (autoryzacjaResult.Error != null)
			{
				_errorMessage = $"Błąd podczas tworzenia użytkownika: {userResult.Error}";
				return;
			}
			
			var emailRequest = new KontaktEmailRequest
			{
				EmailOdbiorcy = emailResult.Data.Email,
				Temat = "Rejestracja użytkownika",
				Tresc = $"Utworzono konto{Environment.NewLine}Email:{emailResult.Data.Email}{Environment.NewLine}Hasło:{hasloNowegoUzytkownika}"
			};

			var result = await ApiService.KontaktEmailRepo.KontaktEmailPost(emailRequest);

			if (result.Error != null)
			{
				Snackbar.Add($"Wystąpił błąd podczas wysyłania wiadomości.", Severity.Error);
			}

			Snackbar.Add("Użytkownik został utworzony pomyślnie", Severity.Success);
			NavigationManager.NavigateTo("/users");
		}
		catch (Exception ex)
		{
			_errorMessage = $"Wystąpił nieoczekiwany błąd: {ex.Message}";
		}
		finally
		{
			_isSaving = false;
		}
	}

	private class AdresDto
	{
		public string? Kraj { get; set; }
		public string? Ulica { get; set; }
		public string? NumerDomu { get; set; }
		public string? Miasto { get; set; }
		public string? KodPocztowy { get; set; }
	}
	
	private static string GenerateRandomPassword()
	{
		const string uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		const string lowercase = "abcdefghijklmnopqrstuvwxyz";
		const string digits = "0123456789";
		const string special = "!@#$%^&*()-_=+[]{}|;:,.<>?";
    
		Random random = new Random();
		char[] password = new char[10];
    
		password[0] = uppercase[random.Next(uppercase.Length)];
		password[1] = special[random.Next(special.Length)];  
		password[2] = digits[random.Next(digits.Length)];     
    
		string allChars = uppercase + lowercase + digits + special;
		for (int i = 3; i < 10; i++)
		{
			password[i] = allChars[random.Next(allChars.Length)];
		}
    
		for (int i = 0; i < password.Length; i++)
		{
			int swapIndex = random.Next(password.Length);
			(password[i], password[swapIndex]) = (password[swapIndex], password[i]);
		}
    
		return new string(password);
	}
}