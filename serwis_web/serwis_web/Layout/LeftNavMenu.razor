@using ApiService
@using ApiService.Models
@using Color = MudBlazor.Color
@inject NavigationManager Navigation
@inject ApiService ApiService
@inject ISnackbar Snackbar
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<style>
    .mud-drawer.mud-drawer-mini {
        height: auto !important;
        transition: none !important;
    }

    /*.mud-overlay .mud-overlay-scrim.mud-overlay-dark {
        border-color: transparent!important;
        background-color: transparent!important;
    }*/

    .mud-drawer-mini .mud-nav-link-text {
        display: none !important;
    }

    .mud-drawer-mini.mud-drawer-open .mud-nav-link-text {
        display: block !important;
    }

    .mud-drawer-mini .mud-nav-link {
        justify-content: center;
        padding: 8px 16px;
    }

    .mud-drawer-mini.mud-drawer-open .mud-nav-link {
        justify-content: center;
    }
</style>

<MudDrawer @bind-Open="_isDrawerOpen" Variant="DrawerVariant.Mini" Elevation="0"
           Class="@(_isDrawerOpen ? "mud-drawer-mini mud-drawer-open" : "mud-drawer-mini")">
    <MudNavMenu>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@ToggleDrawer"/>

        @foreach (var menuItem in GetMenuItems())
        {
            @if (menuItem.IsDivider)
            {
                <MudDivider/>
                continue;
            }

            @if (menuItem.ShowForRoles != null && (_uzytkownik?.RolaUzytkownika == null ||
                                                   !menuItem.ShowForRoles.Contains(_uzytkownik.RolaUzytkownika.Nazwa)))
            {
                continue;
            }

            <MudNavLink Href="@menuItem.Path" Match="NavLinkMatch.Prefix" Icon="@menuItem.IconClass"
                        Class="@IsActive(menuItem.Path)">
                <span class="mud-nav-link-text">@menuItem.Label</span>
            </MudNavLink>
        }
        <MudDivider/>
        <MudNavLink @onclick="@LogoutUser" Icon="fa-solid fa-power-off" Class="nav-link">
            <span class="mud-nav-link-text">Wyloguj się</span>
        </MudNavLink>
    </MudNavMenu>
</MudDrawer>

@code {
    private bool _isDrawerOpen = true;
    private string? _currentUrl;
    private Uzytkownik? _uzytkownik;

    private void LogoutUser()
    {
        JSRuntime.InvokeVoidAsync("eval", "document.cookie.split(';').forEach(function(c) { document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/'); });");
        Navigation.NavigateTo("/", true);
    }

    protected override async Task OnInitializedAsync()
    {
        _currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        if (!_currentUrl.StartsWith("/"))
        {
            _currentUrl = "/" + _currentUrl;
        }

        Navigation.LocationChanged += LocationChanged!;

        try
        {
            _uzytkownik = await ApiService.GetUzytkownik();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas pobierania danych użytkownika: {ex.Message}", Severity.Error);
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= LocationChanged!;
    }

    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        _currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        if (!_currentUrl.StartsWith("/"))
        {
            _currentUrl = "/" + _currentUrl;
        }

        StateHasChanged();
    }

    private void ToggleDrawer()
    {
        _isDrawerOpen = !_isDrawerOpen;
    }

    private bool IsCurrentPage(string path)
    {
        return _currentUrl!.Equals(path, StringComparison.OrdinalIgnoreCase) ||
               _currentUrl.StartsWith(path + "/", StringComparison.OrdinalIgnoreCase);
    }

    private string IsActive(string path) => IsCurrentPage(path) ? "nav-item-active" : "nav-item";

    private string GetUserRole()
    {
        if (_uzytkownik?.RolaUzytkownika == null)
            return "Użytkownik";

        return _uzytkownik.RolaUzytkownika.Nazwa;
    }

    private List<MenuItem> GetMenuItems()
    {
        var userRole = GetUserRole();

        var allMenuItems = new List<MenuItem>
        {
            new MenuItem
            {
                Path = "/index",
                IconClass = userRole == "Klient" ? "fa-solid fa-house" : "fa-solid fa-gauge",
                Label = userRole == "Klient" ? "Strona Główna" : "Panel Kontrolny"
            },

            new MenuItem { Path = "/orders", IconClass = "fa-solid fa-list-check", Label = "Lista Zleceń" },
            new MenuItem { Path = "/services", IconClass = "fa-solid fa-database", Label = "Usługi" },

            new MenuItem
            {
                Path = "/users",
                IconClass = "fa-solid fa-user-group",
                Label = "Użytkownicy",
                ShowForRoles = ["Administrator"]
            },

            new MenuItem
            {
                Path = "/new-user",
                IconClass = "fa-solid fa-user-group",
                Label = "Nowy Użytkownik",
                ShowForRoles = ["Administrator"]
            },

            new MenuItem
            {
                Path = "/avability",
                IconClass = "fa-solid fa-calendar-days",
                Label = "Dostępność",
                ShowForRoles = ["Administrator", "Serwisant"]
            },

            new MenuItem { IsDivider = true },

            new MenuItem { Path = "/report", IconClass = "fa-solid fa-file", Label = "Raport" },

            new MenuItem
            {
                Path = "/statistics",
                IconClass = "fa-solid fa-chart-simple",
                Label = "Statystyki",
                ShowForRoles = ["Administrator", "Serwisant"]
            },

            new MenuItem { Path = "/contact", IconClass = "fa-solid fa-user-group", Label = "Kontakt" },
            new MenuItem { Path = "/settings", IconClass = "fa-solid fa-gear", Label = "Ustawienia" },
            new MenuItem
            {
                Path = "/bank/metody-platnosci", IconClass = "fa-solid fa-money-bill", Label = "Metody płatności",
                ShowForRoles = ["Administrator"]
            },
            new MenuItem
            {
                Path = "/bank/priorytety", IconClass = "fa-solid fa-flag", Label = "Priorytety",
                ShowForRoles = ["Administrator"]
            },
            new MenuItem
            {
                Path = "/bank/role-uzytkownika",
                IconClass = "fa-solid fa-user-tag",
                Label = "Role użytkownika",
                ShowForRoles = ["Administrator"]
            },
            new MenuItem
            {
                Path = "/bank/statusy",
                IconClass = "fa-solid fa-tag",
                Label = "Statusy",
                ShowForRoles = ["Administrator"]
            },
            new MenuItem
            {
                Path = "/bank/typy-klienta",
                IconClass = "fa-solid fa-users",
                Label = "Typy klienta",
                ShowForRoles = ["Administrator"]
            },
            new MenuItem
            {
                Path = "/bank/typy-oceny",
                IconClass = "fa-solid fa-star",
                Label = "Typy oceny",
                ShowForRoles = ["Administrator"]
            },
            new MenuItem
            {
                Path = "/bank/typy-serwisu",
                IconClass = "fa-solid fa-screwdriver-wrench",
                Label = "Typy serwisu",
                ShowForRoles = ["Administrator"]
            },
        };

        return allMenuItems;
    }

    private class MenuItem
    {
        public string Path { get; set; } = null!;
        public string IconClass { get; set; } = null!;
        public string Label { get; set; } = null!;
        public string[] ShowForRoles { get; set; } = null!;
        public bool IsDivider { get; set; }
    }

}