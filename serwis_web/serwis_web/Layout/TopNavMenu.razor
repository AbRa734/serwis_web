@using ApiService
@using ApiService.Models
@using Color = MudBlazor.Color
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime

<style>
    .search-container {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .search-button {
        height: 40px;
        min-width: 40px;
        padding: 0;
    }

    .search-icon-button {
        cursor: pointer;
        color: #4880FF;
    }

    @@media (max-width: 768px) {
        .search-input {
            display: none;
        }

        .search-button {
            display: none;
        }
    }
</style>

<div class="navbar-container">
    <div class="logo-search">
        <a class="navbar-logo" href="/index">Serwis <span style="color: #4880FF">24</span></a>
        <div class="search-container">
            <MudTextField @bind-Value="searchText" Label="Wyszukaj" Variant="Variant.Outlined"
                          Margin="Margin.Dense" Adornment="Adornment.Start"
                          OnKeyUp="@HandleKeyUp"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          AdornmentColor="Color.Primary"
                          Class="search-input"></MudTextField>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowForward"
                           Color="Color.Primary"
                           Class="search-button"
                           Disabled="@string.IsNullOrWhiteSpace(searchText)"
                           OnClick="@(() => NavigateToSearch())" />
        </div>
    </div>
    <div class="notifications-user">
        <MudAvatar Color="@GetAvatarColor()" Variant="Variant.Outlined" Style="cursor: pointer;" @onclick="@(() => NavigationManager.NavigateTo("/settings"))">
            @GetAvatarText()
        </MudAvatar>
        <div class="user-inf">
            <div class="user-name">@(_uzytkownik?.Imie ?? "Użytkownik")</div>
            <div class="user-role">@GetUserRole()</div>
        </div>
        <div class="dropdown-container">
            <i class="fa-solid @(_isDropdownOpen ? "fa-angle-up" : "fa-angle-down")" @onclick="ToggleDropdown"></i>
            @if (_isDropdownOpen)
            {
                <div class="user-dropdown">
                    <div class="dropdown-header">
                        <div class="dropdown-avatar">
                            <i class="fa-solid fa-user"></i>
                        </div>
                        <div class="dropdown-user-info">
                            <div class="dropdown-name">@(_uzytkownik?.Imie ?? "") @(_uzytkownik?.Nazwisko ?? "")</div>
                            <div class="dropdown-email">@(_uzytkownik?.AdresEmail.Email ?? "")</div>
                        </div>
                    </div>
                    <div class="dropdown-divider"></div>
                    <div class="dropdown-menu-items">
                        <a href="/settings" class="dropdown-item" @onclick="ToggleDropdown">
                            <i class="fa-solid fa-gear"></i> Ustawienia profilu
                        </a>
                        <div class="dropdown-divider"></div>
                        <a class="dropdown-item" @onclick="LogoutUser" style="cursor: pointer;">
                            <i class="fa-solid fa-power-off"></i> Wyloguj się
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private Uzytkownik? _uzytkownik = null;
    private string? searchText = null;
    private bool _isDropdownOpen = false;
    
    private void LogoutUser()
    {
        JSRuntime.InvokeVoidAsync("eval", "document.cookie.split(';').forEach(function(c) { document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/'); });");
        _isDropdownOpen = false;
        NavigationManager.NavigateTo("/", true);
    }
    
    private Color GetAvatarColor()
    {
        if (_uzytkownik?.RolaUzytkownika == null)
            return Color.Error;
        
        return _uzytkownik.RolaUzytkownika.Nazwa?.ToLower() switch
        {
            "klient" => Color.Info,
            "serwisant" => Color.Success,
            _ => Color.Error
        };
    }
    
    private string GetAvatarText()
    {
        if (!string.IsNullOrEmpty(_uzytkownik?.Imie))
            return _uzytkownik.Imie.Substring(0, 1).ToUpper();
        else if (!string.IsNullOrEmpty(_uzytkownik?.AdresEmail?.Email))
            return _uzytkownik.AdresEmail.Email.Substring(0, 1).ToUpper();
        else
            return "U";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _uzytkownik = await ApiService.GetUzytkownik();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas pobierania danych użytkownika.", Severity.Error);
        }
    }

    private void ToggleDropdown()
    {
        _isDropdownOpen = !_isDropdownOpen;
    }

    private string GetUserRole()
    {
        if (_uzytkownik?.RolaUzytkownika == null)
            return "Brak roli";

        return _uzytkownik.RolaUzytkownika.Nazwa;
    }

    private void NavigateToSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(searchText)}");
        }
    }

    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            NavigateToSearch();
        }
    }
}