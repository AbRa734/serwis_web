@using ApiService.Models
@using System.ComponentModel.DataAnnotations
@using Color = MudBlazor.Color
@using Colors = DesignSystem.Tokens.Colors
@using DialogResult = MudBlazor.DialogResult

<style>
    .container {
        border-radius: 15px;
        box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
        padding: 10px 10px 15px 10px;
    }

    .tittle {
        font-size: 24px;
        font-weight: 600
    }

    .cancel {
        background-color: #979797;
        color: #FFFFFF;
        padding: 10px 20px;
        font-size: 14px;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
        text-transform: none;
        border: none;
        border-radius: 10px;
    }

    .cancel:hover {
        background-color: #858383
    }

    .save {
        background-color: #4880FF;
        color: #FFFFFF;
        padding: 10px 20px;
        font-size: 14px;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
        text-transform: none;
        border: none;
        border-radius: 10px;
    }

    .save:hover {
        background-color: #336ff5;
    }

    .validation-message {
        color: #ff5252;
        font-size: 0.75rem;
        margin-top: 4px;
    }
</style>

<MudDialog Class="container">
    <TitleContent>
        <MudText Class="tittle">@(IsNew ? "Dodaj rolę użytkownika" : "Edytuj rolę użytkownika")</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@_model" OnValidSubmit="Submit">
            <DataAnnotationsValidator />

            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_model.Nazwa" Label="Nazwa" Required="true"
                                  Validation="@(new Func<string, string>(ValidateNazwa))"
                                  For="@(() => _model.Nazwa)" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_model.Opis" Label="Opis" Lines="1" Class="mt-3"
                                  Validation="@(new Func<string, string>(ValidateOpis))"
                                  For="@(() => _model.Opis)" />
                </MudItem>

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Error" Class="mt-3">@_errorMessage</MudAlert>
                    </MudItem>
                }
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton Class="cancel" OnClick="Cancel">Anuluj</MudButton>
        <MudButton Class="save" OnClick="Submit" Disabled="@(!IsFormValid())">Zapisz</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;

    [Parameter] public DicRolaUzytkownikaDto Rola { get; set; } = new();
    [Parameter] public bool IsNew { get; set; }

    private string _errorMessage = string.Empty;

    private class RolaModel
    {
        [Required(ErrorMessage = "Nazwa jest wymagana")]
        [StringLength(100, ErrorMessage = "Nazwa nie może przekraczać 100 znaków")]
        [MinLength(2, ErrorMessage = "Nazwa musi zawierać co najmniej 2 znaki")]
        public string Nazwa { get; set; } = string.Empty;

        [StringLength(250, ErrorMessage = "Opis nie może przekraczać 250 znaków")]
        public string Opis { get; set; } = string.Empty;
    }

    private RolaModel _model = new();

    protected override void OnInitialized()
    {
        if (Rola != null)
        {
            _model.Nazwa = Rola.Nazwa ?? string.Empty;
            _model.Opis = Rola.Opis ?? string.Empty;
        }
    }

    private string ValidateNazwa(string nazwa)
    {
        if (string.IsNullOrWhiteSpace(nazwa))
            return "Nazwa jest wymagana";

        if (nazwa.Length < 2)
            return "Nazwa musi zawierać co najmniej 2 znaki";

        if (nazwa.Length > 100)
            return "Nazwa nie może przekraczać 100 znaków";

        return null;
    }

    private string ValidateOpis(string opis)
    {
        if (opis != null && opis.Length > 250)
            return "Opis nie może przekraczać 250 znaków";

        return null;
    }

    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(_model.Nazwa) &&
               _model.Nazwa.Length >= 2 &&
               _model.Nazwa.Length <= 100 &&
               (string.IsNullOrEmpty(_model.Opis) || _model.Opis.Length <= 250);
    }

    private void Submit()
    {
        _errorMessage = string.Empty;

        if (!IsFormValid())
        {
            _errorMessage = "Popraw błędy w formularzu przed zapisaniem";
            return;
        }

        try
        {
            Rola.Nazwa = _model.Nazwa;
            Rola.Opis = _model.Opis;

            MudDialog.Close(DialogResult.Ok(Rola));
        }
        catch (Exception ex)
        {
            _errorMessage = $"Wystąpił błąd: {ex.Message}";
        }
    }

    private void Cancel() => MudDialog.Cancel();
}