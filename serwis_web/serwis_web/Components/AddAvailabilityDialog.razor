@using ApiService.Models
@using System.ComponentModel.DataAnnotations
@using Color = MudBlazor.Color
@using DialogResult = MudBlazor.DialogResult
@using Size = MudBlazor.Size
@inject ApiService.ApiService ApiService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <EditForm Model="@_model" OnValidSubmit="Submit">
            <DataAnnotationsValidator />

            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="int" Label="Serwisant" @bind-Value="_model.SerwisantId" Required
                              Validation="@(new Func<int, string>(ValidateTechnician))"
                              For="@(() => _model.SerwisantId)">
                        @foreach (var pair in TechnicianDict ?? new Dictionary<int, string>())
                        {
                            <MudSelectItem Value="@pair.Key">@pair.Value</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12">
                    <MudDatePicker Label="Data od" @bind-Date="_model.DataOd" Required
                                  Validation="@(new Func<DateTimeOffset?, string>(ValidateStartDate))"
                                  For="@(() => _model.DataOd)" />
                </MudItem>

                <MudItem xs="6">
                    <MudTimePicker Label="Godzina od" @bind-Time="_model.CzasOd" Required
                                  Validation="@(new Func<TimeSpan?, string>(ValidateStartTime))"
                                  For="@(() => _model.CzasOd)" />
                </MudItem>

                <MudItem xs="12">
                    <MudDatePicker Label="Data do" @bind-Date="_model.DataDo" Required
                                  Validation="@(new Func<DateTimeOffset?, string>(ValidateEndDate))"
                                  For="@(() => _model.DataDo)" />
                </MudItem>

                <MudItem xs="6">
                    <MudTimePicker Label="Godzina do" @bind-Time="_model.CzasDo" Required
                                  Validation="@(new Func<TimeSpan?, string>(ValidateEndTime))"
                                  For="@(() => _model.CzasDo)" />
                </MudItem>

                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
                    </MudItem>
                }
            </MudGrid>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(_isSaving || !IsFormValid())">
            @if (_isSaving)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                <span>Zapisywanie...</span>
            }
            else
            {
                <span>Zapisz</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public Dictionary<int, string>? TechnicianDict { get; set; }
    
    private string _errorMessage = string.Empty;
    private bool _isSaving = false;

    private class AvailabilityModel
    {
        [Required(ErrorMessage = "Wybierz serwisanta")]
        [Range(1, int.MaxValue, ErrorMessage = "Wybierz serwisanta")]
        public int SerwisantId { get; set; }

        public bool CzyDostepny { get; set; } = true;

        [Required(ErrorMessage = "Data rozpoczęcia jest wymagana")]
        public DateTime? DataOd { get; set; }

        [Required(ErrorMessage = "Godzina rozpoczęcia jest wymagana")]
        public TimeSpan? CzasOd { get; set; }

        [Required(ErrorMessage = "Data zakończenia jest wymagana")]
        public DateTime? DataDo { get; set; }

        [Required(ErrorMessage = "Godzina zakończenia jest wymagana")]
        public TimeSpan? CzasDo { get; set; }
    }

    private AvailabilityModel _model = new();
    
    protected override void OnInitialized()
    {
        _model.DataOd = DateTimeOffset.UtcNow.DateTime;
        _model.DataDo = DateTimeOffset.UtcNow.DateTime;
    
        _model.CzasOd = new TimeSpan(8, 0, 0);
        _model.CzasDo = new TimeSpan(17, 0, 0);
    
        if (TechnicianDict != null && TechnicianDict.Any())
        {
            _model.SerwisantId = TechnicianDict.Keys.First();
        }
    }

    private string ValidateTechnician(int id)
    {
        if (id <= 0)
            return "Wybierz serwisanta";
        return null;
    }

    private string ValidateStartDate(DateTimeOffset? date)
    {
        if (date == null)
            return "Data rozpoczęcia jest wymagana";
        
        if (date.Value.Date < DateTimeOffset.UtcNow)
            return "Data rozpoczęcia nie może być w przeszłości";
            
        return null;
    }

    private string ValidateStartTime(TimeSpan? time)
    {
        if (time == null)
            return "Godzina rozpoczęcia jest wymagana";
        return null;
    }

    private string ValidateEndDate(DateTimeOffset? date)
    {
        if (date == null)
            return "Data zakończenia jest wymagana";
            
        if (_model.DataOd.HasValue && date.Value.Date < _model.DataOd.Value.Date)
            return "Data zakończenia nie może być wcześniejsza niż data rozpoczęcia";
            
        return null;
    }

    private string ValidateEndTime(TimeSpan? time)
    {
        if (time == null)
            return "Godzina zakończenia jest wymagana";
            
        if (_model.DataOd.HasValue && _model.DataDo.HasValue && 
            _model.CzasOd.HasValue && time.HasValue &&
            _model.DataOd.Value.Date == _model.DataDo.Value.Date && 
            time.Value <= _model.CzasOd.Value)
            return "Godzina zakończenia musi być późniejsza niż godzina rozpoczęcia";
            
        return null;
    }
    
    private bool IsFormValid()
    {
        if (_model.SerwisantId <= 0)
            return false;
            
        if (_model.DataOd == null || _model.CzasOd == null || 
            _model.DataDo == null || _model.CzasDo == null)
            return false;
            
        var dataOd = _model.DataOd.Value.Date.Add(_model.CzasOd.Value);
        var dataDo = _model.DataDo.Value.Date.Add(_model.CzasDo.Value);
        
        return dataDo > dataOd;
    }
    
    private async Task Submit()
    {
        if (!IsFormValid())
        {
            _errorMessage = "Formularz zawiera błędy. Sprawdź wszystkie pola.";
            return;
        }

        try
        {
            _isSaving = true;
            _errorMessage = string.Empty;

            var dataOd = _model.DataOd.Value.Date.Add(_model.CzasOd.Value);
            var dataDo = _model.DataDo.Value.Date.Add(_model.CzasDo.Value);

            var dostepnoscDto = new DostepnoscSerwisantaDto
            {
                SerwisantId = _model.SerwisantId,
                CzyDostepny = _model.CzyDostepny,
                DataOd = dataOd,
                DataDo = dataDo
            };

            MudDialog.Close(DialogResult.Ok(dostepnoscDto));
        }
        catch (Exception ex)
        {
            _errorMessage = $"Wystąpił nieoczekiwany błąd: {ex.Message}";
        }
        finally
        {
            _isSaving = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}