@using ApiService
@using ApiService.Models
@using Color = MudBlazor.Color
@using Colors = DesignSystem.Tokens.Colors
@using DialogResult = MudBlazor.DialogResult
@using Size = MudBlazor.Size
@inject ApiService ApiService

<style>
    .container {
        border-radius: 15px;
        box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1), 0 1px 4px 0 rgba(0, 0, 0, 0.1);
        padding: 10px 10px 15px 10px;
    }

    .tittle {
        font-size: 24px;
        font-weight: 600
    }

    .cancel {
        background-color: #979797;
        color: #FFFFFF;
        padding: 10px 20px;
        font-size: 14px;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
        text-transform: none;
        border: none;
        border-radius: 10px;
    }

    .cancel:hover {
        background-color: #858383
    }

    .save {
        background-color: #4880FF;
        color: #FFFFFF;
        padding: 10px 20px;
        font-size: 14px;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
        text-transform: none;
        border: none;
        border-radius: 10px;
    }

    .save:hover {
        background-color: #336ff5;
    }

</style>
<MudDialog Class="container">
    <TitleContent>
        <MudText Class="tittle">Oceń wykonaną usługę</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer>
            <MudForm @ref="_ratingForm">
                <MudSelect T="int" Label="Wybierz zamówienie" @bind-Value="SelectedOrderId"
                         Required RequiredError="Wybór zamówienia jest wymagany" Class="mb-4">
                    @foreach (var order in Orders.Where(z => z.Status.Nazwa == "Zakończony"))
                    {
                        <MudSelectItem Value="@order.ZamowienieId">Zamówienie #@order.ZamowienieId.ToString("D5")</MudSelectItem>
                    }
                </MudSelect>

                <div class="d-flex flex-column align-center my-4">
                    <MudRating @bind-SelectedValue="SelectedRatingValue" HoveredValueChanged="HandleHoveredValueChanged" Size="Size.Large" />
                    <MudText Typo="Typo.subtitle1" Class="mt-2" Style="color: #BA29FF">@RatingLabelText</MudText>
                </div>

                <MudTextField T="string" Label="Dodatkowy komentarz (opcjonalnie)" @bind-Value="RatingComment"
                            Counter="300" MaxLength="300" Immediate="true" Lines="2"/>
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Class="cancel">Anuluj</MudButton>
        <MudButton OnClick="Submit" Disabled="@(!IsFormValid())" Class="save">Zapisz ocenę</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter] public List<Zamowienie> Orders { get; set; } = new();
    [Parameter] public int SelectedOrderId { get; set; }
    [Parameter] public int SelectedRatingValue { get; set; }
    [Parameter] public string RatingComment { get; set; } = string.Empty;
    
    private MudForm _ratingForm = null!;
    private int? _activeRatingValue;
    private List<DicTypOceny> _typyOceny = new();
    
    protected override async Task OnInitializedAsync()
    {
        var result = await ApiService.TypyOcenyRepo.TypyOcenyGet();
        if (result.Data != null)
        {
            _typyOceny = result.Data.OrderBy(t => t.Ocena).ToList();
        }
        await base.OnInitializedAsync();
    }
    
    private void HandleHoveredValueChanged(int? val) => _activeRatingValue = val;
    
    private string RatingLabelText
    {
        get
        {
            int value = _activeRatingValue ?? SelectedRatingValue;
            var typ = _typyOceny.FirstOrDefault(t => t.Ocena == value);
            return typ?.Nazwa ?? "Oceń naszą usługę!";
        }
    }
    
    private bool IsFormValid() => SelectedRatingValue > 0 && SelectedOrderId > 0;
    
    private void Submit()
    {
        _ratingForm.Validate();
        if (_ratingForm.IsValid)
        {
            var typ = _typyOceny.FirstOrDefault(t => t.Ocena == SelectedRatingValue);
            var result = new RatingDialogResult
            {
                OrderId = SelectedOrderId,
                Rating = SelectedRatingValue,
                TypOcenyId = typ?.TypOcenyId ?? 0,
                Comment = RatingComment
            };
            MudDialog.Close(DialogResult.Ok(result));
        }
    }
    
    private void Cancel() => MudDialog.Cancel();
    
    public class RatingDialogResult
    {
        public int OrderId { get; set; }
        public int Rating { get; set; }
        public int TypOcenyId { get; set; }
        public string Comment { get; set; } = string.Empty;
    }
}