@using ApiService.Models
@using Color = MudBlazor.Color
@using Colors = DesignSystem.Tokens.Colors
@using DialogResult = MudBlazor.DialogResult
@using Size = MudBlazor.Size

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Star" Class="mr-3" Color="Color.Warning" />
            Oceń wykonaną usługę
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer>
            <MudForm @ref="ratingForm">
                <MudSelect T="int" Label="Wybierz zamówienie" @bind-Value="SelectedOrderId"
                         Required RequiredError="Wybór zamówienia jest wymagany" Class="mb-4">
                    @foreach (var order in Orders.Where(z => z.Status.Nazwa == "Zakończony"))
                    {
                        <MudSelectItem Value="@order.ZamowienieId">Zamówienie #@order.ZamowienieId.ToString("D5")</MudSelectItem>
                    }
                </MudSelect>

                <div class="d-flex flex-column align-center my-4">
                    <MudRating @bind-SelectedValue="SelectedRatingValue" HoveredValueChanged="HandleHoveredValueChanged" Size="Size.Large" />
                    <MudText Typo="Typo.subtitle1" Class="mt-2" Style="color: #BA29FF">@RatingLabelText</MudText>
                </div>

                <MudTextField T="string" Label="Dodatkowy komentarz (opcjonalnie)" @bind-Value="RatingComment"
                            Counter="300" MaxLength="300" Immediate="true"
                            Lines="3" Class="mt-2" />
            </MudForm>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Outlined" Color="Color.Default">Anuluj</MudButton>
        <MudButton Color="Color.Primary" 
                   Style="@($"background-color: {Colors.Primary}; color: {Colors.White}")" 
                   OnClick="Submit"
                   Disabled="@(!IsFormValid())">Zapisz ocenę</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter] public List<Zamowienie> Orders { get; set; } = new();
    [Parameter] public int SelectedOrderId { get; set; }
    [Parameter] public int SelectedRatingValue { get; set; }
    [Parameter] public string RatingComment { get; set; } = string.Empty;
    
    private MudForm ratingForm;
    private int? activeRatingValue;
    
    private void HandleHoveredValueChanged(int? val) => activeRatingValue = val;
    
    private string RatingLabelText => (activeRatingValue ?? SelectedRatingValue) switch
    {
        1 => "Bardzo słabo",
        2 => "Słabo",
        3 => "Przeciętnie",
        4 => "Dobrze",
        5 => "Wspaniale!",
        _ => "Oceń naszą usługę!"
    };
    
    private bool IsFormValid() => SelectedRatingValue > 0 && SelectedOrderId > 0;
    
    private void Submit()
    {
        ratingForm.Validate();
        if (ratingForm.IsValid)
        {
            var result = new RatingDialogResult
            {
                OrderId = SelectedOrderId,
                Rating = SelectedRatingValue,
                Comment = RatingComment
            };
            MudDialog.Close(DialogResult.Ok(result));
        }
    }
    
    private void Cancel() => MudDialog.Cancel();
    
    public class RatingDialogResult
    {
        public int OrderId { get; set; }
        public int Rating { get; set; }
        public string Comment { get; set; }
    }
}