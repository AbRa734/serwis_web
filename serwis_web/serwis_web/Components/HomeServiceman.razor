@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size


@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Style="align-items: center; justify-content: center; display: flex; margin: 0 auto;"/>
}
else
{
    <div class="top-section">
        <a class="tab-container" href="/avability">
            <div class="tab-wrapper">
                <h3>Dostępność</h3>
                <p>Określ swoją dostępność w kalendarzu</p>
                <div class="order-box">
                    <i class="fa-regular fa-calendar" style="color: #8280FF"></i>
                </div>
            </div>
        </a>

        <a class="tab-container" href="/statistics">
            <div class="tab-wrapper">
                <h3>Statystyki</h3>
                <p>Śledź ilość i status wykonanych zleceń</p>
                <div class="statistics-box">
                    <i class="fa-solid fa-chart-simple" style="color: #4AD991"></i>
                </div>
            </div>
        </a>

        <a class="tab-container" href="/report">
            <div class="tab-wrapper">
                <h3>Raport</h3>
                <p>Podsumowanie wykonanych usług</p>
                <div class="report-box">
                    <i class="fa-solid fa-file" style="color: #FF9066"></i>
                </div>
            </div>
        </a>
    </div>

    <div class="add-comment" @onclick="OpenCommentDialog">
        <div class="comment-top">
            <div class="comment-box">
                <i class="fa-regular fa-keyboard" style="color: #BA29FF; font-size: 32px;"></i>
            </div>
            <h3>Dodaj uwagi do wykonywanego zlecenia</h3>
        </div>
        <p>Opisz przebieg zlecenia, czy podczas jego wykonywania wystąpiły jakieś problemy? Czy klient zgłasza jakieś uwagi?</p>
    </div>
}

@code {
    private bool _isLoading = true;
    private List<Zamowienie> _zamowienia = new();
    
    public Uzytkownik? _uzytkownikZalogowany;
    private Zamowienie _zamowienie = new Zamowienie();
    public List<int>? _komentarzeIds { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserData();
        await LoadServicesAsync();
    }

    private async Task LoadServicesAsync()
    {
        _isLoading = true;
        try
        {
            var result = await ApiService.ZamowieniaRepo.ZamowieniaGet();
            var user = await ApiService.GetUzytkownik();
            if (result.Data != null)
            {
                _zamowienia = result.Data.Where((x)=>x.Serwisant?.UzytkownikId == user.UzytkownikId).ToList();
                
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania zleceń.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task LoadUserData()
    {
        try
        {
            _uzytkownikZalogowany = await ApiService.GetUzytkownik();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania danych użytkownika.", Severity.Error);
        }
    }

    private async Task OpenCommentDialog()
    {
        var parameters = new DialogParameters
        {
            ["Orders"] = _zamowienia,
            ["User"] = _uzytkownikZalogowany,
        };
        
        
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            Position = DialogPosition.Center
        };

        var dialog = await DialogService.ShowAsync<AddCommentToOrderFromList>("", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var commentResult = (AddCommentToOrderFromList.CommentDialogResult)result.Data;
            
            try
            {
                var orderResult = await ApiService.ZamowieniaRepo.ZamowienieGet(commentResult.OrderId);

                if (orderResult.Error != null)
                {
                    Snackbar.Add($"Błąd podczas pobierania danych zlecenia.", Severity.Error);
                    return;
                }
                _zamowienie = orderResult.Data;
                
                _komentarzeIds = _zamowienie.Komentarze
                    .Select(k => k.KomentarzId)
                    .ToList();
                
                _komentarzeIds.Add(commentResult.CommentId);
                
                var zamowienieDto = new ZamowienieDto
                {
                    SerwisantId = _zamowienie.SerwisantId,
                    KlientId = _zamowienie.KlientId,
                    SerwisId = _zamowienie.Serwis.SerwisId,
                    StatusId = _zamowienie.StatusId,
                    PriorytetId = _zamowienie.PriorytetId,
                    MetodaPlatnosciId = _zamowienie.MetodaPlatnosciId,
                    KomentarzeIds = _komentarzeIds,
                    NumerTelefonuId = _zamowienie.NumerTelefonuId,
                    AdresEmailId = _zamowienie.AdresEmailId,
                    Koszt100 = _zamowienie.Koszt100,
                    Opis = _zamowienie.Opis,
                    AdresId = _zamowienie.AdresId,
                    PlanowanaDataRealizacjiOd = _zamowienie.PlanowanaDataRealizacjiOd,
                    PlanowanaDataRealizacjiDo = _zamowienie.PlanowanaDataRealizacjiDo,
                    ZrealizowanaDataRealizacjiOd = _zamowienie.ZrealizowanaDataRealizacjiOd,
                    ZrealizowanaDataRealizacjiDo = _zamowienie.ZrealizowanaDataRealizacjiDo
                };
                
                var resultOrder = await ApiService.ZamowieniaRepo.ZamowieniePut(commentResult.OrderId, zamowienieDto);
                if (resultOrder.Data != null)
                {
                    Snackbar.Add("Komentarz został dodany pomyślnie", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Błąd podczas dodawania komentarza.", Severity.Error);
                }
                
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Błąd podczas dodawania komentarza.", Severity.Error);
            }
        }
    }
}