@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="top-section">
    <a class="tab-container" href="/avability">
        <div class="tab-wrapper">
            <h3>Dostępność</h3>
            <p>Określ swoją dostępność w kalendarzu</p>
            <div class="order-box">
                <i class="fa-regular fa-calendar" style="color: #8280FF"></i>
            </div>
        </div>
    </a>

    <a class="tab-container" href="/statistics">
        <div class="tab-wrapper">
            <h3>Statystyki</h3>
            <p>Śledź ilość i status wykonanych zleceń</p>
            <div class="statistics-box">
                <i class="fa-solid fa-chart-simple" style="color: #4AD991"></i>
            </div>
        </div>
    </a>

    <a class="tab-container" href="/report">
        <div class="tab-wrapper">
            <h3>Raport</h3>
            <p>Podsumowanie wykonanych usług</p>
            <div class="report-box">
                <i class="fa-solid fa-file" style="color: #FF9066"></i>
            </div>
        </div>
    </a>
</div>

<div class="add-comment" @onclick="OpenCommentDialog">
    <div class="comment-top">
        <div class="comment-box">
            <i class="fa-regular fa-keyboard" style="color: #BA29FF; font-size: 32px;"></i>
        </div>
        <h3>Dodaj uwagi do wykonywanego zlecenia</h3>
    </div>
    <p>Opisz przebieg zlecenia, czy podczas jego wykonywania wystąpiły jakieś problemy? Czy klient zgłasza jakieś uwagi?</p>
</div>

@code {
    private bool _loading = true;
    private List<Zamowienie> _zamowienia = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServicesAsync();
    }

    private async Task LoadServicesAsync()
    {
        _loading = true;
        try
        {
            var result = await ApiService.ZamowieniaRepo.ZamowieniaGet();
            if (result.Data != null)
            {
                _zamowienia = result.Data;
                
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania zleceń.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenCommentDialog()
    {
        var parameters = new DialogParameters
        {
            ["Orders"] = _zamowienia,
            ["CommentText"] = string.Empty,
            ["SelectedOrderId"] = 0
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            Position = DialogPosition.Center
        };

        var dialog = await DialogService.ShowAsync<CommentDialog>("", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var commentResult = (CommentDialog.CommentDialogResult)result.Data;
            try
            {
                // TODO: dodać logikę zapisu komentarza
                // await ApiService.AddComment(commentResult.OrderId, commentResult.Comment);

                Snackbar.Add("Komentarz został dodany pomyślnie", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Błąd podczas dodawania komentarza.", Severity.Error);
            }
        }
    }
}