@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using Transition = MudBlazor.Transition
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="top-section">
    <a class="tab-container" href="/services">
        <div class="tab-wrapper">
            <h3>Nowe zlecenie</h3>
            <p>Utwórz nowe zlecenie serwisowe</p>
            <div class="order-box">
                <i class="fa-solid fa-plus" style="color: #8280FF"></i>
            </div>
        </div>
    </a>

    <a class="tab-container" href="/settings">
        <div class="tab-wrapper">
            <h3>Ustawienia</h3>
            <p>Zarządzaj ustawieniami swojego konta</p>
            <div class="statistics-box">
                <i class="fa-solid fa-gear" style="color: #4AD991"></i>
            </div>
        </div>
    </a>

    <a class="tab-container" href="/report">
        <div class="tab-wrapper">
            <h3>Raport</h3>
            <p>Podsumowanie wykonanych usług</p>
            <div class="report-box">
                <i class="fa-solid fa-file" style="color: #FF9066"></i>
            </div>
        </div>
    </a>
</div>

@***<div class="add-comment" @onclick="OpenCommentDialog">
    <div class="comment-top">
        <div class="comment-box">
            <i class="fa-regular fa-keyboard" style="color: #BA29FF; font-size: 32px;"></i>
        </div>
        <h3>Dodaj komentarz do usługi</h3>
    </div>
    <p>Podziel się swoją opinią na temat wykonanej usługi, aby ulepszyć jakość naszych usług</p>
</div>***@

<div class="add-rate" @onclick="OpenRatingDialog">
    <div class="rate-top">
        <div class="rate-box">
            <i class="fa-solid fa-star" style="color: #FEC53D; font-size: 32px;"></i>
        </div>
        <h3>Oceń wykonaną usługę</h3>
    </div>
    <p>Wystaw ocenę, aby wyrazić swoje zadowolenie z realizacji naszych usług</p>
</div>

<HomeOrdersList/>

<div class="testimonials-section">
    <h3 class="section-title">Opinie naszych klientów</h3>
    @if (_loading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    }
    else if (_ocenySerwisu != null && _ocenySerwisu.Any())
    {
        <MudPaper Class="mud-width-full" Style="margin: 20px 0; background-color: #f9f9f9;">
            <MudCarousel Class="mud-width-full" Style="height: 300px;"
                         ShowArrows="true"
                         ShowBullets="false"
                         EnableSwipeGesture="true"
                         AutoCycle="true"
                         TimerInterval="10000"
                         Color="Color.Transparent"
                         TData="OcenaSerwisu">
                @foreach (var ocena in _ocenySerwisu)
                {
                    <MudCarouselItem Transition="Transition.Fade">
                        <div class="d-flex flex-column justify-center align-center" style="height:100%; padding: 24px;">
                            <MudAvatar Style="width: 80px; height: 80px; margin-bottom: 16px;" Color="Color.Primary">
                                <MudText
                                    Typo="Typo.h4">@GetInitials(GetServicemenFirstname(ocena.SerwisantId), GetServicemenLastname(ocena.SerwisantId))</MudText>
                            </MudAvatar>

                            <MudRating ReadOnly="true" SelectedValue="@GetRatingValue(ocena.TypOcenyId)"
                                       Size="Size.Medium" Style="margin-bottom: 16px;"/>

                            <MudText Typo="Typo.body1"
                                     Style="font-style: italic; text-align: center; max-width: 80%; margin-bottom: 16px;">
                                "@(string.IsNullOrEmpty(ocena.Komentarz) ? "Brak komentarza" : ocena.Komentarz)"
                            </MudText>

                            <MudText Typo="Typo.subtitle1" Style="font-weight: bold;">
                                Usługa: @(GetServiceName(ocena.SerwisId))
                            </MudText>
                            
                            <MudText Typo="Typo.caption" >
                                Serwisant: @($"{GetServicemenFirstname(ocena.SerwisantId)} {GetServicemenLastname(ocena.SerwisantId)}")
                            </MudText>
                            
                            <MudText Typo="Typo.caption" Class="mud-palette-text-secondary">
                                @(ocena.DataDodania.ToString("dd.MM.yyyy"))
                            </MudText>
                        </div>
                    </MudCarouselItem>
                }
            </MudCarousel>
        </MudPaper>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="mt-3">
            Brak opinii do wyświetlenia. Bądź pierwszą osobą, która doda opinię!
        </MudAlert>
    }
</div>
@code {
    private bool _loading = true;
    private List<Zamowienie> _zamowienia = new();
    private List<OcenaSerwisu> _ocenySerwisu = new();
    private Serwisant? _serwisant;
    private List<DicTypSerwisu> _serwisy = new();
    private List<Serwisant> _serwisanci = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServicemenAsync();
        await LoadServiceTypesAsync();
        await LoadServicesAsync();
        await LoadRatingsAsync();
        await LoadTypyOcenyAsync();
    }

    private async Task LoadServicesAsync()
    {
        try
        {
            var result = await ApiService.ZamowieniaRepo.ZamowieniaGet();

            var user = await ApiService.GetUzytkownik();
            
            if (result.Data != null)
            {
                _zamowienia = result.Data.Where((x)=>x.Klient.UzytkownikId == user.UzytkownikId).ToList();
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania zleceń.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
        }
    }
    
    private async Task LoadServicemenAsync()
    {
        try
        {
            var result = await ApiService.SerwisanciRepo.SerwisanciGet();
            if (result.Data != null)
            {
                _serwisanci = result.Data;
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania serwisantów.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd, podczas ładowania serwisantów.", Severity.Error);
        }
    }
    
    private async Task LoadServiceTypesAsync()
    {
        try
        {
            var result = await ApiService.TypySerwisuRepo.TypySerwisuGet();
            if (result.Data != null)
            {
                _serwisy = result.Data;
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania serwisantów.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd, podczas ładowania serwisantów.", Severity.Error);
        }
    }

    private async Task LoadRatingsAsync()
    {
        _loading = true;
        try
        {
            var result = await ApiService.OcenySerwisuRepo.OcenySerwisuGet();
            if (result.Data != null)
            {
                _ocenySerwisu = result.Data
                    .OrderByDescending(o => o.DataDodania)
                    .ToList();
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania ocen serwisu.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd podczas ładowania ocen.", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private string GetInitials(string firstName, string lastName)
    {
        string initials = string.Empty;

        if (!string.IsNullOrEmpty(firstName) && firstName.Length > 0)
            initials += firstName[0];
        else
            initials += "U"; 

        if (!string.IsNullOrEmpty(lastName) && lastName.Length > 0)
            initials += lastName[0];

        return initials.ToUpper();
    }
    
    private List<DicTypOceny> _typyOceny = new();

    private async Task LoadTypyOcenyAsync()
    {
        try
        {
            var result = await ApiService.TypyOcenyRepo.TypyOcenyGet();
            if (result.Data != null)
            {
                _typyOceny = result.Data;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania typów ocen.", Severity.Error);
        }
    }

    private int GetRatingValue(int typOcenyId)
    {
        var typOceny = _typyOceny.FirstOrDefault(t => t.TypOcenyId == typOcenyId);
        return typOceny?.Ocena ?? 3;
    }

    private string GetServicemenFirstname(int serwisantId)
    {
        var result = _serwisanci.Where(s => s.SerwisantId == serwisantId).Single();
        return result.Uzytkownik.Imie;
    }
    
    private string GetServicemenLastname(int serwisantId)
    {
        var result = _serwisanci.Where(s => s.SerwisantId == serwisantId).Single();
        return result.Uzytkownik.Nazwisko;
    }
    
    private string GetServiceName(int serviceId)
    {
        var result = _serwisy.Where(s => s.TypSerwisuId == serviceId).Single();
        return result.Nazwa;
    }

    // private async Task OpenCommentDialog()
    // {
    //     var parameters = new DialogParameters
    //     {
    //         ["Orders"] = _zamowienia,
    //         ["CommentText"] = string.Empty,
    //         ["SelectedOrderId"] = 0
    //     };
    //
    //     var options = new DialogOptions
    //     {
    //         CloseOnEscapeKey = true,
    //         MaxWidth = MaxWidth.Medium,
    //         FullWidth = true,
    //         CloseButton = true,
    //         Position = DialogPosition.Center
    //     };
    //
    //     var dialog = await DialogService.ShowAsync<CommentDialog>("", parameters, options);
    //     var result = await dialog.Result;
    //
    //     if (!result.Canceled)
    //     {
    //         var commentResult = (CommentDialog.CommentDialogResult)result.Data;
    //         try
    //         {
    //             var ocenaDto = new OcenaSerwisuDto
    //             {
    //                 SerwisId = commentResult.OrderId,
    //                 SerwisantId = 1, 
    //                 TypOcenyId = 5,
    //                 Komentarz = commentResult.Comment
    //             };
    //
    //             var apiResult = await ApiService.OcenySerwisuRepo.OcenaSerwisuPost(ocenaDto);
    //
    //             if (apiResult.Data != null)
    //             {
    //                 Snackbar.Add("Komentarz został dodany pomyślnie", Severity.Success);
    //                 await LoadRatingsAsync(); 
    //             }
    //             else
    //             {
    //                 Snackbar.Add($"Błąd podczas dodawania komentarza.", Severity.Error);
    //             }
    //         }
    //         catch (Exception ex)
    //         {
    //             Snackbar.Add($"Błąd podczas dodawania komentarza.", Severity.Error);
    //         }
    //     }
    // }

    private async Task OpenRatingDialog()
    {
        var parameters = new DialogParameters
        {
            ["Orders"] = _zamowienia,
            ["SelectedOrderId"] = 0,
            ["SelectedRatingValue"] = 0,
            ["RatingComment"] = string.Empty
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            Position = DialogPosition.Center
        };

        var dialog = await DialogService.ShowAsync<RatingDialog>("", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var ratingResult = (RatingDialog.RatingDialogResult)result.Data;
            try
            {
                var selectedOrder = _zamowienia.FirstOrDefault(x => x.ZamowienieId == ratingResult.OrderId);

                if (selectedOrder == null)
                {
                    Snackbar.Add("Nie znaleziono wybranego zamówienia", Severity.Error);
                    return;
                }

                // _serwisant = selectedOrder.Serwisant;

                var ocenaDto = new OcenaSerwisuDto
                {
                    SerwisId = selectedOrder.Serwis.SerwisId,
                    SerwisantId = (int)selectedOrder.SerwisantId!,
                    TypOcenyId = ratingResult!.TypOcenyId,
                    Komentarz = ratingResult.Comment
                };
                
                System.Console.WriteLine(System.Text.Json.JsonSerializer.Serialize(ocenaDto));
                
                var apiResult = await ApiService.OcenySerwisuRepo.OcenaSerwisuPost(ocenaDto);

                if (apiResult.Data != null)
                {
                    Snackbar.Add("Ocena została dodana pomyślnie", Severity.Success);
                    await LoadRatingsAsync(); 
                }
                else
                {
                    Snackbar.Add($"Błąd podczas dodawania oceny: {apiResult.Error}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Błąd podczas dodawania oceny: {ex.Message}", Severity.Error);
            }
        }
    }

}