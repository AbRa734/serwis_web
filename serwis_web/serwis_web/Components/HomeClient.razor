@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<style>
    .order-container {
        margin: 0;
        padding: 0;
        min-width: 100%;
        border: none;
    }

    .order-grid {
        border: none;
        box-shadow: none;
    }

    .order-category {
        font-size: 16px;
        font-weight: 500;
        padding: 14px 10px;
        margin: 0;
        text-align: center;
        background-color: #f1f4f9 !important;
        border: none;
    }

    .order-category-left {
        font-size: 16px;
        font-weight: 500;
        padding: 14px 10px;
        margin: 0;
        text-align: center;
        background-color: #f1f4f9 !important;
        border: none;
        border-top-left-radius: 15px !important;
        border-bottom-left-radius: 15px !important;
    }

    .order-category-right {
        font-size: 16px;
        font-weight: 500;
        padding: 14px 10px;
        margin: 0;
        text-align: center;
        background-color: #f1f4f9 !important;
        border: none;
        border-top-right-radius: 15px !important;
        border-bottom-right-radius: 15px !important;
    }

    .order-category-single-item {
        font-size: 16px;
        font-weight: 500;
        text-decoration: none;
    }

    .order-category-single-item-id {
        font-size: 16px;
        font-weight: 500;
        text-decoration: none !important;
        color: #000000 !important;
    }

    .status-finished {
        background-color: #d0f0e4;
        color: #0d8a5f;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    .status-realization {
        background-color: #e6e1ff;
        color: #6952e9;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    .status-canceled {
        background-color: #ffd9d9;
        color: #e75757;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    .status-waiting {
        background-color: #ffe9d1;
        color: #e99c52;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    .status-new {
        background-color: #e6e1ff;
        color: #6952e9;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

    .status-default {
        background-color: inherit;
        border: none;
        min-width: 75% !important;
        border-radius: 5px !important;
        padding: 18px 12px !important;
        font-weight: 600;
        font-size: 16px;
    }

</style>



<div class="home-container">
    <h2>Strona Główna</h2>

    <div class="top-section">
        <a class="tab-container" href="/services">
            <div class="tab-wrapper">
                <h3>Nowe zlecenie</h3>
                <p>Utwórz nowe zlecenie serwisowe</p>
                <div class="order-box">
                    <i class="fa-solid fa-plus" style="color: #8280FF"></i>
                </div>
            </div>
        </a>

        <a class="tab-container" href="/statistics">
            <div class="tab-wrapper">
                <h3>Statystyki</h3>
                <p>Śledź ilość i status wykonanych zleceń</p>
                <div class="statistics-box">
                    <i class="fa-solid fa-chart-simple" style="color: #4AD991"></i>
                </div>
            </div>
        </a>

        <a class="tab-container" href="/report">
            <div class="tab-wrapper">
                <h3>Raport</h3>
                <p>Podsumowanie wykonanych usług</p>
                <div class="report-box">
                    <i class="fa-solid fa-file" style="color: #FF9066"></i>
                </div>
            </div>
        </a>
    </div>

    <div class="add-comment" @onclick="OpenCommentDialog">
        <div class="comment-top">
            <div class="comment-box">
                <i class="fa-regular fa-keyboard" style="color: #BA29FF; font-size: 32px;"></i>
            </div>
            <h3>Dodaj komentarz do usługi</h3>
        </div>
        <p>Podziel się swoją opinią na temat wykonanej usługi, aby ulepszyć jakość naszych usług</p>
    </div>

    <div class="add-rate" @onclick="OpenRatingDialog">
        <div class="rate-top">
            <div class="rate-box">
                <i class="fa-solid fa-star" style="color: #FEC53D; font-size: 32px;"></i>
            </div>
            <h3>Oceń wykonaną usługę</h3>
        </div>
        <p>Wystaw ocenę, aby wyrazić swoje zadowolenie z realizacji naszych usług</p>
    </div>

    
</div>

@code {
    private bool _loading = true;
    private List<Zamowienie> _zamowienia = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadServicesAsync();
    }

    private async Task LoadServicesAsync()
    {
        _loading = true;
        try
        {
            var result = await ApiService.ZamowieniaRepo.ZamowieniaGet();
            if (result.Data != null)
            {
                _zamowienia = result.Data;
                
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania zleceń: {result.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił wyjątek: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OpenCommentDialog()
    {
        var parameters = new DialogParameters
        {
            ["Orders"] = _zamowienia,
            ["CommentText"] = string.Empty,
            ["SelectedOrderId"] = 0
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            Position = DialogPosition.Center
        };

        var dialog = await DialogService.ShowAsync<CommentDialog>("", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var commentResult = (CommentDialog.CommentDialogResult)result.Data;
            try
            {
                // TODO: dodać logikę zapisu komentarza
                // await ApiService.AddComment(commentResult.OrderId, commentResult.Comment);

                Snackbar.Add("Komentarz został dodany pomyślnie", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Błąd podczas dodawania komentarza: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OpenRatingDialog()
    {
        var parameters = new DialogParameters
        {
            ["Orders"] = _zamowienia,
            ["SelectedOrderId"] = 0,
            ["SelectedRatingValue"] = 0,
            ["RatingComment"] = string.Empty
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            Position = DialogPosition.Center
        };

        var dialog = await DialogService.ShowAsync<RatingDialog>("", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var ratingResult = (RatingDialog.RatingDialogResult)result.Data;
            try
            {
                //TODO: dodać logikę zapisu oceny
                // await ApiService.AddRating(ratingResult.OrderId, ratingResult.Rating, ratingResult.Comment);
                Snackbar.Add("Ocena została dodana pomyślnie", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Błąd podczas dodawania oceny: {ex.Message}", Severity.Error);
            }
        }
    }

}