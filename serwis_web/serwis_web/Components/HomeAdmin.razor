@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<div class="top-section">
    <a class="tab-container">
        <div class="tab-wrapper">
            <div class="title-icon">
                <p>Liczba użytkowników</p>
                <div class="users-box">
                    <i class="fa-solid fa-user-group" style="color: #8280FF"></i>
                </div>
            </div>
            <h3>5241</h3>
        </div>
    </a>

    <a class="tab-container">
        <div class="tab-wrapper">
            <div class="title-icon">
                <p>Liczba zamówień</p>
                <div class="orders-box">
                    <i class="fa-solid fa-cube" style="color: #fec53d"></i>
                </div>
            </div>
            <h3>10231</h3>
        </div>
    </a>

    <a class="tab-container">
        <div class="tab-wrapper">
            <div class="title-icon">
                <p>Całkowita sprzedaż</p>
                <div class="statistics-box">
                    <i class="fa-solid fa-chart-line" style="color: #4AD991"></i>
                </div>
            </div>
            <h3>25000zł</h3>
        </div>
    </a>

    <a class="tab-container">
        <div class="tab-wrapper">
            <div class="title-icon">
                <p>Oczekujące</p>
                <div class="waiting-box">
                    <i class="fa-solid fa-clock-rotate-left" style="color: #FF9066"></i>
                </div>
            </div>
            <h3>512</h3>
        </div>
    </a>
</div>

<div class="chart-container">
    <MudPaper Class="pa-4 my-4">
        <MudText Typo="Typo.h6">Szczegóły sprzedaży</MudText>
        <MudChart ChartType="ChartType.Line"
                  ChartSeries="@Series"
                  XAxisLabels="@XAxisLabels"
                  Width="100%"
                  Height="350px"
                  ChartOptions="options">
        </MudChart>
        <div class="d-flex justify-space-between align-center mt-4">
            <MudSelect T="string" Label="Widok danych"
                       Value="@_selectedViewOption"
                       ValueChanged="@(value => ChangeViewOption(value))">
                <MudSelectItem Value="@("month")">Miesięcznie</MudSelectItem>
                <MudSelectItem Value="@("status")">Według statusu</MudSelectItem>
                <MudSelectItem Value="@("priority")">Według priorytetu</MudSelectItem>
            </MudSelect>
        </div>
    </MudPaper>
</div>

@code {
    private bool _loading = true;
    private List<Zamowienie> _zamowienia = new();

    private ChartOptions options = new ChartOptions();
    private List<ChartSeries> Series = new List<ChartSeries>();
    private string[] XAxisLabels = Array.Empty<string>();
    private bool _showDataMarkers = false;
    private string _selectedViewOption = "month";

    protected override async Task OnInitializedAsync()
    {
        await LoadServicesAsync();
        InitializeChartOptions();
    }

    private void InitializeChartOptions()
    {
        options.InterpolationOption = InterpolationOption.NaturalSpline;
        options.YAxisFormat = "0";
    }

    private async Task LoadServicesAsync()
    {
        _loading = true;
        try
        {
            var result = await ApiService.ZamowieniaRepo.ZamowieniaGet();
            if (result.Data != null)
            {
                _zamowienia = result.Data;
                ProcessChartData();
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania zleceń: {result.Error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił wyjątek: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private void ProcessChartData()
    {
        if (_zamowienia == null || !_zamowienia.Any())
        {
            Series = new List<ChartSeries>
            {
                new ChartSeries { Name = "Brak danych", Data = new double[] { 0 } }
            };
            XAxisLabels = new[] { "Brak danych" };
            return;
        }

        switch (_selectedViewOption)
        {
            case "month":
                ProcessMonthlyData();
                break;
            case "status":
                ProcessStatusData();
                break;
            case "priority":
                ProcessPriorityData();
                break;
            default:
                ProcessMonthlyData();
                break;
        }
    }

    private void ProcessMonthlyData()
    {
        var today = DateTime.Today;
        var sixMonthsAgo = today.AddMonths(-6);

        var dateRanges = Enumerable.Range(0, 6)
            .Select(i => today.AddMonths(-i))
            .Select(date => new { Month = date.Month, Year = date.Year })
            .Reverse()
            .ToList();

        XAxisLabels = dateRanges
            .Select(d => $"{GetMonthName(d.Month)} {d.Year}")
            .ToArray();

        var orderCounts = dateRanges
            .Select(d => _zamowienia.Count(z =>
                z.DataDodania.Month == d.Month &&
                z.DataDodania.Year == d.Year))
            .ToArray();

        Series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Liczba zamówień",
                Data = orderCounts.Select(c => (double)c).ToArray(),
                ShowDataMarkers = _showDataMarkers
            }
        };
    }

    private void ProcessStatusData()
    {
        var ordersByStatus = _zamowienia
            .GroupBy(z => z.Status?.StatusId ?? 0)
            .Select(g => new { StatusId = g.Key, Count = g.Count(), Status = g.First().Status?.Nazwa ?? "Nieznany" })
            .OrderBy(x => x.StatusId)
            .ToList();

        XAxisLabels = ordersByStatus.Select(s => s.Status).ToArray();

        Series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Liczba zamówień",
                Data = ordersByStatus.Select(s => (double)s.Count).ToArray(),
                ShowDataMarkers = _showDataMarkers
            }
        };
    }

    private void ProcessPriorityData()
    {
        var ordersByPriority = _zamowienia
            .GroupBy(z => z.Priorytet?.PriorytetId ?? 0)
            .Select(g => new { PriorityId = g.Key, Count = g.Count(), Priority = g.First().Priorytet?.Nazwa ?? "Nieznany" })
            .OrderBy(x => x.PriorityId)
            .ToList();

        XAxisLabels = ordersByPriority.Select(p => p.Priority).ToArray();

        Series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Liczba zamówień",
                Data = ordersByPriority.Select(p => (double)p.Count).ToArray(),
                ShowDataMarkers = _showDataMarkers
            }
        };
    }

    private string GetMonthName(int month)
    {
        return month switch
        {
            1 => "Sty",
            2 => "Lut",
            3 => "Mar",
            4 => "Kwi",
            5 => "Maj",
            6 => "Cze",
            7 => "Lip",
            8 => "Sie",
            9 => "Wrz",
            10 => "Paź",
            11 => "Lis",
            12 => "Gru",
            _ => "Nieznany"
        };
    }

    private void ChangeViewOption(string option)
    {
        _selectedViewOption = option;
        ProcessChartData();
        StateHasChanged();
    }

    private void ToggleDataMarkers(bool show)
    {
        _showDataMarkers = show;
        foreach (var series in Series)
        {
            series.ShowDataMarkers = show;
        }

        StateHasChanged();
    }
}