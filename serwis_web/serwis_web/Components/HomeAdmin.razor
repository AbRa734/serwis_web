@rendermode InteractiveServer
@using ApiService
@using ApiService.Models
@inject ApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@if (_isLoading)
{
    <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" Style="align-items: center; justify-content: center; display: flex; margin: 0 auto;"/>
}
else
{
    <div class="top-section">
        <a class="tab-container">
            <div class="tab-wrapper">
                <div class="title-icon">
                    <p>Liczba użytkowników</p>
                    <div class="users-box">
                        <i class="fa-solid fa-user-group" style="color: #8280FF"></i>
                    </div>
                </div>
                <h3>@_usersCount</h3>
            </div>
        </a>

        <a class="tab-container">
            <div class="tab-wrapper">
                <div class="title-icon">
                    <p>Liczba zamówień</p>
                    <div class="orders-box">
                        <i class="fa-solid fa-cube" style="color: #fec53d"></i>
                    </div>
                </div>
                <h3>@_ordersCount</h3>
            </div>
        </a>

        <a class="tab-container">
            <div class="tab-wrapper">
                <div class="title-icon">
                    <p>Całkowita sprzedaż</p>
                    <div class="statistics-box">
                        <i class="fa-solid fa-chart-line" style="color: #4AD991"></i>
                    </div>
                </div>
                <h3>@($"{_totalSales}zł")</h3>
            </div>
        </a>

        <a class="tab-container">
            <div class="tab-wrapper">
                <div class="title-icon">
                    <p>Oczekujące</p>
                    <div class="waiting-box">
                        <i class="fa-solid fa-clock-rotate-left" style="color: #FF9066"></i>
                    </div>
                </div>
                <h3>@_pendingOrdersCount</h3>
            </div>
        </a>
    </div>
    
    <div class="add-comment" @onclick="OpenCommentDialog">
        <div class="comment-top">
            <div class="comment-box">
                <i class="fa-regular fa-keyboard" style="color: #BA29FF; font-size: 32px;"></i>
            </div>
            <h3>Dodaj uwagi do wykonywanego zlecenia</h3>
        </div>
        <p>Opisz przebieg zlecenia, czy podczas jego wykonywania wystąpiły jakieś problemy? Czy klient zgłasza jakieś uwagi?</p>
    </div>

    <div class="chart-container">
        <MudPaper Class="pa-4 my-4">
            <MudText Typo="Typo.h6">Szczegóły sprzedaży</MudText>
            <MudChart ChartType="ChartType.Line"
                      ChartSeries="@Series"
                      XAxisLabels="@XAxisLabels"
                      Width="100%"
                      Height="350px"
                      ChartOptions="options">
            </MudChart>
            <div class="d-flex justify-space-between align-center mt-4">
                <MudSelect T="string" Label="Widok danych"
                           Value="@_selectedViewOption"
                           ValueChanged="@(value => ChangeViewOption(value))">
                    <MudSelectItem Value="@("month")">Miesięcznie</MudSelectItem>
                    <MudSelectItem Value="@("status")">Według statusu</MudSelectItem>
                    <MudSelectItem Value="@("priority")">Według priorytetu</MudSelectItem>
                </MudSelect>
            </div>
        </MudPaper>
    </div>
    
}


@code {
    private bool _isLoading = true;
    private List<Zamowienie> _zamowienia = new();
    private List<Uzytkownik> _uzytkownicy = new();
    private int _usersCount = 0;
    private int _ordersCount = 0;
    private int _totalSales = 0;
    private int _pendingOrdersCount = 0;
    
    private ChartOptions options = new ChartOptions();
    private List<ChartSeries> Series = new List<ChartSeries>();
    private string[] XAxisLabels = Array.Empty<string>();
    private bool _showDataMarkers = false;
    private string _selectedViewOption = "month";
    
    public Uzytkownik? _uzytkownikZalogowany;
    private Zamowienie _zamowienie = new Zamowienie();
    public List<int>? _komentarzeIds { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        try
        {
            await LoadUserData();
            await LoadOrdersAsync();
            await LoadUsersAsync();
            await LoadServicesAsync();
            InitializeChartOptions();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił blad podczas ładowania danych.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task LoadUserData()
    {
        try
        {
            _uzytkownikZalogowany = await ApiService.GetUzytkownik();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd podczas ładowania danych użytkownika.", Severity.Error);
        }
    }
    
    private void InitializeChartOptions()
    {
        options.InterpolationOption = InterpolationOption.NaturalSpline;
        options.YAxisFormat = "0";
    }

    private async Task LoadOrdersAsync()
    {
        try
        {
            var result = await ApiService.ZamowieniaRepo.ZamowieniaGet();
            if (result.Data != null)
            {
                _zamowienia = result.Data;
                _ordersCount = _zamowienia.Count();
                _pendingOrdersCount = _zamowienia.Count(zamowienie => zamowienie.Status.Nazwa == "Oczekujący" || zamowienie.Status.Nazwa == "W realizacji" || zamowienie.Status.Nazwa == "Nowy");
                _totalSales = _zamowienia.Sum(zamowienie => zamowienie.Koszt100);
                ProcessChartData();
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania zleceń.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił wyjątek podczas ładowania zleceń.", Severity.Error);
        }
    }
    
    private async Task LoadUsersAsync()
    {
        try
        {
            var result = await ApiService.UzytkownicyRepo.UzytkownicyGet();
            if (result.Data != null)
            {
                _uzytkownicy = result.Data;
                _usersCount = _uzytkownicy.Count();
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania użytkowników.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił wyjątek podczas ładowania użytkowników.", Severity.Error);
        }
    }
    
    private void ProcessChartData()
    {
        if (_zamowienia == null || !_zamowienia.Any())
        {
            Series = new List<ChartSeries>
            {
                new ChartSeries { Name = "Brak danych", Data = new double[] { 0 } }
            };
            XAxisLabels = new[] { "Brak danych" };
            return;
        }

        switch (_selectedViewOption)
        {
            case "month":
                ProcessMonthlyData();
                break;
            case "status":
                ProcessStatusData();
                break;
            case "priority":
                ProcessPriorityData();
                break;
            default:
                ProcessMonthlyData();
                break;
        }
    }

    private void ProcessMonthlyData()
    {
        var today = DateTimeOffset.UtcNow;
        var sixMonthsAgo = today.AddMonths(-6);

        var dateRanges = Enumerable.Range(0, 6)
            .Select(i => today.AddMonths(-i))
            .Select(date => new { Month = date.Month, Year = date.Year })
            .Reverse()
            .ToList();

        XAxisLabels = dateRanges
            .Select(d => $"{GetMonthName(d.Month)} {d.Year}")
            .ToArray();

        var orderCounts = dateRanges
            .Select(d => _zamowienia.Count(z =>
                z.DataDodania.Month == d.Month &&
                z.DataDodania.Year == d.Year))
            .ToArray();

        Series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Liczba zamówień",
                Data = orderCounts.Select(c => (double)c).ToArray(),
                ShowDataMarkers = _showDataMarkers
            }
        };
    }

    private void ProcessStatusData()
    {
        var ordersByStatus = _zamowienia
            .GroupBy(z => z.Status?.StatusId ?? 0)
            .Select(g => new { StatusId = g.Key, Count = g.Count(), Status = g.First().Status?.Nazwa ?? "Nieznany" })
            .OrderBy(x => x.StatusId)
            .ToList();

        XAxisLabels = ordersByStatus.Select(s => s.Status).ToArray();

        Series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Liczba zamówień",
                Data = ordersByStatus.Select(s => (double)s.Count).ToArray(),
                ShowDataMarkers = _showDataMarkers
            }
        };
    }

    private void ProcessPriorityData()
    {
        var ordersByPriority = _zamowienia
            .GroupBy(z => z.Priorytet?.PriorytetId ?? 0)
            .Select(g => new { PriorityId = g.Key, Count = g.Count(), Priority = g.First().Priorytet?.Nazwa ?? "Nieznany" })
            .OrderBy(x => x.PriorityId)
            .ToList();

        XAxisLabels = ordersByPriority.Select(p => p.Priority).ToArray();

        Series = new List<ChartSeries>
        {
            new ChartSeries
            {
                Name = "Liczba zamówień",
                Data = ordersByPriority.Select(p => (double)p.Count).ToArray(),
                ShowDataMarkers = _showDataMarkers
            }
        };
    }

    private string GetMonthName(int month)
    {
        return month switch
        {
            1 => "Sty",
            2 => "Lut",
            3 => "Mar",
            4 => "Kwi",
            5 => "Maj",
            6 => "Cze",
            7 => "Lip",
            8 => "Sie",
            9 => "Wrz",
            10 => "Paź",
            11 => "Lis",
            12 => "Gru",
            _ => "Nieznany"
        };
    }

    private void ChangeViewOption(string option)
    {
        _selectedViewOption = option;
        ProcessChartData();
        StateHasChanged();
    }

    private void ToggleDataMarkers(bool show)
    {
        _showDataMarkers = show;
        foreach (var series in Series)
        {
            series.ShowDataMarkers = show;
        }

        StateHasChanged();
    }
    
    private async Task LoadServicesAsync()
    {
        try
        {
            var result = await ApiService.ZamowieniaRepo.ZamowieniaGet();

            if (result.Data != null)
            {
                _zamowienia = result.Data;
                
            }
            else
            {
                Snackbar.Add($"Błąd podczas ładowania zleceń.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Wystąpił błąd, spróbuj ponownie później.", Severity.Error);
        }
    }
    
    private async Task OpenCommentDialog()
    {
        var parameters = new DialogParameters
        {
            ["Orders"] = _zamowienia,
            ["User"] = _uzytkownikZalogowany,
        };
        
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseButton = true,
            Position = DialogPosition.Center
        };

        var dialog = await DialogService.ShowAsync<AddCommentToOrderFromList>("", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var commentResult = (AddCommentToOrderFromList.CommentDialogResult)result.Data;
            
            try
            {
                var orderResult = await ApiService.ZamowieniaRepo.ZamowienieGet(commentResult.OrderId);

                if (orderResult.Error != null)
                {
                    Snackbar.Add($"Błąd podczas pobierania danych zlecenia.", Severity.Error);
                    return;
                }
                _zamowienie = orderResult.Data;
                
                _komentarzeIds = _zamowienie.Komentarze
                    .Select(k => k.KomentarzId)
                    .ToList();
                
                _komentarzeIds.Add(commentResult.CommentId);
                
                var zamowienieDto = new ZamowienieDto
                {
                    SerwisantId = _zamowienie.SerwisantId,
                    KlientId = _zamowienie.KlientId,
                    SerwisId = _zamowienie.Serwis.SerwisId,
                    StatusId = _zamowienie.StatusId,
                    PriorytetId = _zamowienie.PriorytetId,
                    MetodaPlatnosciId = _zamowienie.MetodaPlatnosciId,
                    KomentarzeIds = _komentarzeIds,
                    NumerTelefonuId = _zamowienie.NumerTelefonuId,
                    AdresEmailId = _zamowienie.AdresEmailId,
                    Koszt100 = _zamowienie.Koszt100,
                    Opis = _zamowienie.Opis,
                    AdresId = _zamowienie.AdresId,
                    PlanowanaDataRealizacjiOd = _zamowienie.PlanowanaDataRealizacjiOd,
                    PlanowanaDataRealizacjiDo = _zamowienie.PlanowanaDataRealizacjiDo,
                    ZrealizowanaDataRealizacjiOd = _zamowienie.ZrealizowanaDataRealizacjiOd,
                    ZrealizowanaDataRealizacjiDo = _zamowienie.ZrealizowanaDataRealizacjiDo
                };
                
                var resultOrder = await ApiService.ZamowieniaRepo.ZamowieniePut(commentResult.OrderId, zamowienieDto);
                if (resultOrder.Data != null)
                {
                    Snackbar.Add("Komentarz został dodany pomyślnie", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Błąd podczas dodawania komentarza.", Severity.Error);
                }
                
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Błąd podczas dodawania komentarza.", Severity.Error);
            }
        }
    }
}
