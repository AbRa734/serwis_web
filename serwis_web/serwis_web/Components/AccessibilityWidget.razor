@inject IJSRuntime Js
@rendermode InteractiveServer
@using Color = MudBlazor.Color
@using Placement = MudBlazor.Placement
@using Size = MudBlazor.Size

<MudTooltip Text="Narzędzia WCAG" Placement="Placement.Top">
    <MudFab Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Help"
            Size="Size.Small"
            OnClick="ToggleMenu" />
</MudTooltip>

@if (showMenu)
{
    <MudPaper Class="pa-2 d-flex flex-column gap-2"
              Style="position: fixed; bottom: 76px; right: 16px; z-index: 1000;">
        <MudButton Variant="Variant.Text" OnClick="IncreaseFont">🔎 Powiększ czcionkę</MudButton>
        <MudButton Variant="Variant.Text" OnClick="DecreaseFont">🔍 Zmniejsz czcionkę</MudButton>
        <MudButton Variant="Variant.Text" OnClick="ToggleContrast">🌗 Tryb kontrastu</MudButton>
    </MudPaper>
}

@code {
    private bool showMenu = false;
    private int fontSize = 16;
    private bool isHighContrast = false;

    private void ToggleMenu()
    {
        showMenu = !showMenu;
        StateHasChanged();
    }

    private async Task IncreaseFont()
    {
        fontSize += 2;
        await SetFontSize();
    }

    private async Task DecreaseFont()
    {
        fontSize = Math.Max(12, fontSize - 2);
        await SetFontSize();
    }

    private async Task SetFontSize()
    {
        await Js.InvokeVoidAsync("eval", $"document.documentElement.style.setProperty('--mud-typography-default-size', '{fontSize}px')");
        StateHasChanged();
    }

    private async Task ToggleContrast()
    {
        isHighContrast = !isHighContrast;
        await Js.InvokeVoidAsync("eval", $"document.body.classList.{(isHighContrast ? "add" : "remove")}('high-contrast')");
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        InvokeAsync(async () => await SetFontSize());
    }
}